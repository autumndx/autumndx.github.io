{"title":"python主要函数","date":"2021-03-31T12:35:52.000Z","date_formatted":{"ll":"2021年3月31日","L":"2021/03/31","MM-DD":"03-31"},"link":"posts/d8c26074","comments":true,"tags":["Python"],"categories":["Python"],"updated":"2021-04-14T08:54:45.199Z","content":"<h2 id=\"字符函数\">字符函数<a href=\"#字符函数\" title=\"字符函数\"></a></h2><h3 id=\"新旧字符替换replace\">新旧字符替换replace()<a href=\"#新旧字符替换replace\" title=\"新旧字符替换replace()\"></a></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'abc'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.replace(<span class=\"string\">'a'</span>, <span class=\"string\">'A'</span>)\t//把字符串中的 old（旧字符串） 替换成new(新字符串)</span><br><span class=\"line\"><span class=\"string\">'Abc'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"string\">'abc'</span></span><br></pre></td></tr></table></figure><p><strong>虽然字符串有个<code>replace()</code>方法，也确实变出了<code>&#39;Abc&#39;</code>，但变量<code>a</code>最后仍是<code>&#39;abc&#39;</code></strong>，应该怎么理解呢？</p>\n<p>我们先把代码改成下面这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'abc'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a.replace(<span class=\"string\">'a'</span>, <span class=\"string\">'A'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\"><span class=\"string\">'Abc'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"string\">'abc'</span></span><br></pre></td></tr></table></figure><p>要始终牢记的是，<code>a</code>是变量，而<code>&#39;abc&#39;</code>才是字符串对象！有些时候，我们经常说，对象<code>a</code>的内容是<code>&#39;abc&#39;</code>，但其实是指，<code>a</code>本身是一个变量，它指向的对象的内容才是<code>&#39;abc&#39;</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌───┐                  ┌───────┐</span><br><span class=\"line\">│ a │─────────────────&gt;│ &#39;abc&#39; │</span><br><span class=\"line\">└───┘                  └───────┘</span><br></pre></td></tr></table></figure><p>当我们调用<code>a.replace(&#39;a&#39;, &#39;A&#39;)</code>时，实际上调用方法<code>replace</code>是作用在字符串对象<code>&#39;abc&#39;</code>上的，而这个方法虽然名字叫<code>replace</code>，但却没有改变字符串<code>&#39;abc&#39;</code>的内容。相反，<code>replace</code>方法创建了一个新字符串<code>&#39;Abc&#39;</code>并返回，如果我们用变量<code>b</code>指向该新字符串，就容易理解了，变量<code>a</code>仍指向原有的字符串<code>&#39;abc&#39;</code>，但变量<code>b</code>却指向新字符串<code>&#39;Abc&#39;</code>了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌───┐                  ┌───────┐</span><br><span class=\"line\">│ a │─────────────────&gt;│ &#39;abc&#39; │</span><br><span class=\"line\">└───┘                  └───────┘</span><br><span class=\"line\">┌───┐                  ┌───────┐</span><br><span class=\"line\">│ b │─────────────────&gt;│ &#39;Abc&#39; │</span><br><span class=\"line\">└───┘                  └───────┘</span><br></pre></td></tr></table></figure><p>所以，对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。</p>\n<h3 id=\"转整数（转字符）\">转整数（转字符）<a href=\"#转整数（转字符）\" title=\"转整数（转字符）\"></a></h3><p><code>ord()</code>函数获取字符的<strong>整数表示</strong>，<code>chr()</code>函数把<strong>编码转换为对应的字符</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ord(<span class=\"string\">'A'</span>)</span><br><span class=\"line\"><span class=\"number\">65</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ord(<span class=\"string\">'中'</span>)</span><br><span class=\"line\"><span class=\"number\">20013</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>chr(<span class=\"number\">66</span>)</span><br><span class=\"line\"><span class=\"string\">'B'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>chr(<span class=\"number\">25991</span>)</span><br><span class=\"line\"><span class=\"string\">'文'</span></span><br></pre></td></tr></table></figure><p>如果知道字符的整数编码，还可以用十六进制这么写<code>str</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'\\u4e2d\\u6587'</span></span><br><span class=\"line\"><span class=\"string\">'中文'</span></span><br></pre></td></tr></table></figure><h3 id=\"转字节ascii、utf-8\">转字节(ascii、utf-8)<a href=\"#转字节ascii、utf-8\" title=\"转字节(ascii、utf-8)\"></a></h3><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th align=\"left\">字符</th><th align=\"left\">ASCII</th><th align=\"left\">Unicode</th><th align=\"left\">UTF-8</th></tr>\n</thead><tbody><tr>\n<td align=\"left\">A</td><td align=\"left\">01000001</td><td align=\"left\">00000000 01000001</td><td align=\"left\">01000001</td></tr>\n<tr>\n<td align=\"left\">中</td><td align=\"left\">x</td><td align=\"left\">01001110 00101101</td><td align=\"left\">11100100 10111000 10101101</td></tr>\n</tbody></table></div></div><p>对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"string\">b'ABC'</span></span><br></pre></td></tr></table></figure><p>要注意区分<code>&#39;ABC&#39;</code>和<code>b&#39;ABC&#39;</code>，前者是<code>str</code>，后者虽然内容显示得和前者一样，但<strong><code>bytes</code>的每个字符都只占用一个字节。</strong></p>\n<p><mark>以Unicode表示的<code>str</code>通过<code>encode()</code>方法可以编码为指定的<code>bytes</code></mark>，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'ABC'</span>.encode(<span class=\"string\">'ascii'</span>)</span><br><span class=\"line\"><span class=\"string\">b'ABC'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'中文'</span>.encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"><span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'中文'</span>.encode(<span class=\"string\">'ascii'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">UnicodeEncodeError: <span class=\"string\">'ascii'</span> codec can<span class=\"string\">'t encode characters in position 0-1: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure><p>纯英文的<code>str</code>可以用<code>ASCII</code>编码为<code>bytes</code>，内容是一样的，含有中文的<code>str</code>可以用<code>UTF-8</code>编码为<code>bytes</code>。含有中文的<code>str</code>无法用<code>ASCII</code>编码，因为中文编码的范围超过了<code>ASCII</code>编码的范围，Python会报错。</p>\n<p>在<code>bytes</code>中，无法显示为ASCII字符的字节，用<code>\\x##</code>显示。</p>\n<p>反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是<code>bytes</code>。要把<code>bytes</code>变为<code>str</code>，就需要用<code>decode()</code>方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b'ABC'</span>.decode(<span class=\"string\">'ascii'</span>)</span><br><span class=\"line\"><span class=\"string\">'ABC'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span>.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"><span class=\"string\">'中文'</span></span><br></pre></td></tr></table></figure><p>如果<code>bytes</code>中包含无法解码的字节，<code>decode()</code>方法会报错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b'\\xe4\\xb8\\xad\\xff'</span>.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  ...</span><br><span class=\"line\">UnicodeDecodeError: <span class=\"string\">'utf-8'</span> codec can<span class=\"string\">'t decode byte 0xff in position 3: invalid start byte</span></span><br></pre></td></tr></table></figure><p>如果<code>bytes</code>中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b'\\xe4\\xb8\\xad\\xff'</span>.decode(<span class=\"string\">'utf-8'</span>, errors=<span class=\"string\">'ignore'</span>)</span><br><span class=\"line\"><span class=\"string\">'中'</span></span><br></pre></td></tr></table></figure><h3 id=\"计算字符数\">计算字符数<a href=\"#计算字符数\" title=\"计算字符数\"></a></h3><p>要计算<code>str</code>包含多少个字符，可以用<code>len()</code>函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(<span class=\"string\">'ABC'</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(<span class=\"string\">'中文'</span>)</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure><p><code>len()</code>函数计算的是<code>str</code>的字符数，如果换成<code>bytes</code>，<code>len()</code>函数就计算字节数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(<span class=\"string\">b'ABC'</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(<span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span>)</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(<span class=\"string\">'中文'</span>.encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure><h2 id=\"列表list\">列表list<a href=\"#列表list\" title=\"列表list\"></a></h2><h3 id=\"列表元素个数\">列表元素个数<a href=\"#列表元素个数\" title=\"列表元素个数\"></a></h3><p>用<code>len()</code>函数可以获得list元素的个数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates = [<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(classmates)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure><h3 id=\"索引元素\">索引元素<a href=\"#索引元素\" title=\"索引元素\"></a></h3><p><strong>如果要取最后一个元素，除了计算索引位置外，还可以用<code>-1</code>做索引，直接获取最后一个元素：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates[<span class=\"number\">-1</span>]</span><br><span class=\"line\"><span class=\"string\">'Tracy'</span></span><br></pre></td></tr></table></figure><p>以此类推，可以获取倒数第2个、倒数第3个：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; classmates[-2]</span><br><span class=\"line\">&#39;Bob&#39;</span><br><span class=\"line\">&gt;&gt;&gt; classmates[-3]</span><br><span class=\"line\">&#39;Michael&#39;</span><br><span class=\"line\">&gt;&gt;&gt; classmates[-4]</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">IndexError: list index out of range</span><br></pre></td></tr></table></figure><p>当然，倒数第4个就越界了。</p>\n<h3 id=\"追加元素\">追加元素<a href=\"#追加元素\" title=\"追加元素\"></a></h3><p><strong>追加元素到末尾</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates.append(<span class=\"string\">'Adam'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>, <span class=\"string\">'Adam'</span>]</span><br></pre></td></tr></table></figure><p><strong>把元素插入到指定的位置</strong></p>\n<p>比如索引号为<code>1</code>的位置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates.insert(<span class=\"number\">1</span>, <span class=\"string\">'Jack'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Jack'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>, <span class=\"string\">'Adam'</span>]</span><br></pre></td></tr></table></figure><h3 id=\"删除元素\">删除元素<a href=\"#删除元素\" title=\"删除元素\"></a></h3><p><strong>删除list末尾的元素</strong>，用<code>pop()</code>方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates.pop()</span><br><span class=\"line\"><span class=\"string\">'Adam'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Jack'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br></pre></td></tr></table></figure><p>要<strong>删除指定位置的元素</strong>，用<code>pop(i)</code>方法，其中<code>i</code>是索引位置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates.pop(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"string\">'Jack'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br></pre></td></tr></table></figure><h3 id=\"元素替换\">元素替换<a href=\"#元素替换\" title=\"元素替换\"></a></h3><p>要把某个<strong>元素替换成别的元素</strong>，可以直接赋值给对应的索引位置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates[<span class=\"number\">1</span>] = <span class=\"string\">'Sarah'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Sarah'</span>, <span class=\"string\">'Tracy'</span>]</span><br></pre></td></tr></table></figure><p><mark>list里面的<strong>元素的数据类型也可以不同</strong></mark>，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">'Apple'</span>, <span class=\"number\">123</span>, <span class=\"literal\">True</span>]</span><br></pre></td></tr></table></figure><p>list元素也可以是另一个list，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = [<span class=\"string\">'python'</span>, <span class=\"string\">'java'</span>, [<span class=\"string\">'asp'</span>, <span class=\"string\">'php'</span>], <span class=\"string\">'scheme'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(s)</span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure><p>要注意<code>s</code>只有4个元素，其中<code>s[2]</code>又是一个list，如果拆开写就更容易理解了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p = [<span class=\"string\">'asp'</span>, <span class=\"string\">'php'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = [<span class=\"string\">'python'</span>, <span class=\"string\">'java'</span>, p, <span class=\"string\">'scheme'</span>]</span><br></pre></td></tr></table></figure><p>要拿到<code>&#39;php&#39;</code>可以写<code>p[1]</code>或者<code>s[2][1]</code>，因此<code>s</code>可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。</p>\n<p>如果一个list中一个元素也没有，就是一个空的list，它的长度为0：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = []</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(L)</span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure><h3 id=\"排序sort\">排序sort()<a href=\"#排序sort\" title=\"排序sort()\"></a></h3><p><strong>描述</strong></p>\n<p><code>sort()</code> 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.sort()\t//对原列表进行排序</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br></pre></td></tr></table></figure><p><strong>语法</strong></p>\n<p><code>sort()</code>方法语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list.sort(cmp=<span class=\"literal\">None</span>, key=<span class=\"literal\">None</span>, reverse=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p>\n<ul><li><code>cmp</code> – 可选参数, 如果指定了该参数会使用该参数的方法进行排序。</li>\n<li><code>key</code> – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li>\n<li><code>reverse</code> – 排序规则，<strong>reverse = True</strong> 降序， <strong>reverse = False</strong> 升序（默认）。</li>\n</ul><h2 id=\"字典-dict-\">字典 dict {}<a href=\"#字典-dict-\" title=\"字典 dict {}\"></a></h2><h3 id=\"判断key的存在\">判断key的存在<a href=\"#判断key的存在\" title=\"判断key的存在\"></a></h3><p>如果key不存在，dict就会报错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'Michael'</span>: <span class=\"number\">95</span>, <span class=\"string\">'Bob'</span>: <span class=\"number\">75</span>, <span class=\"string\">'Tracy'</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'Thomas'</span>]</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">KeyError: <span class=\"string\">'Thomas'</span></span><br></pre></td></tr></table></figure><h4 id=\"in\">in<a href=\"#in\" title=\"in\"></a></h4><p>要避免key不存在的错误，有两种办法，一是通过<code>in</code>判断key是否存在：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'Michael'</span>: <span class=\"number\">95</span>, <span class=\"string\">'Bob'</span>: <span class=\"number\">75</span>, <span class=\"string\">'Tracy'</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'Thomas'</span> <span class=\"keyword\">in</span> d</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure><h4 id=\"get\">get()<a href=\"#get\" title=\"get()\"></a></h4><p>二是通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'Michael'</span>: <span class=\"number\">95</span>, <span class=\"string\">'Bob'</span>: <span class=\"number\">75</span>, <span class=\"string\">'Tracy'</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.get(<span class=\"string\">'Thomas'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.get(<span class=\"string\">'Thomas'</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"number\">-1</span></span><br></pre></td></tr></table></figure><p>注意：返回<code>None</code>的时候Python的交互环境不显示结果。</p>\n<h4 id=\"删除key\">删除key<a href=\"#删除key\" title=\"删除key\"></a></h4><p>要删除一个key，<strong>用<code>pop(key)</code>方法，对应的value也会从dict中删除</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'Michael'</span>: <span class=\"number\">95</span>, <span class=\"string\">'Bob'</span>: <span class=\"number\">75</span>, <span class=\"string\">'Tracy'</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.pop(<span class=\"string\">'Bob'</span>)</span><br><span class=\"line\"><span class=\"number\">75</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d</span><br><span class=\"line\">&#123;<span class=\"string\">'Michael'</span>: <span class=\"number\">95</span>, <span class=\"string\">'Tracy'</span>: <span class=\"number\">85</span>&#125;</span><br></pre></td></tr></table></figure><p>请务必注意，<strong>dict内部存放的顺序和key放入的顺序是没有关系的</strong>。</p>\n<p>和list比较，dict有以下几个特点：</p>\n<ol><li>查找和插入的<strong>速度极快</strong>，不会随着key的增加而变慢；</li>\n<li>需要<strong>占用大量的内存，内存浪费多</strong>。</li>\n</ol><p>而list相反：</p>\n<ol><li>查找和插入的<strong>时间随着元素的增加</strong>而增加；</li>\n<li>占用<strong>空间小</strong>，<strong>浪费内存很少</strong>。</li>\n</ol><p>所以，dict是用<strong>空间来换取时间</strong>的一种方法。</p>\n<p>dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是<mark><strong>dict的key必须是不可变对象</strong></mark>。</p>\n<p>这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个<strong>通过key计算位置的算法称为哈希算法（Hash）。</strong></p>\n<p>要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>key = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[key] = <span class=\"string\">'a list'</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: unhashable type: <span class=\"string\">'list'</span></span><br></pre></td></tr></table></figure><h2 id=\"set\">set<a href=\"#set\" title=\"set\"></a></h2><h3 id=\"addkey\">add(key)<a href=\"#addkey\" title=\"add(key)\"></a></h3><p>通过<code>add(key)</code>方法可以添加元素到set中，可以重复添加，但不会有效果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = set([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.add(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.add(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br></pre></td></tr></table></figure><h3 id=\"removekey\">remove(key)<a href=\"#removekey\" title=\"remove(key)\"></a></h3><p>通过<code>remove(key)</code>方法可以删除元素：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.remove(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure><p>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s1 = set([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s2 = set([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s1 &amp; s2</span><br><span class=\"line\">&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s1 | s2</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>set和dict的唯一区别仅在于没有存储对应的value</strong>，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。试试把list放入set，看看是否会报错。</p>\n<h2 id=\"函数\">函数<a href=\"#函数\" title=\"函数\"></a></h2><h3 id=\"max\">max<a href=\"#max\" title=\"max\"></a></h3><p><code>max</code>函数<code>max()</code><strong>可以接收任意多个参数，并返回最大的那个</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>max(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>max(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">-5</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure><h3 id=\"数据类型检查-isinstance\">数据类型检查 isinstance()<a href=\"#数据类型检查-isinstance\" title=\"数据类型检查 isinstance()\"></a></h3><p>让我们修改一下<code>my_abs</code>的定义，对参数类型做检查，只允许整数和浮点数类型的参数。<strong>数据类型检查可以用内置函数<code>isinstance()</code>实现</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_abs</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(x, (int, float)):</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">'bad operand type'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -x</span><br></pre></td></tr></table></figure><p>添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_abs(<span class=\"string\">'A'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">3</span>, <span class=\"keyword\">in</span> my_abs</span><br><span class=\"line\">TypeError: bad operand type</span><br></pre></td></tr></table></figure><p>错误和异常处理将在后续讲到。</p>\n","prev":{"title":"SQL Sever安装教程","link":"posts/d6a1283f"},"next":{"title":"Python基础","link":"posts/99832f47"},"plink":"https://dxsummer.gitee.io/posts/d8c26074/","toc":[{"id":"字符函数","title":"字符函数","index":"1","children":[{"id":"新旧字符替换replace","title":"新旧字符替换replace()","index":"1.1"},{"id":"转整数（转字符）","title":"转整数（转字符）","index":"1.2"},{"id":"转字节ascii、utf-8","title":"转字节(ascii、utf-8)","index":"1.3"},{"id":"计算字符数","title":"计算字符数","index":"1.4"}]},{"id":"列表list","title":"列表list","index":"2","children":[{"id":"列表元素个数","title":"列表元素个数","index":"2.1"},{"id":"索引元素","title":"索引元素","index":"2.2"},{"id":"追加元素","title":"追加元素","index":"2.3"},{"id":"删除元素","title":"删除元素","index":"2.4"},{"id":"元素替换","title":"元素替换","index":"2.5"},{"id":"排序sort","title":"排序sort()","index":"2.6"}]},{"id":"字典-dict-","title":"字典 dict {}","index":"3","children":[{"id":"判断key的存在","title":"判断key的存在","index":"3.1","children":[{"id":"in","title":"in","index":"3.1.1"},{"id":"get","title":"get()","index":"3.1.2"},{"id":"删除key","title":"删除key","index":"3.1.3"}]}]},{"id":"set","title":"set","index":"4","children":[{"id":"addkey","title":"add(key)","index":"4.1"},{"id":"removekey","title":"remove(key)","index":"4.2"}]},{"id":"函数","title":"函数","index":"5","children":[{"id":"max","title":"max","index":"5.1"},{"id":"数据类型检查-isinstance","title":"数据类型检查 isinstance()","index":"5.2"}]}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/d8c26074/\" title=\"python主要函数\">https://dxsummer.gitee.io/posts/d8c26074/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2021年3月31日","updated":"2021年4月14日"}}