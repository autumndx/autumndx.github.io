{"title":"线性表","date":"2020-10-01T15:17:20.000Z","date_formatted":{"ll":"2020年10月1日","L":"2020/10/01","MM-DD":"10-01"},"link":"posts/40f24371","comments":true,"tags":["数据结构"],"categories":["数据结构"],"updated":"2020-10-11T14:03:07.347Z","content":"<h1 id=\"线性表的定义和特点\">线性表的定义和特点<a href=\"#线性表的定义和特点\" title=\"线性表的定义和特点\"></a></h1><p>同一线性表的元素必定具有相同的特性，即属于同一数据对象，相邻数据元素之间存在着序偶关系</p>\n<p>由n（n&gt;=0）个数据特性相同的<strong>元素</strong>构成的有限序列称为<strong>线性表</strong></p>\n<p>线性表中元素的个数n（n&gt;=0）定义为线性表的长度，n=0时称为<strong>空表</strong></p>\n<p><strong>非空线性表或线性结构的特点</strong></p>\n<ol><li>存在唯一的一个被称作“第一个”的数据元素</li>\n<li>存在唯一的一个被称作“最后一个”的数据元素</li>\n<li>除第一个之外，结构中的每个数据元素均只有一个前驱</li>\n<li>除最后一个之外，结构中的每个数据元素均只有一个后继</li>\n</ol><h2 id=\"什么是线性表\">什么是线性表<a href=\"#什么是线性表\" title=\"什么是线性表\"></a></h2><p><strong>线性表</strong>，全名为<strong>线性存储结构</strong>。使用线性表存储数据的方式可以这样理解，即“<font color=\"red\">把所有数据用一根线儿<a href=\"http://data.biancheng.net/view/175.html\" target=\"_blank\">串</a>起来，再存储到物理空间中</font>”。</p>\n<p>首先，用“一根线儿”把它们按照顺序“串”起来，如图 2 所示：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/1-1Q12021551W22.gif\" class=\"φcy\"><br>图 2 数据的”线性”结构</p>\n<p>图 2 中，左侧是“串”起来的数据，右侧是空闲的物理空间。把这“一串儿”数据放置到物理空间，我们可以选择以下两种方式，如图 3 所示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/1-1Q120215009361.gif\" class=\"φcy\" alt=\"两种线性存储结构\"><br>图 3 两种线性存储结构</p>\n<p>图 3a) 是多数人想到的存储方式，而图 3b) 却少有人想到。我们知道，数据存储的成功与否，取决于是否能将数据完整地复原成它本来的样子。如果把图 3a) 和图 3b) 线的一头扯起，你会发现数据的位置依旧没有发生改变（和图 1 一样）。因此可以认定，这两种存储方式都是正确的。</p>\n<p><mark>将具有“<strong>一对一</strong>”关系的数据“线性”地存储到物理空间中，这种存储结构就称为线性存储结构（简称线性表）。</mark></p>\n<p>使用线性表存储的数据，如同向<a href=\"http://data.biancheng.net/view/181.html\" target=\"_blank\">数组</a>中存储数据那样，要求<strong>数据类型必须一致</strong>，也就是说，线性表存储的数据，要么全不都是整形，要么全部都是字符串。一半是整形，另一半是字符串的一组数据无法使用线性表存储。</p>\n<h2 id=\"顺序存储结构和链式存储结构\">顺序存储结构和链式存储结构<a href=\"#顺序存储结构和链式存储结构\" title=\"顺序存储结构和链式存储结构\"></a></h2><p>图 3 中我们可以看出，线性表存储数据可细分为以下 2 种：</p>\n<ol><li><p>如图 3a) 所示，将数据依次<strong>存储在连续的整块物理空间</strong>中，这种存储结构称为<font color=\"red\">顺序存储结构（简称<a href=\"http://data.biancheng.net/view/158.html\" target=\"_blank\">顺序表</a>）</font>；</p>\n</li>\n<li><p>如图 3b) 所示，数据<strong>分散的存储在物理空间中</strong>，通过一根线保存着它们之间的逻辑关系，这种存储结构称为<font color=\"green\">链式存储结构（简称<a href=\"http://data.biancheng.net/view/160.html\" target=\"_blank\">链表</a>）</font>；</p>\n</li>\n</ol><p>也就是说，线性表存储结构可细分为<strong>顺序存储结构</strong>和<strong>链式存储结构</strong>。</p>\n<h2 id=\"线性表常用术语\">线性表常用术语<a href=\"#线性表常用术语\" title=\"线性表常用术语\"></a></h2><p>数据结构中，一组数据中的每个个体被称为“<font color=\"green\">数据元素</font>”（简称“元素”）。例如，图 1 显示的这组数据，其中 1、2、3、4 和 5 都是这组数据钟的一个元素。</p>\n<p>另外，对于具有“一对一”逻辑关系的数据，我们一直在用“某一元素的左侧（前边）或右侧（后边）”这样不专业的词，其实线性表中有更准确的术语：</p>\n<ul><li>某一元素的左侧相邻元素称为“<font color=\"green\">直接前驱</font>”，位于此元素左侧的所有元素都统称为“<font color=\"green\">前驱元素</font>”；</li>\n<li>某一元素的右侧相邻元素称为“<font color=\"green\">直接后继</font>”，位于此元素右侧的所有元素都统称为“<font color=\"green\">后继元素</font>”；</li>\n</ul><p>以图 1 数据中的元素 3 来说，它的直接前驱是 2 ，此元素的前驱元素有 2 个，分别是 1 和 2；同理，此元素的直接后继是 4 ，后继元素也有 2 个，分别是 4 和 5。如图 4 所示：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/1-1Q1202152464R.gif\" class=\"φcy\" alt=\"前驱和后继\"><br>图 4 前驱和后继</p>\n<h1 id=\"顺序表示和实现\">顺序表示和实现<a href=\"#顺序表示和实现\" title=\"顺序表示和实现\"></a></h1><h2 id=\"顺序存储表示\">顺序存储表示<a href=\"#顺序存储表示\" title=\"顺序存储表示\"></a></h2><ul><li>用一组地址连续的存储单元依次存储线性表的数据元素，这种表示也称<strong>线性表的顺序存储结构</strong>或<strong>顺序映像</strong>，这种存储结构的线性表为<strong>顺序表</strong></li>\n<li>逻辑上相邻的数据元素，物理次序也相邻</li>\n<li><font color=\"red\">顺序表存储数据时，会提前申请一整块足够大小的物理空间，然后将数据依次存储起来，存储时做到数据元素之间不留一丝缝隙</font></li>\n</ul><blockquote>\n<p>线性表的顺序存储结构是一种<mark>随机存取</mark></p>\n</blockquote>\n<img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011114124.png\" style=\"zoom:67%;\" /><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011114532.png\" style=\"zoom:67%;\" /><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201003225615.png\" class=\"φcy\"></p>\n<blockquote>\n<p>LOC(a<sub>i+1</sub>) = LOC(a<sub>i</sub>) + l</p>\n<p>LOC(a<sub>i</sub>) = LOC(a<sub>1</sub>) + (i-1) x l</p>\n</blockquote>\n<ul><li><p>i：第i个数据元素    </p>\n</li>\n<li><p>LOC(a<sub>i</sub>)：第i个数据元素的存储地址    </p>\n</li>\n<li><p>L：每个元素占用L个存储单位</p>\n</li>\n</ul><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/IMG_1360(20201002-123156).JPG\" style=\"zoom: 20%;\" /><h2 id=\"基本操作的实现\">基本操作的实现<a href=\"#基本操作的实现\" title=\"基本操作的实现\"></a></h2><h3 id=\"类型定义\">类型定义<a href=\"#类型定义\" title=\"类型定义\"></a></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>  MAXSIZE 100     <span class=\"comment\">//最大长度</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"> \t ElemType  *elem;      <span class=\"comment\">//指向数据元素的基地址</span></span><br><span class=\"line\">  \t<span class=\"keyword\">int</span>  length;                 <span class=\"comment\">//线性表的当前长度                        </span></span><br><span class=\"line\"> &#125;SqList；</span><br></pre></td></tr></table></figure><ol><li><code>ElemType</code>可以是<code>int</code>、<code>float</code>、<code>char</code>，也可以是结构体类型<code>struct</code></li>\n<li><code>length</code>当前数据元素的个数，C语言数组的下标是从0开始的，而位置序号从1开始</li>\n</ol><blockquote>\n<p>图书表的顺序存储结构类型定义</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXSIZE 10000\t<span class=\"comment\">//图书表可能达到的最大长度 </span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>\t\t\t//图书信息定义</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span> </span><br><span class=\"line\">   <span class=\"keyword\">char</span> no[<span class=\"number\">20</span>];\t\t\t<span class=\"comment\">//图书ISBN</span></span><br><span class=\"line\">   <span class=\"keyword\">char</span> name[<span class=\"number\">50</span>];\t\t<span class=\"comment\">//图书名字</span></span><br><span class=\"line\">   <span class=\"keyword\">float</span> price; \t\t\t<span class=\"comment\">//图书价格</span></span><br><span class=\"line\">&#125;Book;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span> </span><br><span class=\"line\">   Book *elem;\t             <span class=\"comment\">//存储空间的基地址 </span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> length;\t\t<span class=\"comment\">//图书表中当前图书个数 c</span></span><br><span class=\"line\">&#125;SqList;\t\t<span class=\"comment\">//图书表的顺序存储结构类型为SqList</span></span><br><span class=\"line\">SqList L;</span><br></pre></td></tr></table></figure><p>将<code>L</code>定义为<code>Sqlist</code>类型的变量，利用<code>L.elem[i-1]</code>访问表中位置序号为<code>i</code>的图书记录</p>\n<img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011110608.png\" style=\"zoom: 67%;\" /><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011111144.png\" style=\"zoom:67%;\" /><h3 id=\"初始化\">初始化<a href=\"#初始化\" title=\"初始化\"></a></h3><p><strong>使用顺序表存储数据之前，除了要申请足够大小的物理空间之外，为了方便后期使用表中的数据，顺序表还需要实时记录以下 2 项数据：</strong></p>\n<ol><li>顺序表申请的存储容量；</li>\n<li>顺序表的长度，也就是表中存储数据元素的个数；</li>\n</ol><p><font color=\"purple\">提示：正常状态下，顺序表申请的存储容量要大于顺序表的长度。</font></p>\n<p>初始化线性表L （参数用引用）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Status <span class=\"title\">InitList_Sq</span><span class=\"params\">(SqList &amp;L)</span>                   <span class=\"comment\">//构造一 个空的顺序表L</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    L.elem=<span class=\"keyword\">new</span> ElemType[MAXSIZE];   <span class=\"comment\">//为顺序表分配空间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!L.elem) <span class=\"built_in\">exit</span>(OVERFLOW);           <span class=\"comment\">//存储分配失败</span></span><br><span class=\"line\">    L.length=<span class=\"number\">0</span>;\t\t\t\t     <span class=\"comment\">//空表长度为0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"取值随机存取-o1\">取值(随机存取) O(1)<a href=\"#取值随机存取-o1\" title=\"取值(随机存取) O(1)\"></a></h3><ul><li>根据位置i获取相应位置数据元素的内容</li>\n</ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">GetElem</span><span class=\"params\">(SqList L,<span class=\"keyword\">int</span> i,ElemType &amp;e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i&lt;<span class=\"number\">1</span>||i&gt;L.length) <span class=\"keyword\">return</span> ERROR;   </span><br><span class=\"line\">   <span class=\"comment\">//判断i值是否合理，若不合理，返回ERROR</span></span><br><span class=\"line\">  e=L.elem[i<span class=\"number\">-1</span>];   <span class=\"comment\">//第i-1的单元存储着第i个数据</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"查找-on\">查找 O(n)<a href=\"#查找-on\" title=\"查找 O(n)\"></a></h3><p>顺序表中查找目标元素，可以使用多种查找算法实现，比如说<a href=\"http://data.biancheng.net/view/55.html\" target=\"_blank\">二分查找</a>算法、插值查找算法等。这里，我们选择<a href=\"http://data.biancheng.net/view/54.html\" target=\"_blank\">顺序查找</a>算法，具体实现代码为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在线性表L中查找值为e的数据元素</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">LocateELem</span><span class=\"params\">(SqList L,ElemType e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt; L.length;i++)</span><br><span class=\"line\">      \t<span class=\"keyword\">if</span> (L.elem[i]==e) <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;                </span><br><span class=\"line\"> \t <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"插入-on\">插入 O(n)<a href=\"#插入-on\" title=\"插入 O(n)\"></a></h3><p>向已有顺序表中插入数据元素，根据插入位置的不同，可分为以下 3 种情况：</p>\n<ol><li>插入到顺序表的表头；</li>\n<li>在表的中间位置插入元素；</li>\n<li>尾随顺序表中已有元素，作为顺序表中的最后一个元素；</li>\n</ol><p>虽然数据元素插入顺序表中的位置有所不同，但是都使用的是同一种方式去解决，即：通过遍历，找到数据元素要插入的位置，然后做如下两步工作：</p>\n<ul><li>将要插入位置元素以及后续的元素整体向后移动一个位置；</li>\n<li>将元素放到腾出来的位置上；</li>\n</ul><p>例如，在 <code>{1,2,3,4,5}</code> 的第 3 个位置上插入元素 6，实现过程如下：</p>\n<ul><li>遍历至顺序表存储第 3 个数据元素的位置，如<a href=\"http://data.biancheng.net/view/200.html\" target=\"_blank\">图</a> 1 所示：</li>\n</ul><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/2-1Q122201300X8.gif\" class=\"φcy\" alt=\"找到目标元素位置\"><br>图 1 找到目标元素位置</p>\n<ul><li>将元素 3 以及后续元素 4 和 5 整体向后移动一个位置，如图 2 所示：</li>\n</ul><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201002151042.gif\" class=\"φcy\" alt=\"将插入位置腾出\"><br>图 2 将插入位置腾出</p>\n<ul><li>将新元素 6 放入腾出的位置，如图 3 所示：</li>\n</ul><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201002151117.gif\" class=\"φcy\" alt=\"插入目标元素\"><br>图 3 插入目标元素</p>\n<blockquote>\n<p>在线性表L中第i个数据元素之前插入数据元素e </p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Status <span class=\"title\">ListInsert_Sq</span><span class=\"params\">(SqList &amp;L,<span class=\"keyword\">int</span> i ,ElemType e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span> || i&gt;L.length+<span class=\"number\">1</span>) <span class=\"keyword\">return</span> ERROR;\t         <span class=\"comment\">//i值不合法</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span>(L.length==MAXSIZE) <span class=\"keyword\">return</span> ERROR;    <span class=\"comment\">//当前存储空间已满     </span></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(j=L.length<span class=\"number\">-1</span>;j&gt;=i<span class=\"number\">-1</span>;j--) </span><br><span class=\"line\">       L.elem[j+<span class=\"number\">1</span>]=L.elem[j];    <span class=\"comment\">//插入位置及之后的元素后移</span></span><br><span class=\"line\">    L.elem[i<span class=\"number\">-1</span>]=e;                     <span class=\"comment\">//将新元素e放入第i个位置</span></span><br><span class=\"line\">    ++L.length;\t\t     \t<span class=\"comment\">//表长增1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"删除\">删除<a href=\"#删除\" title=\"删除\"></a></h3><p>从顺序表中删除指定元素，实现起来非常简单，只需找到目标元素，并将其后续所有元素整体前移 1 个位置即可。</p>\n<p>后续元素整体前移一个位置，会直接将目标元素删除，可间接实现删除元素的目的。</p>\n<p>例如，从 <code>{1,2,3,4,5}</code> 中删除元素 3 的过程如图 4 所示：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201002151140.gif\" class=\"φcy\" alt=\"img\"><br>图 4 顺序表删除元素的过程示意图</p>\n<blockquote>\n<p>将线性表L中第i个数据元素删除</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Status <span class=\"title\">ListDelete_Sq</span><span class=\"params\">(SqList &amp;L,<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>((i&lt;<span class=\"number\">1</span>)||(i&gt;L.length)) <span class=\"keyword\">return</span> ERROR;\t <span class=\"comment\">//i值不合法</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (j=i;j&lt;=L.length<span class=\"number\">-1</span>;j++)                   </span><br><span class=\"line\">　  　L.elem[j<span class=\"number\">-1</span>]=L.elem[j];       <span class=\"comment\">//被删除元素之后的元素前移  </span></span><br><span class=\"line\">   --L.length;               \t                 <span class=\"comment\">//表长减1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"链式表示和实现\">链式表示和实现<a href=\"#链式表示和实现\" title=\"链式表示和实现\"></a></h1><ul><li>结点在存储器中的位置是<strong>任意的</strong>，即<strong>逻辑上相邻的数据元素在物理上不一定相邻</strong></li>\n<li>线性表的链式表示又称为<strong>非顺序映像</strong>或<strong>链式映像</strong>。</li>\n</ul><ol><li><p>数据元素本身，其所在的区域称为<font color=\"red\"><strong>数据域</strong></font>；</p>\n</li>\n<li><p>指向直接后继元素的指针，所在的区域称为<font color=\"red\"><strong>指针域</strong></font>；<br>即链表中存储各数据元素的结构如图 3 所示：</p>\n</li>\n</ol><p><img src=\"http://data.biancheng.net/uploads/allimg/181123/2-1Q1232126112G.gif\" class=\"φcy\" alt=\"img\"><br>   图 3 节点结构</p>\n<p>图 3 所示的结构在链表中称为<strong><font color=\"red\">结点</font></strong>。也就是说，链表实际存储的是一个一个的节点，真正的数据元素包含在这些节点中，如图 4 所示：</p>\n<p><img src=\"http://data.biancheng.net/uploads/allimg/181123/2-1Q123212Q3337.gif\" class=\"φcy\" alt=\"链表中的节点\"><br>图 4 链表中的节点</p>\n<blockquote>\n<p><strong>单链表、双链表、循环链表：</strong> </p>\n</blockquote>\n<ul><li>结点只有一个指针域的链表，称为<strong>单链表</strong>或线<strong>性链表</strong></li>\n<li>有两个指针域的链表，称为<strong>双链表</strong></li>\n<li>首尾相接的链表称为<strong>循环链表</strong></li>\n</ul><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011212315.png\" style=\"zoom:67%;\" /><ul><li><strong>头指针</strong>是指向链表中第一个结点的指针</li>\n<li><strong>首元结点</strong>是指链表中存储第一个数据元素a<sub>1</sub>的结点</li>\n<li><strong>头结点</strong>是在链表的首元结点之前附设的一个结点；数据域内只放空表标志和表长等信息</li>\n</ul><p><font  color=\"red\"><strong>如何表示空表？</strong></font></p>\n<p>有头结点时，当<strong>头结点的指针域为空</strong>时表示空表</p>\n<p><font color=\"red\" ><strong>在链表中设置头结点有什么好处？</strong></font></p>\n<ol><li><strong>便于首元结点的处理</strong><br>首元结点的地址保存在头结点的指针域中,所以在链表的第一个位置上的操作和其它位置一致，无须进行特殊处理</li>\n<li><strong>便于空表和非空表的统一处理</strong><br>无论链表是否为空，头指针都是指向头结点的非空指针，因此空表和非空表的处理也就统一了。</li>\n</ol><p><font color=\"red\"><strong>头结点的数据域内装的是什么？</strong></font></p>\n<p> 头结点的<strong>数据域</strong>可以为空，也可存放线性表长度等附加信息，但此结点不能计入链表长度值。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011212346.png\" style=\"zoom: 50%;\" /><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011212348.png\" style=\"zoom:67%;\" /><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011212347.png\" style=\"zoom: 50%;\" /><h2 id=\"单链表的定义和实现\">单链表的定义和实现<a href=\"#单链表的定义和实现\" title=\"单链表的定义和实现\"></a></h2><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011213038.png\" style=\"zoom: 67%;\" /><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Lnode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">     ElemType   data;       <span class=\"comment\">//数据域</span></span><br><span class=\"line\">     <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>  *<span class=\"title\">next</span>;</span>   <span class=\"comment\">//指针域</span></span><br><span class=\"line\">&#125;LNode,*LinkList;   </span><br><span class=\"line\"><span class=\"comment\">// *LinkList为Lnode类型的指针</span></span><br><span class=\"line\">LNode *p\t<span class=\"comment\">//p为指向单链表中某个节点的指针 *p表示该结点</span></span><br><span class=\"line\">LinkList L\t<span class=\"comment\">//L为单链表的头指针</span></span><br></pre></td></tr></table></figure><p><strong>指针变量p</strong>：表示结点地址<br><strong>结点变量*p</strong>：表示一个结点</p>\n<h2 id=\"基本操作\">基本操作<a href=\"#基本操作\" title=\"基本操作\"></a></h2><h3 id=\"初始化构造一个空表-\">初始化(构造一个空表 )<a href=\"#初始化构造一个空表-\" title=\"初始化(构造一个空表 )\"></a></h3><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011213153.png\" style=\"zoom:67%;\" /><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Status <span class=\"title\">InitList_L</span><span class=\"params\">(LinkList &amp;L)</span></span>&#123; </span><br><span class=\"line\">   L=<span class=\"keyword\">new</span> LNode;                    \t</span><br><span class=\"line\">   L-&gt;next=<span class=\"literal\">NULL</span>;　　　　　</span><br><span class=\"line\">   <span class=\"keyword\">return</span> OK; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><font color=\"green\"><strong>销毁</strong></font></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Status <span class=\"title\">DestroyList_L</span><span class=\"params\">(LinkList &amp;L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LinkList p;</span><br><span class=\"line\">       <span class=\"keyword\">while</span>(L)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p=L;  </span><br><span class=\"line\">            L=L-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> p;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><p><font color=\"green\"><strong>清空</strong></font></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Status <span class=\"title\">ClearList</span><span class=\"params\">(LinkList &amp; L)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将L重置为空表 </span></span><br><span class=\"line\">   LinkList p,q;</span><br><span class=\"line\">   p=L-&gt;next;   <span class=\"comment\">//p指向第一个结点</span></span><br><span class=\"line\">   <span class=\"keyword\">while</span>(p)       <span class=\"comment\">//没到表尾 </span></span><br><span class=\"line\">      &#123;  q=p-&gt;next; <span class=\"keyword\">delete</span> p;     p=q;   &#125;</span><br><span class=\"line\">   L-&gt;next=<span class=\"literal\">NULL</span>;   <span class=\"comment\">//头结点指针域为空 </span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><p><font color=\"green\"><strong>求表长</strong></font></p>\n<img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011213225.png\" style=\"zoom:67%;\" /><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">ListLength_L</span><span class=\"params\">(LinkList L)</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//返回L中数据元素个数</span></span><br><span class=\"line\">    LinkList p;</span><br><span class=\"line\">    p=L-&gt;next;  <span class=\"comment\">//p指向第一个结点</span></span><br><span class=\"line\">     i=<span class=\"number\">0</span>;             </span><br><span class=\"line\">     <span class=\"keyword\">while</span>(p)&#123;<span class=\"comment\">//遍历单链表,统计结点数</span></span><br><span class=\"line\">           i++;</span><br><span class=\"line\">           p=p-&gt;next;    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;                             </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><p><font color=\"green\"><strong>判断表是否为空</strong></font></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ListEmpty</span><span class=\"params\">(LinkList L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//若L为空表，则返回1，否则返回0 </span></span><br><span class=\"line\">   <span class=\"keyword\">if</span>(L-&gt;next)   <span class=\"comment\">//非空 </span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><h3 id=\"取值（根据位置i获取相应位置数据元素的内容）\">取值（根据位置i获取相应位置数据元素的内容）<a href=\"#取值（根据位置i获取相应位置数据元素的内容）\" title=\"取值（根据位置i获取相应位置数据元素的内容）\"></a></h3><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011213303.png\" style=\"zoom:67%;\" /><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取线性表L中的某个数据元素的内容</span></span><br><span class=\"line\"><span class=\"function\">Status <span class=\"title\">GetElem_L</span><span class=\"params\">(LinkList L,<span class=\"keyword\">int</span> i,ElemType &amp;e)</span></span>&#123; </span><br><span class=\"line\">    p=L-&gt;next;j=<span class=\"number\">1</span>; <span class=\"comment\">//初始化</span></span><br><span class=\"line\">     <span class=\"keyword\">while</span>(p&amp;&amp;j&lt;i)&#123;\t<span class=\"comment\">//向后扫描，直到p指向第i个元素或p为空 </span></span><br><span class=\"line\">       p=p-&gt;next; ++j; </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">     <span class=\"keyword\">if</span>(!p || j&gt;i)<span class=\"keyword\">return</span> ERROR; <span class=\"comment\">//第i个元素不存在 </span></span><br><span class=\"line\">     e=p-&gt;data; <span class=\"comment\">//取第i个元素 </span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> OK; </span><br><span class=\"line\">&#125;<span class=\"comment\">//GetElem_L</span></span><br></pre></td></tr></table></figure><h3 id=\"查找（根据指定数据获取数据所在的位置）\">查找（根据指定数据获取数据所在的位置）<a href=\"#查找（根据指定数据获取数据所在的位置）\" title=\"查找（根据指定数据获取数据所在的位置）\"></a></h3><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011214735.png\" style=\"zoom:67%;\" /><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在线性表L中查找值为e的数据元素</span></span><br><span class=\"line\"><span class=\"function\">LNode *<span class=\"title\">LocateELem_L</span> <span class=\"params\">(LinkList L，Elemtype e)</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">//返回L中值为e的数据元素的地址，查找失败返回NULL</span></span><br><span class=\"line\">  p=L-&gt;next;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(p &amp;&amp;p-&gt;data!=e)  </span><br><span class=\"line\">        p=p-&gt;next;                \t\t</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p; \t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"插入（插在第-i-个结点之前）\">插入（插在第 i 个结点之前）<a href=\"#插入（插在第-i-个结点之前）\" title=\"插入（插在第 i 个结点之前）\"></a></h3><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011215102.png\" style=\"zoom:67%;\" /><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011215103.png\" style=\"zoom:67%;\" /><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在L中第i个元素之前插入数据元素e </span></span><br><span class=\"line\"><span class=\"function\">Status <span class=\"title\">ListInsert_L</span><span class=\"params\">(LinkList &amp;L,<span class=\"keyword\">int</span> i,ElemType e)</span></span>&#123; </span><br><span class=\"line\">     p=L;j=<span class=\"number\">0</span>; </span><br><span class=\"line\">      <span class=\"keyword\">while</span>(p&amp;&amp;j&lt;i−<span class=\"number\">1</span>)&#123;p=p-&gt;next;++j;&#125;\t<span class=\"comment\">//寻找第i−1个结点 </span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!p||j&gt;i−<span class=\"number\">1</span>)<span class=\"keyword\">return</span> ERROR;\t<span class=\"comment\">//i大于表长 + 1或者小于1  </span></span><br><span class=\"line\">      s=<span class=\"keyword\">new</span> LNode;\t\t\t<span class=\"comment\">//生成新结点s </span></span><br><span class=\"line\">      s-&gt;data=e;      \t\t           <span class=\"comment\">//将结点s的数据域置为e </span></span><br><span class=\"line\">      s-&gt;next=p-&gt;next;\t   \t          <span class=\"comment\">//将结点s插入L中 </span></span><br><span class=\"line\">      p-&gt;next=s; </span><br><span class=\"line\">      <span class=\"keyword\">return</span> OK; </span><br><span class=\"line\">&#125;<span class=\"comment\">//ListInsert_L</span></span><br></pre></td></tr></table></figure><h3 id=\"删除（删除第-i-个结点）\">删除（删除第 i 个结点）<a href=\"#删除（删除第-i-个结点）\" title=\"删除（删除第 i 个结点）\"></a></h3><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011215249.png\" style=\"zoom: 67%;\" /><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将线性表L中第i个数据元素删除</span></span><br><span class=\"line\"> <span class=\"function\">Status <span class=\"title\">ListDelete_L</span><span class=\"params\">(LinkList &amp;L,<span class=\"keyword\">int</span> i,ElemType &amp;e)</span></span>&#123;</span><br><span class=\"line\">    p=L;j=<span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p-&gt;next &amp;&amp;j&lt;i<span class=\"number\">-1</span>)&#123;                  <span class=\"comment\">//寻找第i个结点，并令p指向其前驱 </span></span><br><span class=\"line\">        p=p-&gt;next; ++j; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!(p-&gt;next)||j&gt;i<span class=\"number\">-1</span>) <span class=\"keyword\">return</span> ERROR; <span class=\"comment\">//删除位置不合理 </span></span><br><span class=\"line\">    q=p-&gt;next;                                        <span class=\"comment\">//临时保存被删结点的地址以备释放 </span></span><br><span class=\"line\">    p-&gt;next=q-&gt;next; \t                  <span class=\"comment\">//改变删除结点前驱结点的指针域 </span></span><br><span class=\"line\">    e=q-&gt;data; \t                                <span class=\"comment\">//保存删除结点的数据域 </span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> q; \t                                <span class=\"comment\">//释放删除结点的空间 </span></span><br><span class=\"line\"> <span class=\"keyword\">return</span> OK; </span><br><span class=\"line\">&#125;<span class=\"comment\">//ListDelete_L</span></span><br></pre></td></tr></table></figure><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011215457.png\" style=\"zoom:67%;\" /><h2 id=\"单链表的建立（前插法）\">单链表的建立（前插法）<a href=\"#单链表的建立（前插法）\" title=\"单链表的建立（前插法）\"></a></h2><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011215605.png\" style=\"zoom:67%;\" /><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">CreateList_F</span><span class=\"params\">(LinkList &amp;L,<span class=\"keyword\">int</span> n)</span></span>&#123; </span><br><span class=\"line\">     L=<span class=\"keyword\">new</span> LNode; </span><br><span class=\"line\">      L-&gt;next=<span class=\"literal\">NULL</span>; <span class=\"comment\">//先建立一个带头结点的单链表 </span></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(i=n;i&gt;<span class=\"number\">0</span>;--i)&#123; </span><br><span class=\"line\">        p=<span class=\"keyword\">new</span> LNode; <span class=\"comment\">//生成新结点 </span></span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;p-&gt;data; <span class=\"comment\">//输入元素值 </span></span><br><span class=\"line\">        p-&gt;next=L-&gt;next;L-&gt;next=p; \t<span class=\"comment\">//插入到表头 </span></span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">&#125;<span class=\"comment\">//CreateList_F</span></span><br></pre></td></tr></table></figure><h2 id=\"单链表的建立（尾插法）\">单链表的建立（尾插法）<a href=\"#单链表的建立（尾插法）\" title=\"单链表的建立（尾插法）\"></a></h2><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011215759.png\" style=\"zoom:67%;\" /><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">CreateList_L</span><span class=\"params\">(LinkList &amp;L,<span class=\"keyword\">int</span> n)</span></span>&#123; </span><br><span class=\"line\">      <span class=\"comment\">//正位序输入n个元素的值，建立带表头结点的单链表L </span></span><br><span class=\"line\">      L=<span class=\"keyword\">new</span> LNode; </span><br><span class=\"line\">      L-&gt;next=<span class=\"literal\">NULL</span>; \t</span><br><span class=\"line\">      r=L; \t                                <span class=\"comment\">//尾指针r指向头结点 </span></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;++i)&#123; </span><br><span class=\"line\">        p=<span class=\"keyword\">new</span> LNode;\t　\t       <span class=\"comment\">//生成新结点 </span></span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;p-&gt;data;   \t\t       <span class=\"comment\">//输入元素值 </span></span><br><span class=\"line\">        p-&gt;next=<span class=\"literal\">NULL</span>; r-&gt;next=p;       <span class=\"comment\">//插入到表尾 </span></span><br><span class=\"line\">        r=p; \t                                  <span class=\"comment\">//r指向新的尾结点 </span></span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">&#125;<span class=\"comment\">//CreateList_L</span></span><br></pre></td></tr></table></figure><h1 id=\"顺序表和链表的比较\">顺序表和链表的比较<a href=\"#顺序表和链表的比较\" title=\"顺序表和链表的比较\"></a></h1><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201011220049.png\" style=\"zoom:67%;\" />","prev":{"title":"结构体变量和结构体类型的定义","link":"posts/4d0d4efc"},"next":{"title":"HTML5","link":"posts/98f3a6d9"},"plink":"https://dxsummer.gitee.io/posts/40f24371/","toc":[{"id":"线性表的定义和特点","title":"线性表的定义和特点","index":"1","children":[{"id":"什么是线性表","title":"什么是线性表","index":"1.1"},{"id":"顺序存储结构和链式存储结构","title":"顺序存储结构和链式存储结构","index":"1.2"},{"id":"线性表常用术语","title":"线性表常用术语","index":"1.3"}]},{"id":"顺序表示和实现","title":"顺序表示和实现","index":"2","children":[{"id":"顺序存储表示","title":"顺序存储表示","index":"2.1"},{"id":"基本操作的实现","title":"基本操作的实现","index":"2.2","children":[{"id":"类型定义","title":"类型定义","index":"2.2.1"},{"id":"初始化","title":"初始化","index":"2.2.2"},{"id":"取值随机存取-o1","title":"取值(随机存取) O(1)","index":"2.2.3"},{"id":"查找-on","title":"查找 O(n)","index":"2.2.4"},{"id":"插入-on","title":"插入 O(n)","index":"2.2.5"},{"id":"删除","title":"删除","index":"2.2.6"}]}]},{"id":"链式表示和实现","title":"链式表示和实现","index":"3","children":[{"id":"单链表的定义和实现","title":"单链表的定义和实现","index":"3.1"},{"id":"基本操作","title":"基本操作","index":"3.2","children":[{"id":"初始化构造一个空表-","title":"初始化(构造一个空表 )","index":"3.2.1"},{"id":"取值（根据位置i获取相应位置数据元素的内容）","title":"取值（根据位置i获取相应位置数据元素的内容）","index":"3.2.2"},{"id":"查找（根据指定数据获取数据所在的位置）","title":"查找（根据指定数据获取数据所在的位置）","index":"3.2.3"},{"id":"插入（插在第-i-个结点之前）","title":"插入（插在第 i 个结点之前）","index":"3.2.4"},{"id":"删除（删除第-i-个结点）","title":"删除（删除第 i 个结点）","index":"3.2.5"}]},{"id":"单链表的建立（前插法）","title":"单链表的建立（前插法）","index":"3.3"},{"id":"单链表的建立（尾插法）","title":"单链表的建立（尾插法）","index":"3.4"}]},{"id":"顺序表和链表的比较","title":"顺序表和链表的比较","index":"4"}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/40f24371/\" title=\"线性表\">https://dxsummer.gitee.io/posts/40f24371/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2020年10月1日","updated":"2020年10月11日"}}