{"title":"Step4 C控制语句：循环","date":"2020-06-03T04:33:48.000Z","date_formatted":{"ll":"2020年6月3日","L":"2020/06/03","MM-DD":"06-03"},"link":"posts/287f677b","comments":true,"tags":["C语言基础"],"categories":["C语言"],"updated":"2020-06-08T01:44:33.693Z","content":"<h2 id=\"c控制语句：循环\">C控制语句：循环<a href=\"#c控制语句：循环\" title=\"C控制语句：循环\"></a></h2><p>本章介绍以下内容：</p>\n<p>关键字：<code>for</code>、<code>while</code>、<code>do while</code></p>\n<p>运算符：<code>&lt;</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>!=</code>、<code>==</code>、<code>+=</code>、<code>*=</code>、<code>-=</code>、<code>/=</code>、<code>%=</code></p>\n<p>函数：<code>fabs()</code></p>\n<p>C语言有3种循环：<code>for</code>、<code>while</code>、<code>do while</code></p>\n<p>使用关系运算符构建控制循环的表达式</p>\n<p>其他运算符</p>\n<p>循环常用的数组</p>\n<p>编写有返回值的函数</p>\n<p>大多数人都希望自己是体格强健、天资聪颖、多才多艺的能人。虽然有时事与愿违，但至少我们用 C能写出这样的程序。诀窍是控制程序流。对于计算机科学（是研究计算机，不是用计算机做研究）而言，一门语言应该提供以下3种形式的程序流：</p>\n<p>执行语句序列；</p>\n<p>如果满足某些条件就重复执行语句序列（循环通过测试选择执行哪一个语句序列（分支）。</p>\n<p>读者对第一种形式应该很熟悉，前面学过的程序中大部分都是由语句序列组成。<code>while</code>循环属于第二种形式。本章将详细讲解<code>while</code>循环和其他两种循环：<code>for</code>和<code>do while</code>。第三种形式用于在不同的执行方案之间进行选择，让程序更“智能”，且极大地提高了计算机的用途。不过，要等到下一章才介绍这部分的内容。本章还将介绍数组，可以把新学的知识应用在数组上。另外，本章还将继续介绍函数的相关内容。首先，我们从<code>while</code>循环开始学习。</p>\n<h2 id=\"再探while循环\">再探while循环<a href=\"#再探while循环\" title=\"再探while循环\"></a></h2><p>经过上一章的学习，读者已经熟悉了 <code>while</code> 循环。这里，我们用一个程序来回顾一下，程序清单 6.1根据用户从键盘输入的整数进行求和。程序利用了<code>scanf()</code>的返回值来结束循环。</p>\n<p>程序清单6.1 summing.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* summing.c -- 根据用户键入的整数求和 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> num;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> sum=<span class=\"number\">0L</span>;　　　　 <span class=\"comment\">/* 把sum初始化为0　*/</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> status;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please　enter　an　integer　to　be　summed　\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"(q　to　quit):　\"</span>);</span><br><span class=\"line\">    status=<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,&amp;num);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (status == <span class=\"number\">1</span>)　　<span class=\"comment\">/* == 的意思是“等于”　*/</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum=sum+num;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please　enter　next　integer　(q　to　quit):　\"</span>);</span><br><span class=\"line\">        status=<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,&amp;num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Those　integers　sum　to　%ld.\\n\"</span>,　sum);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序使用<code>long</code>类型以储存更大的整数。尽管C编译器会把0自动转换为合适的类型，但是为了保持程序的一致性，我们把<code>sum</code>初始化为<code>0L</code>（<code>long</code>类型的0），而不是<code>0</code>（<code>int</code>类型的0）。</p>\n<p>该程序的运行示例如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Please　enter　an　integer　to　be　<span class=\"title\">summed</span>　<span class=\"params\">(q　to　quit)</span>:　44</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:　33</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:　88</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:　121</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:　q</span></span><br><span class=\"line\">Those　integers　sum　to　286.</span><br></pre></td></tr></table></figure><h3 id=\"程序注释\">程序注释<a href=\"#程序注释\" title=\"程序注释\"></a></h3><p>先看<code>while</code>循环，该循环的测试条件是如下表达式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">status==<span class=\"number\">1</span></span><br></pre></td></tr></table></figure><p><code>==</code>运算符是C的相等运算符（equality operator），该表达式判断<code>status</code>是否等于1。不要把<code>status== 1</code>与<code>status = 1</code>混淆，后者是把1赋给status。根据测试条件<code>status == 1</code>，只要status等于1，循环就会重复。每次循环，num的当前值都被加到sum上，这样sum的值始终是当前整数之和。当status的值不为1时，循环结束。然后程序打印sum的最终值。</p>\n<p>要让程序正常运行，每次循环都要获取<code>num</code>的一个新值，并重置<code>status</code>。程序利用<code>scanf()</code>的两个不同的特性来完成。首先，使用<code>scanf()</code>读取<code>num</code>的一个新值；然后，检查<code>scanf()</code>的返回值判断是否成功获取值。第4章中介绍过，<mark><code>scanf()</code>返回成功读取项的数量</mark>。如果<code>scanf()</code>成功读取一个整数，就把该数存入<code>num</code>并返回1，随后返回值将被赋给<code>status</code>（注意，用户输入的值储存在num中，不是status中）。这样做同时更新了num和status的值，<code>while</code>循环进入下一次迭代。如果用户输入的不是数字（如， q），<code>scanf()</code>会读取失败并返回0。此时，<code>status</code>的值就是0，循环结束。因为输入的字符q不是数字，所以它会被放回输入队列中（实际上，不仅仅是 q，任何非数值的数据都会导致循环终止，但是提示用户输入q退出程序比提示用户输入一个非数字字符要简单）。</p>\n<p>如果 <code>scanf()</code>在转换值之前出了问题（例如，检测到文件结尾或遇到硬件问题），会返回一个特殊值<code>EOF</code>（其值通常被定义为<code>-1</code>）。这个值也会引起循环终止。</p>\n<p>如何告诉循环何时停止？该程序利用 <code>scanf()</code>的双重特性避免了在循环中交互输入时的这个棘手的问题。例如，假设<code>scanf()</code>没有返回值，那么每次循环只会改变<code>num</code>的值。虽然可以使用<code>num</code>的值来结束循环，比如把<code>num &gt; 0</code>（num大于0）或<code>num ！= 0</code>（num不等于0）作为测试条件，但是这样用户就不能输入某些值，如-3或0。也可以在循环中添加代码，例如每次循环时询问用户“是否继续循环？&lt;y/n&gt;”，然后判断用户是否输入y。这个方法有些笨拙，而且还减慢了输入的速度。使用<code>scanf()</code>的返回值，轻松地避免了这些问题。</p>\n<p>现在，我们来看看该程序的结构。总结如下：</p>\n<ul><li><p>把sum初始化为0</p>\n</li>\n<li><p>提示用户输入数据</p>\n</li>\n<li><p>读取用户输入的数据</p>\n</li>\n<li><p>当输入的数据为整数时，</p>\n</li>\n<li><p>输入添加给sum，</p>\n</li>\n<li><p>提示用户进行输入，</p>\n</li>\n<li><p>然后读取下一个输入</p>\n</li>\n<li><p>输入完成后，打印sum的值</p>\n</li>\n</ul><p>顺带一提，这叫作<strong>伪代码</strong>（pseudocode），是一种用简单的句子表示程序思路的方法，它与计算机语言的形式相对应。伪代码有助于设计程序的逻辑。确定程序的逻辑无误之后，再把伪代码翻译成实际的编程代码。使用伪代码的好处之一是，可以把注意力集中在程序的组织和逻辑上，不用在设计程序时还要分心如何用编程语言来表达自己的想法。例如，可以用缩进来代表一块代码，不用考虑C的语法要用花括号把这部分代码括起来。</p>\n<p>总之，因为<code>while</code>循环是入口条件循环，程序在进入循环体之前必须获取输入的数据并检查<code>status</code>的值，所以在 <code>while</code> 前面要有一个 <code>scanf()</code>。要让循环继续执行，在循环内需要一个读取数据的语句，这样程序才能获取下一个<code>status</code>的值，所以在<code>while</code>循环末尾还要有一个<code>scanf()</code>，它为下一次迭代做好了准备。可以把下面的伪代码作为<code>while</code>循环的标准格式：</p>\n<ul><li>获得第1个用于测试的值</li>\n<li>当测试为真时</li>\n<li>处理值</li>\n<li>获取下一个值</li>\n</ul><h3 id=\"c风格读取循环\">C风格读取循环<a href=\"#c风格读取循环\" title=\"C风格读取循环\"></a></h3><p>根据伪代码的设计思路，程序清单6.1可以用Pascal、BASIC或FORTRAN来编写。但是C更为简洁，下面的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">status=<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,　&amp;num);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(status　==　<span class=\"number\">1</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">/* 循环行为 */</span></span><br><span class=\"line\">status　=　<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,　&amp;num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">可以用这些代码替换：</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,&amp;num)==<span class=\"number\">1</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">/*循环行为*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>第二种形式同时使用<code>scanf()</code>的两种不同的特性。首先，如果函数调用成功，<code>scanf()</code>会把一个值存入<code>num</code>。然后，利用<code>scanf()</code>的返回值（0或1，不是num的值）控制<code>while</code>循环。因为每次迭代都会判断循环的条件，所以每次迭代都要调用<code>scanf()</code>读取新的<code>num</code>值来做判断。换句话说，C的语法特性让你可以用下面的精简版本替换标准版本：</p>\n<ul><li>当获取值和判断值都成功</li>\n<li>处理该值</li>\n</ul><p>接下来，我们正式地学习<code>while</code>语句。</p>\n<h2 id=\"while语句\">while语句<a href=\"#while语句\" title=\"while语句\"></a></h2><p>while循环的通用形式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(expression)</span><br><span class=\"line\">statement</span><br></pre></td></tr></table></figure><p><code>statement</code>部分可以是以分号结尾的<strong>简单语句</strong>，也可以是用花括号括起来的<strong>复合语句</strong>。</p>\n<p>到目前为止，程序示例中的<code>expression</code>部分都使用<strong>关系表达式</strong>。也就是说，<code>expression</code>是值之间的比较，可以使用任何表达式。如果<code>expression</code>为<strong>真</strong>（或者更一般地说，<strong>非零</strong>），执行 <code>statement</code>部分一次，然后再次判断<code>expression</code>。在<code>expression</code>为假（0）之前，循环的判断和执行一直重复进行。每次循环都被称为一次迭代（iteration），如图6.1所示。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/while循环的结构.png\" class=\"φcy\"></p>\n<h3 id=\"终止while循环\">终止while循环<a href=\"#终止while循环\" title=\"终止while循环\"></a></h3><p>while循环有一点非常重要：在构建while循环时，必须让测试表达式的值有变化，表达式最终要为假。否则，循环就不会终止（实际上，可以使用break和if语句来终止循环，但是你尚未学到）。考虑下面的例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(index&lt;<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Good　morning!\\n\"</span>);</span><br></pre></td></tr></table></figure><p>上面的程序段将打印无数次<code>Good　morning!</code>。为什么？因为循环中<code>index</code>的值一直都是原来的值1，不曾变过。</p>\n<p>现在，考虑下面的程序段：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(--index&lt;<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Good　morning!\\n\"</span>);</span><br></pre></td></tr></table></figure><p>这段程序也好不到哪里去。虽然改变了<code>index</code>的值，但是改错了！不过，这个版本至少在<code>index</code>减少到其类型到可容纳的最小负值并变成最大正值时会终止循环（第3章3.4.2节中的toobig.c程序解释过，最大正值加1一般会得到一个负值；类似地，最小负值减1一般会得到最大正值）。</p>\n<h3 id=\"何时终止循环\">何时终止循环<a href=\"#何时终止循环\" title=\"何时终止循环\"></a></h3><p>要明确一点：只有在对测试条件求值时，才决定是终止还是继续循环。例如，考虑程序清单6.2中的程序。</p>\n<p>程序清单6.2 when.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// when.c -- 何时退出循环</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=<span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n&lt;<span class=\"number\">7</span>)　　　　　　　　　　　<span class=\"comment\">// 第7行</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"n=%d\\n\"</span>,n);</span><br><span class=\"line\">        n++;　　　　　　　　　　　　　 <span class=\"comment\">// 第10行</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Now n=%d\\n\"</span>, n); <span class=\"comment\">// 第11行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"The　loop　has　finished.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>运行程序清单6.2，输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">5</span></span><br><span class=\"line\">Now n = <span class=\"number\">6</span></span><br><span class=\"line\">n = <span class=\"number\">6</span></span><br><span class=\"line\">Now n = <span class=\"number\">7</span></span><br><span class=\"line\">The loop has finished.</span><br></pre></td></tr></table></figure><p>在第2次循环时，变量n在第10行首次获得值7。但是，此时程序并未退出，它结束本次循环（第11行），并在对第7行的测试条件求值时才退出循环（变量n在第1次判断时为5，第2次判断时为6）。</p>\n<h3 id=\"while：入口条件循环\">while：入口条件循环<a href=\"#while：入口条件循环\" title=\"while：入口条件循环\"></a></h3><p><code>while</code>循环是使用入口条件的有条件循环。所谓“有条件”指的是语句部分的执行取决于测试表达式描述的条件，如(<code>index &lt; 5</code>)。该表达式是一个入口条件（entry condition），因为必须满足条件才能进入循环体。在下面的情况中，就不会进入循环体，因为条件一开始就为假：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(index++&lt;<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Have　a　fair　day　or　better.\\n\"</span>);</span><br></pre></td></tr></table></figure><p>把第1行改为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure><p>就可以运行这个循环了。</p>\n<h3 id=\"语法要点\">语法要点<a href=\"#语法要点\" title=\"语法要点\"></a></h3><p>使用<code>while</code>时，要牢记一点：只有在测试条件后面的单独语句（简单语句或复合语句）才是循环部分。程序清单6.3演示了忽略这点的后果。缩进是为了让读者阅读方便，不是计算机的要求。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">6.3</span> while1.c程序</span><br><span class=\"line\"><span class=\"comment\">/* while1.c -- 注意花括号的使用 */</span></span><br><span class=\"line\"><span class=\"comment\">/* 糟糕的代码创建了一个无限循环 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&lt;<span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"n　is　%d\\n\"</span>,　n);</span><br><span class=\"line\">    n++;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"That's　all　this　program　does\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n　is　<span class=\"number\">0</span></span><br><span class=\"line\">n　is　<span class=\"number\">0</span></span><br><span class=\"line\">n　is　<span class=\"number\">0</span></span><br><span class=\"line\">n　is　<span class=\"number\">0</span></span><br><span class=\"line\">n　is　<span class=\"number\">0</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><p>屏幕上会一直输出以上内容，除非强行关闭这个程序。</p>\n<p>虽然程序中缩进了<code>n++;</code>这条语句，但是并未把它和上一条语句括在花括号内。因此，只有直接跟在测试条件后面的一条语句是循环的一部分。变量n的值不会改变，条件<code>n&lt;3</code>一直为真。该循环会一直打印<code>n is 0</code>，除非强行关闭程序。这是一个无限循环（infinite loop）的例子，没有外部干涉就不会退出。</p>\n<p>记住，即使<code>while</code>语句本身使用复合语句，在语句构成上，它也是一条单独的语句。该语句从<code>while</code>开始执行，到第1个分号结束。在使用了复合语句的情况下，到右花括号结束。</p>\n<p>要注意放置分号的位置。例如，考虑程序清单6.4。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">6.4</span> while2.c程序</span><br><span class=\"line\"><span class=\"comment\">/* while2.c -- 注意分号的位置 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n++&lt;<span class=\"number\">3</span>);　　　　　 <span class=\"comment\">/* 第7行 */</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"n is %d\\n\"</span>, n); <span class=\"comment\">/* 第8行 */</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"That's　all　this　program　does.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n is <span class=\"number\">4</span></span><br><span class=\"line\">That<span class=\"number\">'</span>s all <span class=\"keyword\">this</span> program does.</span><br></pre></td></tr></table></figure><p>如前所述，循环在执行完测试条件后面的第 1 条语句（简单语句或复合语句）后进入下一轮迭代，直到测试条件为假才会结束。该程序中第7行的测试条件后面直接跟着一个分号，循环在此进入下一轮迭代，因为单独一个分号被视为一条语句。虽然n的值在每次循环时都递增1，但是第8行的语句不是循环的一部分，<strong>因此只会打印一次循环结束后的n值</strong>。</p>\n<p>在该例中，测试条件后面的单独分号是<strong>空语句</strong>（null statement），它什么也不做。在C语言中，单独的分号表示空语句。有时，程序员会故意使用带空语句的<code>while</code>语句，因为所有的任务都在测试条件中完成了，不需要在循环体中做什么。例如，假设你想跳过输入到第1个非空白字符或数字，可以这样写：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;num)==<span class=\"number\">1</span>)</span><br><span class=\"line\">; <span class=\"comment\">/* 跳过整数输入 */</span></span><br></pre></td></tr></table></figure><p>只要<code>scanf()</code>读取一个整数，就会返回<code>1</code>，循环继续执行。注意，为了提高代码的可读性，应该让这个分号独占一行，不要直接把它放在测试表达式同行。这样做一方面让读者更容易看到空语句，一方面也提醒自己和读者空语句是有意而为之。处理这种情况更好的方法是使用下一章介绍的<code>continue</code>语句。</p>\n<h2 id=\"用关系运算符和表达式比较大小\">用关系运算符和表达式比较大小<a href=\"#用关系运算符和表达式比较大小\" title=\"用关系运算符和表达式比较大小\"></a></h2><p><code>while</code>循环经常依赖测试表达式作比较，这样的表达式被称为<strong>关系表达式</strong>（relational expression），出现在关系表达式中间的运算符叫做<strong>关系运算符</strong>（relational operator）。前面的示例中已经用过一些关系运算符，表 6.1 列出了 C 语言的所有关系运算符。该表也涵盖了所有的数值关系（数字之间的关系再复杂也没有人与人之间的关系复杂）。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/关系运算符.png\" class=\"φcy\"></p>\n<p>关系运算符常用于构造while语句和其他C语句（稍后讨论）中用到的关系表达式。这些语句都会检查关系表达式为真还是为假。下面有3个互不相关的while语句，其中都包含关系表达式。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(number&lt;<span class=\"number\">6</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Your　number　is　too　small.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,　&amp;number);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(ch!=<span class=\"string\">'$'</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%c\"</span>,　&amp;ch);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>,&amp;num)==<span class=\"number\">1</span>)</span><br><span class=\"line\">sum=sum+num;</span><br></pre></td></tr></table></figure><p>注意，第2个<code>while</code>语句的关系表达式还可用于比较字符。比较时使用的是机器字符码（假定为ASCII）。但是，不能用关系运算符比较字符串。第11章将介绍如何比较字符串。</p>\n<p>虽然关系运算符也可用来比较浮点数，但是要注意：比较浮点数时，尽量只使用&lt;和&gt;。因为浮点数的舍入误差会导致在逻辑上应该相等的两数却不相等。例如，3乘以1/3的积是1.0。如果用把1/3表示成小数点后面6位数字，乘积则是.999999，不等于1。使用<code>fabs()</code>函数（声明在<code>math.h</code>头文件中）可以方便地比较浮点数，该函数返回一个浮点值的绝对值（即，没有代数符号的值）。</p>\n<p>例如，可以用类似程序清单6.5的方法来判断一个数是否接近预期结果。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">6.5</span> cmpflt.c程序</span><br><span class=\"line\"><span class=\"comment\">// cmpflt.c -- 浮点数比较</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span>　<span class=\"keyword\">double</span>　ANSWER　=　<span class=\"number\">3.14159</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span>　response;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"What　is　the　value　of　pi?\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;response);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">fabs</span>(response-ANSWER)&gt;<span class=\"number\">0.0001</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Try　again!\\n\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Close　enough!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>循环会一直提示用户继续输入，除非用户输入的值与正确值之间相差0.0001：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">What　is　the　value　of　pi?</span><br><span class=\"line\"><span class=\"number\">3.14</span></span><br><span class=\"line\">Try　again!</span><br><span class=\"line\"><span class=\"number\">3.1416</span></span><br><span class=\"line\">Close enough!</span><br></pre></td></tr></table></figure><h3 id=\"什么是真\">什么是真<a href=\"#什么是真\" title=\"什么是真\"></a></h3><p>这是一个古老的问题，但是对C而言还不算难。在C中，表达式一定有一个值，关系表达式也不例外。程序清单6.6中的程序用于打印两个关系表达式的值，一个为真，一个为假。</p>\n<p>程序清单6.6 t_and_f.c程序</p>\n<p>/* t_and_f.c – C中的真和假的值 */</p>\n<p>#include　&lt;stdio.h&gt;</p>\n<p>int　main(void)</p>\n<p>{</p>\n<p>int　true_val,　false_val;</p>\n<p>true_val = (10 &gt; 2);　　　　// 关系为真的值</p>\n<p>false_val = (10 == 2); // 关系为假的值</p>\n<p>printf(“true　=　%d;　false　=　%d　\\n”,　true_val,　false_val);</p>\n<p>return　0;</p>\n<p>}</p>\n<p>程序清单6.6把两个关系表达式的值分别赋给两个变量，即把表达式为真的值赋给true_val，表达式为假的值赋给false_val。运行该程序后输出如下：</p>\n<p>true = 1; false = 0</p>\n<p>原来如此！对C而言，表达式为真的值是1，表达式为假的值是0。一些C程序使用下面的循环结构，由于1为真，所以循环会一直进行。</p>\n<p>while　(1)</p>\n<p>{</p>\n<p>…</p>\n<p>}</p>\n<h3 id=\"其他真值\">其他真值<a href=\"#其他真值\" title=\"其他真值\"></a></h3><p>既然1或0可以作为<code>while</code>语句的测试表达式，是否还可以使用其他数字？如果可以，会发生什么？我们用程序清单6.7来做个实验。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">6.7</span> truth.c程序</span><br><span class=\"line\"><span class=\"comment\">// truth.c -- 哪些值为真</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%2d　is　true\\n\"</span>,　n--);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%2d　is　false\\n\"</span>,　n);</span><br><span class=\"line\">    n=<span class=\"number\">-3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%2d　is　true\\n\"</span>,　n++);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%2d　is　false\\n\"</span>,　n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span>　is　<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">2</span>　is　<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">1</span>　is　<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">0</span>　is　<span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"number\">-3</span>　is　<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">-2</span>　is　<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">-1</span>　is　<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">0</span>　is　<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure><p>执行第1个循环时，n分别是3、2、1，当n等于0时，第1个循环结束。与此类似，执行第2个循环时，n分别是-3、-2和-1，当n等于0时，第2个循环结束。一般而言，所有的非零值都视为真，只有0被视为假。在C中，真的概念还真宽！</p>\n<p>也可以说，<strong>只要测试条件的值为非零，就会执行 <code>while</code> 循环</strong>。这是从数值方面而不是从真/假方面来看测试条件。要牢记：<strong>关系表达式为真，求值得1；关系表达式为假，求值得0</strong>。因此，这些表达式实际上相当于数值。</p>\n<p>许多C程序员都会很好地利用测试条件的这一特性。例如，用<code>while (goats)</code>替换<code>while (goats !=0)</code>，因为表达式<code>goats != 0</code>和<code>goats</code>都只有在<code>goats</code>的值为0时才为0或假。第1种形式（<code>while (goats != 0)</code>）对初学者而言可能比较清楚，但是第2种形式（<code>while (goats)</code>）才是C程序员最常用的。要想成为一名C程序员，应该多熟悉<code>while (goats)</code>这种形式。</p>\n<h3 id=\"真值的问题\">真值的问题<a href=\"#真值的问题\" title=\"真值的问题\"></a></h3><p>C对真的概念约束太少会带来一些麻烦。例如，我们稍微修改一下程序清单6.1，修改后的程序如程序清单6.8所示。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">6.8</span> trouble.c程序</span><br><span class=\"line\"><span class=\"comment\">// trouble.c -- 误用=会导致无限循环</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> num;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> sum=<span class=\"number\">0L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> status;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please　enter　an　integer　to　be　summed　\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"(q　to　quit):　\"</span>);</span><br><span class=\"line\">    status=<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,&amp;num);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(status=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum=sum+num;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please　enter　next　integer　(q　to　quit):　\"</span>);</span><br><span class=\"line\">        status　=　<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,　&amp;num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Those　integers　sum　to　%ld.\\n\"</span>,　sum);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>运行该程序，其输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Please　enter　an　integer　to　be　<span class=\"title\">summed</span>　<span class=\"params\">(q　to　quit)</span>:　20</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:　5</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:　30</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:　q</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:</span></span><br></pre></td></tr></table></figure><p>（„„屏幕上会一直显示最后的提示内容，除非强行关闭程序。也许你根本不想运行这个示例。）</p>\n<p>这个麻烦的程序示例改动了<code>while</code>循环的测试条件，把<code>status == 1</code>替换成<code>status = 1</code>。后者是一个赋值表达式语句，所以 status 的值为 1。而且，整个赋值表达式的值就是赋值运算符左侧的值，所以<code>status = 1</code>的值也是1。这里，<code>while (status = 1)</code>实际上相当于<code>while (1)</code>，也就是说，循环不会退出。虽然用户输入q，status被设置为0，但是循环的测试条件把status又重置为1，进入了下一次迭代。</p>\n<p>读者可能不太理解，程序的循环一直运行着，用户在输入q后完全没机会继续输入。如果<code>scanf()</code>读取指定形式的输入失败，就把无法读取的输入留在输入队列中，供下次读取。当<code>scanf()</code>把q作为整数读取时失败了，它把 q 留下。在下次循环时，<code>scanf()</code>从上次读取失败的地方（q）开始读取，<code>scanf()</code>把q作为整数读取，又失败了。因此，这样修改后不仅创建了一个无限循环，还创建了一个无限失败的循环，真让人沮丧。好在计算机觉察不出来。对计算机而言，无限地执行这些愚蠢的指令比成功预测未来10年的股市行情没什么两样。</p>\n<p>不要在本应使用<code>==</code>的地方使用<code>=</code>。一些计算机语言（如，<code>BASIC</code>）用相同的符号表示赋值运算符和关系相等运算符，但是这两个运算符完全不同（见图 6.2）。赋值运算符把一个值赋给它左侧的变量；而关系相等运算符检查它左侧和右侧的值是否相等，不会改变左侧变量的值（如果左侧是一个变量）。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/关系运算符==和赋值运算符=.png\" class=\"φcy\"></p>\n<p>示例如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canoes=<span class=\"number\">5</span>\t\t←把<span class=\"number\">5</span>赋给canoes</span><br><span class=\"line\">canoes==<span class=\"number\">5</span>\t\t←检查canoes的值是否为<span class=\"number\">5</span></span><br></pre></td></tr></table></figure><p>要注意使用正确的运算符。编译器不会检查出你使用了错误的形式，得出也不是预期的结果（误用=的人实在太多了，以至于现在大多数编译器都会给出警告，提醒用户是否要这样做）。如果待比较的一个值是常量，可以把该常量放在左侧有助于编译器捕获错误：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span>=canoes\t←语法错误</span><br><span class=\"line\"><span class=\"number\">5</span>==canoes\t←检查canoes的值是否为<span class=\"number\">5</span></span><br></pre></td></tr></table></figure><p>可以这样做是因为C语言不允许给常量赋值，编译器会把赋值运算符的这种用法作为语法错误标记出来。许多经验丰富的程序员在构建比较是否相等的表达式时，都习惯把常量放在左侧。</p>\n<p>总之，关系运算符用于构成关系表达式。关系表达式为真时值为1，为假时值为0。通常用关系表达式作为测试条件的语句（如<code>while</code>和<code>if</code>）可以使用任何表达式作为测试条件，非零为真，零为假。</p>\n<h3 id=\"新的_bool类型\">新的_Bool类型<a href=\"#新的_bool类型\" title=\"新的_Bool类型\"></a></h3><p>在C语言中，一直用<code>int</code>类型的变量表示真/假值。C99专门针对这种类型的变量新增了<code>_Bool</code>类型。该类型是以英国数学家George Boole的名字命名的，他开发了用代数表示逻辑和解决逻辑问题。在编程中，表示真或假的变量被称为布尔变量（Boolean variable），所以_Bool是C语言中布尔变量的类型名。_<code>Bool</code>类型的变量<strong>只能储存1（真）或0（假）</strong>。如果把其他非零数值赋给_Bool类型的变量，该变量会被设置为1。这反映了C把所有的<strong>非零值都视为真</strong>。</p>\n<p>程序清单6.9修改了程序清单6.8中的测试条件，把<code>int</code>类型的变量<code>status</code>替换为<code>_Bool</code>类型的变量<code>input_is_good</code>。给布尔变量取一个能表示真或假值的变量名是一种常见的做法。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">6.9</span> <span class=\"keyword\">boolean</span>.c程序</span><br><span class=\"line\"><span class=\"comment\">// boolean.c -- 使用_Bool类型的变量 variable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> num;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> sum=<span class=\"number\">0L</span>;</span><br><span class=\"line\">    <span class=\"built_in\">_Bool</span> input_is_good;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please　enter　an　integer　to　be　summed　\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"(q　to　quit):　\"</span>);</span><br><span class=\"line\">    input_is_good=(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,&amp;num)==<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(input_is_good)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum=sum+num;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please　enter　next　integer　(q　to　quit):　\"</span>);</span><br><span class=\"line\">        input_is_good=(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,&amp;num)==<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Those　integers　sum　to　%ld.\\n\"</span>,　sum);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>注意程序中把比较的结果赋值给_Bool类型的变量<code>input_is_good</code>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input_is_good=(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>, &amp;num) == <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure><p>这样做没问题，因为<code>==</code>运算符返回的值不是1就是0。顺带一提，从优先级方面考虑的话，并不需要用圆括号把<code>scanf(&quot;%ld&quot;,&amp;num)==1</code>括起来。但是，这样做可以提高代码可读性。还要注意，如何为变量命名才能让<code>while</code>循环的测试简单易懂：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (input_is_good)</span><br></pre></td></tr></table></figure><p>C99提供了<code>stdbool.h</code>头文件，该头文件让<code>bool</code>成为<code>_Bool</code>的别名，而且还把<code>true</code>和<code>false</code>分别定义为1和0的符号常量。包含该头文件后，写出的代码可以与<code>C++</code>兼容，因为<code>C++</code>把<code>bool</code>、<code>true</code>和<code>false</code>定义为关键字。</p>\n<p>如果系统不支持<code>_Bool</code>类型，导致无法运行该程序，可以把<code>_Bool</code>替换成<code>int</code>即可。</p>\n<h3 id=\"优先级和关系运算符\">优先级和关系运算符<a href=\"#优先级和关系运算符\" title=\"优先级和关系运算符\"></a></h3><p><strong><mark>关系运算符的优先级比算术运算符低</mark></strong>（包括<code>+</code>和<code>-</code>），比赋值运算符高。这意味着<code>x &gt; y + 2</code>和<code>x &gt; (y+ 2)</code>相同，<code>x = y &gt; 2</code>和<code>x = (y &gt; 2)</code>相同。换言之，如果y大于2，则给x赋值1，否则赋值0。y的值不会赋给x。</p>\n<p><strong><mark>关系运算符比赋值运算符的优先级高</mark></strong>，因此，<code>x_bigger=x&gt;y;</code>相当于<code>x_bigger=(x &gt; y);</code>。</p>\n<p>关系运算符之间有两种不同的优先级。</p>\n<p>高优先级组： <code>&lt;&lt;= &gt;&gt;=</code></p>\n<p>低优先级组： <code>== !=</code></p>\n<p>与其他大多数运算符一样，<strong><mark>关系运算符的结合律也是从左往右</mark></strong>。因此：</p>\n<p><code>ex!=wye==zee</code>与<code>(ex != wye) == zee</code>相同</p>\n<p>首先，C判断<code>ex</code>与<code>wye</code>是否相等；然后，用得出的值1或0（真或假）再与<code>zee</code>比较。我们并不推荐这样写，但是在这里有必要说明一下。</p>\n<p>表6.2列出了目前我们学过的运算符的性质。附录B的参考资料II“C运算符”中列出了全部运算符的完整优先级表。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/运算符优先级.png\" class=\"φcy\"></p>\n<p>小结：<code>while</code>语句</p>\n<p>关键字：<code>while</code></p>\n<p>一般注解：</p>\n<p><code>while</code>语句创建了一个循环，重复执行直到测试表达式为假或0。<code>while</code>语句是一种入口条件循环，也就是说，在执行多次循环之前已决定是否执行循环。因此，循环有可能不被执行。循环体可以是简单语句，也可以是复合语句。</p>\n<p>形式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(expression)</span><br><span class=\"line\">statement</span><br></pre></td></tr></table></figure><p>在<code>expression</code>部分为假或0之前，重复执行<code>statement</code>部分。</p>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(n++&lt;<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\" %d %d\\n\"</span>,n,<span class=\"number\">2</span>*n+<span class=\"number\">1</span>); <span class=\"comment\">// 简单语句</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(fargo&lt;<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#123; <span class=\"comment\">// 复合语句</span></span><br><span class=\"line\">    fargo=fargo+<span class=\"built_in\">step</span>;</span><br><span class=\"line\">    <span class=\"built_in\">step</span>=<span class=\"number\">2</span>*<span class=\"built_in\">step</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>小结：关系运算符和表达式</p>\n<p>关系运算符：</p>\n<p>每个关系运算符都把它左侧的值和右侧的值进行比较。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;　　　　　小于</span><br><span class=\"line\">&lt;=　　　　 小于或等于</span><br><span class=\"line\">==　　　　 等于</span><br><span class=\"line\">&gt;=　　　　 大于或等于</span><br><span class=\"line\">&gt;　　　　　大于</span><br><span class=\"line\">!=　　　　 不等于</span><br></pre></td></tr></table></figure><p><strong>关系表达式：</strong></p>\n<p>简单的关系表达式由关系运算符及其运算对象组成。如果关系为真，关系表达式的值为 1；如果关系为假，关系表达式的值为0。</p>\n<p>示例：</p>\n<p><code>5 &gt; 2</code>为真，关系表达式的值为1</p>\n<p><code>(2 + a) == a</code> 为假，关系表达式的值为0</p>\n<h2 id=\"不确定循环和计数循环\">不确定循环和计数循环<a href=\"#不确定循环和计数循环\" title=\"不确定循环和计数循环\"></a></h2><p>一些<code>while</code>循环是<strong>不确定循环</strong>（indefinite loop）。所谓不确定循环，指在测试表达式为假之前，预先不知道要执行多少次循环。例如，程序清单6.1通过与用户交互获得数据来计算整数之和。我们事先并不知道用户会输入什么整数。另外，还有一类是<strong>计数循环</strong>（counting loop）。这类循环在执行循环之前就知道要重复执行多少次。程序清单6.10就是一个简单的计数循环。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">6.10</span> sweetie1.c程序</span><br><span class=\"line\"><span class=\"comment\">// sweetie1.c -- 一个计数循环</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span>　<span class=\"keyword\">int</span>　NUMBER　=　<span class=\"number\">22</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;　　　　　　　　　　　　　<span class=\"comment\">// 初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(count&lt;=NUMBER)　　　　　　　 <span class=\"comment\">// 测试</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Be my Valentine!\\n\"</span>);　 <span class=\"comment\">// 行为</span></span><br><span class=\"line\">        count++;　　　　　　　　　　　　　　<span class=\"comment\">// 更新计数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>虽然程序清单6.10运行情况良好，但是定义循环的行为并未组织在一起，程序的编排并不是很理想。我们来仔细分析一下。</p>\n<p>在创建一个重复执行固定次数的循环中涉及了3个行为：</p>\n<ol><li><p>必须初始化计数器；</p>\n</li>\n<li><p>计数器与有限的值作比较；</p>\n</li>\n<li><p>每次循环时递增计数器。</p>\n</li>\n</ol><p><code>while</code>循环的测试条件执行比较，递增运算符执行递增。程序清单6.10中，递增发生在循环的末尾，这可以防止不小心漏掉递增。因此，这样做比将测试和更新组合放在一起（即使用<code>count++ &lt;= NUMBER</code>）要好，但是计数器的初始化放在循环外，就有可能忘记初始化。实践告诉我们可能会发生的事情终究会发生，所以我们来学习另一种控制语句，可以避免这些问题。</p>\n<h2 id=\"for循环\">for循环<a href=\"#for循环\" title=\"for循环\"></a></h2><p><code>for</code>循环把上述3个行为（初始化、测试和更新）组合在一处。程序清单6.11使用<code>for</code>循环修改了程序清单6.10的程序。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">6.11</span> sweetie2.c程序</span><br><span class=\"line\"><span class=\"comment\">// sweetie2.c -- 使用for循环的计数循环</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> NUMBER=<span class=\"number\">22</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(count=<span class=\"number\">1</span>;count&lt;=NUMBER;count++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Be　my　Valentine!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>关键字<code>for</code>后面的圆括号中有3个表达式，分别用两个分号隔开。</p>\n<p>第1个表达式是初始化，只会在<code>for</code>循环开始时执行一次。</p>\n<p>第 2 个表达式是测试条件，在执行循环之前对表达式求值。如果表达式为假（本例中，<code>count</code>大于<code>NUMBER</code>时），循环结束。</p>\n<p>第3个表达式执行更新，在每次循环结束时求值。程序清单6.10用这个表达式递增count 的值，更新计数。</p>\n<p>完整的<code>for</code>语句还包括后面的简单语句或复合语句。<code>for</code>圆括号中的表达式也叫做<strong>控制表达式</strong>，它们都是完整表达式，所以每个表达式的副作用（如，递增变量）都发生在对下一个表达式求值之前。图6.3演示了for循环的结构。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/for循环的结构.png\" class=\"φcy\"></p>\n<p>程序清单6.12 for_cube.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* for_cube.c -- 使用for循环创建一个立方表 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"n　　n　cubed\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(num=<span class=\"number\">1</span>;num&lt;=<span class=\"number\">6</span>;num++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%5d %5d\\n\"</span>,num,num*num*num);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>程序清单6.12打印整数1～6及其对应的立方，该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n　　　 n　cubed</span><br><span class=\"line\"><span class=\"number\">1</span>　　　　　　　<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span>　　　　　　　<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">3</span>　　　　　　 <span class=\"number\">27</span></span><br><span class=\"line\"><span class=\"number\">4</span>　　　　　　 <span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"number\">5</span>　　　　　 <span class=\"number\">125</span></span><br><span class=\"line\"><span class=\"number\">6</span>　　　　　 <span class=\"number\">216</span></span><br></pre></td></tr></table></figure><p><code>for</code>循环的第1行包含了循环所需的所有信息：<code>num</code>的初值，<code>num</code>的终值和每次循环<code>num</code>的增量。</p>\n<h3 id=\"利用for的灵活性\">利用for的灵活性<a href=\"#利用for的灵活性\" title=\"利用for的灵活性\"></a></h3><p>虽然<code>for</code>循环看上去和<code>FORTRAN的DO</code>循环、<code>Pascal</code>的<code>FOR</code>循环、<code>BASIC</code>的<code>FOR...NEXT</code>循环类似，但是<code>for</code>循环比这些循环灵活。这些灵活性源于如何使用<code>for</code>循环中的3个表达式。以前面程序示例中的<code>for</code>循环为例，第1个表达式给计数器赋初值，第2个表达式表示计数器的范围，第3个表达式递增计数器。这样使用<code>for</code>循环确实很像其他语言的循环。除此之外，<code>for</code>循环还有其他9种用法。</p>\n<p>可以使用递减运算符来递减计数器：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* for_down.c */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> secs;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(secs=<span class=\"number\">5</span>;secs&gt;<span class=\"number\">0</span>;secs--)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d　seconds!\\n\"</span>,secs);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"We　have　ignition!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span> seconds!</span><br><span class=\"line\"><span class=\"number\">4</span> seconds!</span><br><span class=\"line\"><span class=\"number\">3</span> seconds!</span><br><span class=\"line\"><span class=\"number\">2</span> seconds!</span><br><span class=\"line\"><span class=\"number\">1</span> seconds!</span><br><span class=\"line\">We have ignition!</span><br></pre></td></tr></table></figure><p>可以让计数器递增2、10等：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* for_13s.c */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n; <span class=\"comment\">// 从2开始，每次递增13</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>　(n=<span class=\"number\">2</span>;n&lt;<span class=\"number\">60</span>;n=n+<span class=\"number\">13</span>)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d　\\n\"</span>,　n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>每次循环n递增13，程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"number\">28</span></span><br><span class=\"line\"><span class=\"number\">41</span></span><br><span class=\"line\"><span class=\"number\">54</span></span><br></pre></td></tr></table></figure><p>可以用字符代替数字计数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* for_char.c */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ch=<span class=\"string\">'a'</span>;ch&lt;=<span class=\"string\">'z'</span>;ch++)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"The　ASCII　value　for　%c　is　%d.\\n\"</span>,　ch,　ch);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序假定系统用ASCII码表示字符。由于篇幅有限，省略了大部分输出：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The　ASCII　value　<span class=\"keyword\">for</span>　a　is　<span class=\"number\">97.</span></span><br><span class=\"line\">The　ASCII　value　<span class=\"keyword\">for</span>　b　is　<span class=\"number\">98.</span></span><br><span class=\"line\">...</span><br><span class=\"line\">The　ASCII　value　<span class=\"keyword\">for</span>　x　is　<span class=\"number\">120.</span></span><br><span class=\"line\">The　ASCII　value　<span class=\"keyword\">for</span>　y　is　<span class=\"number\">121.</span></span><br><span class=\"line\">The　ASCII　value　<span class=\"keyword\">for</span>　z　is　<span class=\"number\">122.</span></span><br></pre></td></tr></table></figure><p>该程序能正常运行是因为字符在内部是以整数形式储存的，因此该循环实际上仍是用整数来计数。</p>\n<p>除了测试迭代次数外，还可以测试其他条件。在<code>for_cube</code>程序中，可以把：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(num=<span class=\"number\">1</span>;num&lt;=<span class=\"number\">6</span>;num++)</span><br></pre></td></tr></table></figure><p>替换成：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(num=<span class=\"number\">1</span>;num*num*num&lt;=<span class=\"number\">216</span>;num++)</span><br></pre></td></tr></table></figure><p>如果与控制循环次数相比，你更关心限制立方的大小，就可以使用这样的测试条件。</p>\n<p>可以让递增的量几何增长，而不是算术增长。也就是说，每次都乘上而不是加上一个固定的量：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* for_geo.c */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span>　debt;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (debt = <span class=\"number\">100.0</span>; debt &lt; <span class=\"number\">150.0</span>; debt = debt * <span class=\"number\">1.1</span>)</span><br><span class=\"line\">\t    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Your　debt　is　now　$%.2f.\\n\"</span>,　debt);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序中，每次循环都把debt乘以1.1，即debt的值每次都增加10%，其输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your　debt　is　now　$<span class=\"number\">100.00</span>.</span><br><span class=\"line\">Your　debt　is　now　$<span class=\"number\">110.00</span>.</span><br><span class=\"line\">Your　debt　is　now　$<span class=\"number\">121.00</span>.</span><br><span class=\"line\">Your　debt　is　now　$<span class=\"number\">133.10</span>.</span><br><span class=\"line\">Your　debt　is　now　$<span class=\"number\">146.41</span>.</span><br></pre></td></tr></table></figure><p>第3个表达式可以使用任意合法的表达式。无论是什么表达式，每次迭代都会更新该表达式的值。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* for_wild.c */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y=<span class=\"number\">55</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(x=<span class=\"number\">1</span>;y&lt;=<span class=\"number\">75</span>;y=(++x*<span class=\"number\">5</span>)+<span class=\"number\">50</span>)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%10d　%10d\\n\"</span>,　x,　y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该循环打印x的值和表达式<code>++x * 5 + 50</code>的值，程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>　　　　　 <span class=\"number\">55</span></span><br><span class=\"line\"><span class=\"number\">2</span>　　　　　 <span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"number\">3</span>　　　　　 <span class=\"number\">65</span></span><br><span class=\"line\"><span class=\"number\">4</span>　　　　　 <span class=\"number\">70</span></span><br><span class=\"line\"><span class=\"number\">5</span>　　　　　 <span class=\"number\">75</span></span><br></pre></td></tr></table></figure><p>注意，测试涉及y，而不是x。for循环中的3个表达式可以是不同的变量（注意，虽然该例可以正常运行，但是编程风格不太好。如果不在更新部分加入代数计算，程序会更加清楚）。</p>\n<p>可以省略一个或多个表达式（但是不能省略分号），只要在循环中包含能结束循环的语句即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* for_none.c */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans,n;</span><br><span class=\"line\">    ans=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(n=<span class=\"number\">3</span>;ans&lt;=<span class=\"number\">25</span>;)</span><br><span class=\"line\">\t\tans=ans*n;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"n　=　%d;　ans　=　%d.\\n\"</span>,　n,　ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n=<span class=\"number\">3</span>;ans=<span class=\"number\">54.</span></span><br></pre></td></tr></table></figure><p>该循环保持n的值为3。变量ans开始的值为2，然后递增到6和18，最终是54（18比25小，所以<code>for</code>循环进入下一次迭代，18乘以3得54）。顺带一提，省略第2个表达式被视为真，所以下面的循环会一直运行：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>　(;　;　)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"I　want　some　action\\n\"</span>);</span><br></pre></td></tr></table></figure><p>第1个表达式不一定是给变量赋初值，也可以使用<code>printf()</code>。记住，在执行循环的其他部分之前，只对第1个表达式求值一次或执行一次。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* for_show.c */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num　=　<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">printf</span>(<span class=\"string\">\"Keep　entering　numbers!\\n\"</span>);num!=<span class=\"number\">6</span>;)</span><br><span class=\"line\">  \t  <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,　&amp;num);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"That's　the　one　I　want!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序打印第1行的句子一次，在用户输入6之前不断接受数字：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Keep　entering　numbers!</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\">That<span class=\"number\">'</span>s the one I want!</span><br></pre></td></tr></table></figure><p>循环体中的行为可以改变循环头中的表达式。例如，假设创建了下面的循环：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(n=<span class=\"number\">1</span>;n&lt;<span class=\"number\">10000</span>;n=n+delta)</span><br></pre></td></tr></table></figure><p>如果程序经过几次迭代后发现delta太小或太大，循环中的<code>if</code>语句（详见第7章）可以改变delta的大小。在交互式程序中，用户可以在循环运行时才改变 delta 的值。这样做也有危险的一面，例如，把delta设置为0就没用了。</p>\n<p>总而言之，可以自己决定如何使用<code>for</code>循环头中的表达式，这使得在执行固定次数的循环外，还可以做更多的事情。接下来，我们将简要讨论一些运算符，使for循环更加有用。</p>\n<p>小结：for语句</p>\n<p>关键字：for</p>\n<p>一般注解：</p>\n<p><code>for</code>语句使用3个表达式控制循环过程，分别用分号隔开。<code>initialize</code>表达式在执行<code>for</code>语句之前只执行一次；然后对<code>test</code>表达式求值，如果表达式为真（或非零），执行循环一次；接着对<code>update</code>表达式求值，并再次检查<code>test</code>表达式。<code>for</code>语句是一种入口条件循环，即在执行循环之前就决定了是否执行循环。因此，for循环可能一次都不执行。statement部分可以是一条简单语句或复合语句。</p>\n<p>形式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(initialize;test;update　)</span><br><span class=\"line\">statement</span><br></pre></td></tr></table></figure><p>在test为假或0之前，重复执行statement部分。</p>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(n=<span class=\"number\">0</span>;n&lt;<span class=\"number\">10</span>;n++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\" %d %d\\n\"</span>, n, <span class=\"number\">2</span> * n + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure><h2 id=\"其他赋值运算符：、-、、、\">其他赋值运算符：+=、-=、*=、/=、%=<a href=\"#其他赋值运算符：、-、、、\" title=\"其他赋值运算符：+=、-=、*=、/=、%=\"></a></h2><p>C有许多赋值运算符。最基本、最常用的是=，它把右侧表达式的值赋给左侧的变量。其他赋值运算符都用于更新变量，其用法都是左侧是一个变量名，右侧是一个表达式。赋给变量的新值是根据右侧表达式的值调整后的值。确切的调整方案取决于具体的运算符。例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scores+=<span class=\"number\">20</span>\t\t与\t\tscores=scores+<span class=\"number\">20</span>\t\t相同</span><br><span class=\"line\">dimes-=<span class=\"number\">2</span>\t\t与\t\tdimes=dimes<span class=\"number\">-2</span>\t\t\t相同</span><br><span class=\"line\">bunnies*=<span class=\"number\">2</span>\t\t与\t\tbunnies=bunnies*<span class=\"number\">2</span>\t\t相同</span><br><span class=\"line\">time/=<span class=\"number\">2.73</span>\t\t与\t\ttime=time/<span class=\"number\">2.73</span>\t\t\t相同</span><br><span class=\"line\">reduce%=<span class=\"number\">3</span>\t\t与\t\treduce=reduce%<span class=\"number\">3</span>\t\t\t相同</span><br></pre></td></tr></table></figure><p>上述所列的运算符右侧都使用了简单的数，还可以使用更复杂的表达式，例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x*=<span class=\"number\">3</span>*y+<span class=\"number\">12</span>\t与\tx=x*(<span class=\"number\">3</span>*y+<span class=\"number\">12</span>) \t相同</span><br></pre></td></tr></table></figure><p>以上提到的赋值运算符与=的优先级相同，即比+或*优先级低。上面最后一个例子也反映了赋值运算符的优先级，<code>3 *y</code>先与12相加，再把计算结果与x相乘，最后再把乘积赋给x。</p>\n<p>并非一定要使用这些组合形式的赋值运算符。但是，它们让代码更紧凑，而且与一般形式相比，组合形式的赋值运算符生成的机器代码更高效。当需要在<code>for</code>循环中塞进一些复杂的表达式时，这些组合的赋值运算符特别有用。</p>\n<h2 id=\"逗号运算符\">逗号运算符<a href=\"#逗号运算符\" title=\"逗号运算符\"></a></h2><p>逗号运算符扩展了for循环的灵活性，以便在循环头中包含更多的表达式。例如，程序清单6.13演示了一个打印一类邮件资费（first-class postage rate）的程序（在撰写本书时，邮资为首重40美分/盎司，续重20美分/盎司，可以在互联网上查看当前邮资）。</p>\n<p>程序清单6.13 postage.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// postage.c -- 一类邮资</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> FIRST_OZ = <span class=\"number\">46</span>;　　<span class=\"comment\">// 2013邮资</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> NEXT_OZ = <span class=\"number\">20</span>;　　 <span class=\"comment\">// 2013邮资</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ounces,　cost;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"　ounces　 cost\\n\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(ounces=<span class=\"number\">1</span>,cost=FIRST_OZ;ounces&lt;=<span class=\"number\">16</span>;ounces++,cost+=NEXT_OZ)</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%5d　　$%4.2f\\n\"</span>,　ounces,　cost　/　<span class=\"number\">100.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的前5行输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ounces　\tcost</span><br><span class=\"line\"><span class=\"number\">1</span>　　　　 $<span class=\"number\">0.46</span></span><br><span class=\"line\"><span class=\"number\">2</span>　　　　 $<span class=\"number\">0.66</span></span><br><span class=\"line\"><span class=\"number\">3</span>　　　　 $<span class=\"number\">0.86</span></span><br><span class=\"line\"><span class=\"number\">4</span>　　　　 $<span class=\"number\">1.06</span></span><br></pre></td></tr></table></figure><p>该程序在初始化表达式和更新表达式中使用了逗号运算符。初始化表达式中的逗号使<code>ounces</code>和<code>cost</code>都进行了初始化，更新表达式中的逗号使每次迭代<code>ounces</code>递增1、<code>cost</code>递增20（<code>NEXT_Z</code>的值是20）。绝大多数计算都在for循环头中进行（见图6.4）。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/逗号运算符和for循环.png\" class=\"φcy\"></p>\n<p>逗号运算符并不局限于在<code>for</code>循环中使用，但是这是它最常用的地方。逗号运算符有两个其他性质。首先，它保证了被它分隔的表达式从左往右求值（换言之，逗号是一个序列点，所以逗号左侧项的所有副作用都在程序执行逗号右侧项之前发生）。因此，<code>ounces</code>在<code>cost</code>之前被初始化。在该例中，顺序并不重要，但是如果<code>cost</code>的表达式中包含了<code>ounces</code>时，顺序就很重要。例如，假设有下面的表达式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ounces++,cost=ounces*FIRST_OZ</span><br></pre></td></tr></table></figure><p>在该表达式中，先递增<code>ounce</code>，然后在第2个子表达式中使用<code>ounce</code>的新值。作为序列点的逗号保证了左侧子表达式的副作用在对右侧子表达式求值之前发生。</p>\n<p>其次，整个逗号表达式的值是右侧项的值。例如，下面语句</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=(y=<span class=\"number\">3</span>,(z=++y+<span class=\"number\">2</span>)+<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure><p>的效果是：先把3赋给y，递增y为4，然后把4加2之和（6）赋给z，接着加上5，最后把结果11赋给 x。至于为什么有人编写这样的代码，在此不做评价。另一方面，假设在写数字时不小心输入了逗号：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">houseprice=<span class=\"number\">249</span>,<span class=\"number\">500</span>;</span><br></pre></td></tr></table></figure><p>这不是语法错误，C 编译器会将其解释为一个逗号表达式，即 houseprice = 249 是逗号左侧的子表达式，500 是右侧的子表达式。因此，整个逗号表达式的值是逗号右侧表达式的值，而且左侧的赋值表达式把249赋给变量<code>houseprice</code>。因此，这与下面代码的效果相同：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">houseprice　=　<span class=\"number\">249</span>;</span><br></pre></td></tr></table></figure><p>500;记住，任何表达式后面加上一个分号就成了表达式语句。所以，500;也是一条语句，但是什么也不做。</p>\n<p>另外，下面的语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">houseprice &#x3D; (249,500);</span><br></pre></td></tr></table></figure><p>赋给<code>houseprice</code>的值是逗号右侧子表达式的值，即500。</p>\n<p>逗号也可用作分隔符。在下面语句中的逗号都是分隔符，不是逗号运算符：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> ch, date;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, chimps, chumps);</span><br></pre></td></tr></table></figure><p>小结：新的运算符</p>\n<p>赋值运算符：</p>\n<p>下面的运算符用右侧的值，根据指定的操作更新左侧的变量：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+=\t\t\t把右侧的值加到左侧的变量上</span><br><span class=\"line\">-=\t\t\t从左侧的变量中减去右侧的值</span><br><span class=\"line\">*=\t\t\t把左侧的变量乘以右侧的值</span><br><span class=\"line\">/=\t\t\t把左侧的变量除以右侧的值</span><br><span class=\"line\">%=\t\t\t左侧变量除以右侧值得到的余数</span><br></pre></td></tr></table></figure><p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbits*=<span class=\"number\">1.6</span>;\t与\trabbits=rabbits*<span class=\"number\">1.6</span>;\t相同</span><br></pre></td></tr></table></figure><p>这些组合赋值运算符与普通赋值运算符的优先级相同，都比算术运算符的优先级低。因此，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contents*=old_rate+<span class=\"number\">1.2</span>;</span><br></pre></td></tr></table></figure><p>最终的效果与下面的语句相同：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contents = contents * (old_rate + <span class=\"number\">1.2</span>);</span><br></pre></td></tr></table></figure><p><strong>逗号运算符：</strong></p>\n<p>逗号运算符把两个表达式连接成一个表达式，并保证最左边的表达式最先求值。逗号运算符通常在<code>for</code>循环头的表达式中用于包含更多的信息。整个逗号表达式的值是逗号右侧表达式的值。</p>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">step</span> = <span class=\"number\">2</span>, fargo = <span class=\"number\">0</span>;fargo&lt;<span class=\"number\">1000</span>;<span class=\"built_in\">step</span>*=<span class=\"number\">2</span>)</span><br><span class=\"line\">fargo+=<span class=\"built_in\">step</span>;</span><br></pre></td></tr></table></figure><h3 id=\"当zeno遇到for循环\">当Zeno遇到for循环<a href=\"#当zeno遇到for循环\" title=\"当Zeno遇到for循环\"></a></h3><p>接下来，我们看看 <code>for</code> 循环和逗号运算符如何解决古老的悖论。希腊哲学家 Zeno 曾经提出箭永远不会达到它的目标。首先，他认为箭要到达目标距离的一半，然后再达到剩余距离的一半，然后继续到达剩余距离的一半，这样就无穷无尽。Zeno认为箭的飞行过程有无数个部分，所以要花费无数时间才能结束这一过程。不过，我们怀疑Zeno是自愿甘做靶子才会得出这样的结论。</p>\n<p>我们采用一种定量的方法，假设箭用1秒钟走完一半的路程，然后用1/2秒走完剩余距离的一半，然后用1/4秒再走完剩余距离的一半，等等。可以用下面的无限序列来表示总时间：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">1</span>/<span class=\"number\">2</span> + <span class=\"number\">1</span>/<span class=\"number\">4</span> + <span class=\"number\">1</span>/<span class=\"number\">8</span> + <span class=\"number\">1</span>/<span class=\"number\">16</span> +....</span><br></pre></td></tr></table></figure><p>程序清单6.14中的程序求出了序列前几项的和。变量<code>power_of_two</code>的值分别是1.0、2.0、4.0、8.0等。</p>\n<p>程序清单6.14 zeno.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* zeno.c -- 求序列的和 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t_ct;　　　 <span class=\"comment\">// 项计数</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> time,power_of_2;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> limit;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter　the　number　of　terms　you　want:　\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;limit);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(time=<span class=\"number\">0</span>,power_of_2=<span class=\"number\">1</span>,t_ct=<span class=\"number\">1</span>;t_ct&lt;=limit;t_ct++,power_of_2*=<span class=\"number\">2.0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        time+=<span class=\"number\">1.0</span>/power_of_2;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"time=%f　when　terms　=　%d.\\n\"</span>,time,t_ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>下面是序列前15项的和：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter　the　number　of　terms　you　want:　<span class=\"number\">15</span></span><br><span class=\"line\">time　=　<span class=\"number\">1.000000</span>　when　terms　=　<span class=\"number\">1.</span></span><br><span class=\"line\">time　=　<span class=\"number\">1.500000</span>　when　terms　=　<span class=\"number\">2.</span></span><br><span class=\"line\">time　=　<span class=\"number\">1.750000</span>　when　terms　=　<span class=\"number\">3.</span></span><br><span class=\"line\">time　=　<span class=\"number\">1.875000</span>　when　terms　=　<span class=\"number\">4.</span></span><br><span class=\"line\">time　=　<span class=\"number\">1.937500</span>　when　terms　=　<span class=\"number\">5.</span></span><br><span class=\"line\">time　=　<span class=\"number\">1.968750</span>　when　terms　=　<span class=\"number\">6.</span></span><br><span class=\"line\">time　=　<span class=\"number\">1.984375</span>　when　terms　=　<span class=\"number\">7.</span></span><br><span class=\"line\">time　=　<span class=\"number\">1.992188</span>　when　terms　=　<span class=\"number\">8.</span></span><br><span class=\"line\">time　=　<span class=\"number\">1.996094</span>　when　terms　=　<span class=\"number\">9.</span></span><br><span class=\"line\">time　=　<span class=\"number\">1.998047</span>　when　terms　=　<span class=\"number\">10.</span></span><br><span class=\"line\">time　=　<span class=\"number\">1.999023</span>　when　terms　=　<span class=\"number\">11.</span></span><br><span class=\"line\">time　=　<span class=\"number\">1.999512</span>　when　terms　=　<span class=\"number\">12.</span></span><br><span class=\"line\">time　=　<span class=\"number\">1.999756</span>　when　terms　=　<span class=\"number\">13.</span></span><br><span class=\"line\">time　=　<span class=\"number\">1.999878</span>　when　terms　=　<span class=\"number\">14.</span></span><br><span class=\"line\">time　=　<span class=\"number\">1.999939</span>　when　terms　=　<span class=\"number\">15.</span></span><br></pre></td></tr></table></figure><p>不难看出，尽管不断添加新的项，但是总和看起来变化不大。就像程序输出显示的那样，数学家的确证明了当项的数目接近无穷时，总和无限接近2.0。假设S表示总和，下面我们用数学的方法来证明一下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S = <span class=\"number\">1</span> + <span class=\"number\">1</span>/<span class=\"number\">2</span> + <span class=\"number\">1</span>/<span class=\"number\">4</span> + <span class=\"number\">1</span>/<span class=\"number\">8</span> + ...</span><br></pre></td></tr></table></figure><p>这里的省略号表示“等等”。把S除以2得：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S/<span class=\"number\">2</span> = <span class=\"number\">1</span>/<span class=\"number\">2</span> + <span class=\"number\">1</span>/<span class=\"number\">4</span> + <span class=\"number\">1</span>/<span class=\"number\">8</span> + <span class=\"number\">1</span>/<span class=\"number\">16</span> + ...</span><br></pre></td></tr></table></figure><p>第1个式子减去第2个式子得：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S - S/<span class=\"number\">2</span> = <span class=\"number\">1</span> +<span class=\"number\">1</span>/<span class=\"number\">2</span> <span class=\"number\">-1</span>/<span class=\"number\">2</span> + <span class=\"number\">1</span>/<span class=\"number\">4</span> <span class=\"number\">-1</span>/<span class=\"number\">4</span> +...</span><br></pre></td></tr></table></figure><p>除了第1个值为1，其他的值都是一正一负地成对出现，所以这些项都可以消去。只留下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S/<span class=\"number\">2</span> = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure><p>然后，两侧同乘以2，得：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure><p>从这个示例中得到的启示是，在进行复杂的计算之前，先看看数学上是否有简单的方法可用。</p>\n<p>程序本身是否有需要注意的地方？该程序演示了在表达式中可以使用多个逗号运算符，在<code>for</code>循环中，初始化了<code>time</code>、<code>power_of_2</code>和<code>count</code>。构建完循环条件之后，程序本身就很简短了。</p>\n<h2 id=\"出口条件循环：do-while\">出口条件循环：do while<a href=\"#出口条件循环：do-while\" title=\"出口条件循环：do while\"></a></h2><p><code>while</code>循环和<code>for</code>循环都是入口条件循环，即在循环的每次迭代之前检查测试条件，所以有可能根本不执行循环体中的内容。C语言还有出口条件循环（exit-condition loop），即在循环的每次迭代之后检查测试条件，这保证了至少执行循环体中的内容一次。这种循环被称为 do while循环。程序清单6.15 演示了一个示例。</p>\n<p>程序清单6.15 do_while.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* do_while.c -- 出口条件循环 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> secret_code=<span class=\"number\">13</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> code_entered;</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"To　enter　the　triskaidekaphobia　therapy　club,\\n\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"please　enter　the　secret　code　number:　\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;code_entered);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(code_entered!=secret_code);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Congratulations!　You　are　cured!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>程序清单6.15在用户输入13之前不断提示用户输入数字。下面是一个运行示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">To　enter　the　triskaidekaphobia　therapy　club,</span><br><span class=\"line\">please　enter　the　secret　code　number:　<span class=\"number\">12</span></span><br><span class=\"line\">To　enter　the　triskaidekaphobia　therapy　club,</span><br><span class=\"line\">please　enter　the　secret　code　number:　<span class=\"number\">14</span></span><br><span class=\"line\">To　enter　the　triskaidekaphobia　therapy　club,</span><br><span class=\"line\">please　enter　the　secret　code　number:　<span class=\"number\">13</span></span><br><span class=\"line\">Congratulations!　You　are　cured!</span><br></pre></td></tr></table></figure><p>使用while循环也能写出等价的程序，但是长一些，如程序清单6.16所示。</p>\n<p>程序清单6.16 entry.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* entry.c -- 出口条件循环 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> secret_code=<span class=\"number\">13</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> code_entered;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"To　enter　the　triskaidekaphobia　therapy　club,\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"please　enter　the　secret　code　number:　\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,　&amp;code_entered);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(code_entered!=secret_code)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"To　enter　the　triskaidekaphobia　therapy　club,\\n\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"please　enter　the　secret　code　number:　\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;code_entered);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Congratulations!　You　are　cured!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>下面是<code>do while</code>循环的通用形式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">statement</span><br><span class=\"line\"><span class=\"keyword\">while</span>(expression);</span><br></pre></td></tr></table></figure><p><code>statement</code>可以是一条简单语句或复合语句。注意，<mark><code>do while</code>循环以分号结尾</mark>，其结构见图6.5。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/dowhile循环的结构.png\" class=\"φcy\"></p>\n<p><code>do while</code>循环在执行完循环体后才执行测试条件，所以至少执行循环体一次；而<code>for</code>循环或<code>while</code>循环都是在执行循环体之前先执行测试条件。<code>do while</code>循环适用于那些至少要迭代一次的循环。例如，下面是一个包含<code>do while</code>循环的密码程序伪代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">提示用户输入密码</span><br><span class=\"line\">读取用户输入的密码</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (用户输入的密码不等于密码);</span><br><span class=\"line\"></span><br><span class=\"line\">避免使用这种形式的<span class=\"keyword\">do</span>　<span class=\"keyword\">while</span>结构：</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">询问用户是否继续</span><br><span class=\"line\">其他行为</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (回答是yes);</span><br></pre></td></tr></table></figure><p>这样的结构导致用户在回答“no”之后，仍然执行“其他行为”部分，因为测试条件执行晚了。</p>\n<p>小结：<code>do while</code>语句</p>\n<p>关键字：<code>do while</code></p>\n<p>一般注解：</p>\n<p><code>do while</code> 语句创建一个循环，在 <code>expression</code> 为假或 0 之前重复执行循环体中的内容。<code>do while</code>语句是一种出口条件循环，即在执行完循环体后才根据测试条件决定是否再次执行循环。因此，该循环至少必须执行一次。<code>statement</code>部分可是一条简单语句或复合语句。</p>\n<p>形式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">statement</span><br><span class=\"line\"><span class=\"keyword\">while</span>(expression);</span><br></pre></td></tr></table></figure><p>在test为假或0之前，重复执行<code>statement</code>部分。</p>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;number);</span><br><span class=\"line\"><span class=\"keyword\">while</span>　(number!=<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure><h2 id=\"如何选择循环\">如何选择循环<a href=\"#如何选择循环\" title=\"如何选择循环\"></a></h2><p>如何选择使用哪一种循环？首先，确定是需要入口条件循环还是出口条件循环。通常，入口条件循环用得比较多，有几个原因。其一，一般原则是在执行循环之前测试条件比较好。其二，测试放在循环的开头，程序的可读性更高。另外，在许多应用中，要求在一开始不满足测试条件时就直接跳过整个循环。</p>\n<p>那么，假设需要一个入口条件循环，用for循环还是while循环？这取决于个人喜好，因为二者皆可。要让<code>for</code>循环看起来像<code>while</code>循环，可以省略第1个和第3个表达式。例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( ; test ; )</span><br></pre></td></tr></table></figure><p>与下面的while效果相同：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ( test )</span><br></pre></td></tr></table></figure><p>要让<code>while</code>循环看起来像<code>for</code>循环，可以在<code>while</code>循环的前面初始化变量，并在<code>while</code>循环体中包含更新语句。例如：</p>\n<p>初始化;</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ( 测试 )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    其他语句</span><br><span class=\"line\">    更新语句</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>与下面的for循环效果相同：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( 初始化 ;测试 ; 更新 )</span><br><span class=\"line\">其他语句</span><br></pre></td></tr></table></figure><p>一般而言，当循环涉及初始化和更新变量时，用<code>for</code>循环比较合适，而在其他情况下用<code>while</code>循环更好。对于下面这种条件，用while循环就很合适：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>, &amp;num) == <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure><p>对于涉及索引计数的循环，用for循环更适合。例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (count = <span class=\"number\">1</span>; count &lt;= <span class=\"number\">100</span>; count++)</span><br></pre></td></tr></table></figure><h2 id=\"嵌套循环\">嵌套循环<a href=\"#嵌套循环\" title=\"嵌套循环\"></a></h2><p>嵌套循环（nested loop）指在一个循环内包含另一个循环。嵌套循环常用于按行和列显示数据，也就是说，一个循环处理一行中的所有列，另一个循环处理所有的行。程序清单6.17演示了一个简单的示例。</p>\n<p>程序清单6.17 rows1.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* rows1.c -- 使用嵌套循环 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ROWS 6</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>　CHARS　10</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> row;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(row=<span class=\"number\">0</span>;row&lt;ROWS;row++)　　　　　　　　 <span class=\"comment\">/* 第10行 */</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ch=<span class=\"string\">'A'</span>;ch&lt;(<span class=\"string\">'A'</span>+CHARS);ch++)　　 <span class=\"comment\">/* 第12行 */</span></span><br><span class=\"line\">        \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>,ch);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>运行该程序后，输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABCDEFGHIJ</span><br><span class=\"line\">ABCDEFGHIJ</span><br><span class=\"line\">ABCDEFGHIJ</span><br><span class=\"line\">ABCDEFGHIJ</span><br><span class=\"line\">ABCDEFGHIJ</span><br><span class=\"line\">ABCDEFGHIJ</span><br></pre></td></tr></table></figure><h3 id=\"程序分析\">程序分析<a href=\"#程序分析\" title=\"程序分析\"></a></h3><p>第10行开始的<code>for</code>循环被称为外层循环（outer loop），第12行开始的<code>for</code>循环被称为内层循环（inner loop）。外层循环从<code>row</code>为0开始循环，到<code>row</code>为6时结束。因此，外层循环要执行6次，row的值从0变为5。每次迭代要执行的第1条语句是内层的for循环，该循环要执行10次，在同一行打印字符<code>A～J</code>；第2条语句是外层循环的<code>printf(&quot;\\n&quot;);</code>，该语句的效果是另起一行，这样在下一次运行内层循环时，将在下一行打印的字符。</p>\n<p>注意，嵌套循环中的内层循环在每次外层循环迭代时都执行完所有的循环。在程序清单6.17中，内层循环一行打印10个字符，外层循环创建6行。</p>\n<h3 id=\"嵌套变式\">嵌套变式<a href=\"#嵌套变式\" title=\"嵌套变式\"></a></h3><p>上一个实例中，内层循环和外层循环所做的事情相同。可以通过外层循环控制内层循环，在每次外层循环迭代时内层循环完成不同的任务。把程序清单6.17稍微修改后，如程序清单6.18所示。内层循环开始打印的字符取决于外层循环的迭代次数。该程序的第 1 行使用了新的注释风格，而且用 <code>const</code> 关键字代替<code>#define</code>，有助于读者熟悉这两种方法。</p>\n<p>程序清单6.18 rows2.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// rows2.c -- 依赖外部循环的嵌套循环</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span>　<span class=\"keyword\">int</span>　ROWS　=　<span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span>　<span class=\"keyword\">int</span>　CHARS　=　<span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>　row;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>　ch;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(row　=　<span class=\"number\">0</span>;　row　&lt;　ROWS;　row++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(ch　=　(<span class=\"string\">'A'</span>　+　row);　ch　&lt;　(<span class=\"string\">'A'</span>　+　CHARS);　ch++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>,　ch);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABCDEF</span><br><span class=\"line\">BCDEF</span><br><span class=\"line\">CDEF</span><br><span class=\"line\">DEF</span><br><span class=\"line\">EF</span><br><span class=\"line\">F</span><br></pre></td></tr></table></figure><p>因为每次迭代都要把row的值与‘A’相加，所以ch在每一行都被初始化为不同的字符。然而，测试条件并没有改变，所以每行依然是以F结尾，这使得每一行打印的字符都比上一行少一个。</p>\n<h2 id=\"数组简介\">数组简介<a href=\"#数组简介\" title=\"数组简介\"></a></h2><p>在许多程序中，数组很重要。数组可以作为一种储存多个相关项的便利方式。我们在第10章中将详细介绍数组，但是由于循环经常用到数组，所以在这里先简要地介绍一下。</p>\n<p>数组（array）是按顺序储存的一系列类型相同的值，如10个<code>char</code>类型的字符或15个<code>int</code>类型的值。整个数组有一个数组名，通过整数下标访问数组中单独的项或元素（element）。例如，以下声明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> debts[<span class=\"number\">20</span>];</span><br></pre></td></tr></table></figure><p>声明<code>debts</code>是一个内含20个元素的数组，每个元素都可以储存<code>float</code>类型的值。数组的第1个元素是<code>debts[0]</code>，第2个元素是<code>debts[1]</code>，以此类推，直到<code>debts[19]</code>。注意，数组元素的编号从0开始，不是从1开始。可以给每个元素赋<code>float</code>类型的值。例如，可以这样写：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debts[<span class=\"number\">5</span>] = <span class=\"number\">32.54</span>;</span><br><span class=\"line\">debts[<span class=\"number\">6</span>] = <span class=\"number\">1.2e+21</span>;</span><br></pre></td></tr></table></figure><p>实际上，使用数组元素和使用同类型的变量一样。例如，可以这样把值读入指定的元素中：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>, &amp;debts[<span class=\"number\">4</span>]); <span class=\"comment\">// 把一个值读入数组的第5个元素</span></span><br></pre></td></tr></table></figure><p>这里要注意一个潜在的陷阱：考虑到影响执行的速度，C 编译器不会检查数组的下标是否正确。下面的代码，都不正确：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debts[<span class=\"number\">20</span>] = <span class=\"number\">88.32</span>;　　 <span class=\"comment\">// 该数组元素不存在</span></span><br><span class=\"line\">debts[<span class=\"number\">33</span>] = <span class=\"number\">828.12</span>;　　<span class=\"comment\">// 该数组元素不存在</span></span><br></pre></td></tr></table></figure><p>编译器不会查找这样的错误。当运行程序时，这会导致数据被放置在已被其他数据占用的地方，可能会破坏程序的结果甚至导致程序异常中断。</p>\n<p>数组的类型可以是任意数据类型。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> nannies[<span class=\"number\">22</span>];　<span class=\"comment\">/* 可储存22个int类型整数的数组 */</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> actors[<span class=\"number\">26</span>];　<span class=\"comment\">/* 可储存26个字符的数组 */</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> big[<span class=\"number\">500</span>];　　<span class=\"comment\">/* 可储存500个long类型整数的数组 */</span></span><br></pre></td></tr></table></figure><p>我们在第4章中讨论过字符串，可以把字符串储存在<code>char</code>类型的数组中（一般而言，<code>char</code>类型数组的所有元素都储存<code>char</code>类型的值）。如果<code>char</code>类型的数组末尾包含一个表示字符串末尾的空字符<code>\\0</code>，则该数组中的内容就构成了一个字符串（见图6.6）。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/字符数组和字符串.png\" class=\"φcy\"></p>\n<p>用于识别数组元素的数字被称为<strong>下标</strong>（subscript）、<strong>索引</strong>（indice）或<strong>偏移量</strong>（offset）。下标必须是<strong>整数</strong>，而且要从0开始计数。数组的元素被依次储存在内存中相邻的位置，如图6.7所示。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/内存中的char和int类型的数组.png\" class=\"φcy\"></p>\n<h3 id=\"在for循环中使用数组\">在for循环中使用数组<a href=\"#在for循环中使用数组\" title=\"在for循环中使用数组\"></a></h3><p>程序中有许多地方要用到数组，程序清单6.19是一个较为简单的例子。该程序读取10个高尔夫分数，稍后进行处理。使用数组，就不用创建10个不同的变量来储存10个高尔夫分数。而且，还可以用<code>for</code>循环来读取数据。程序打印总分、平均分、差点（handicap，它是平均分与标准分的差值）。</p>\n<p>程序清单6.19 scores_in.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// scores_in.c -- 使用循环处理数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>　SIZE　10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>　PAR　72</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index,score[SIZE];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> average;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter　%d　golf　scores:\\n\"</span>,SIZE);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(index=<span class=\"number\">0</span>;index&lt;SIZE;index++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;score[index]);　　 <span class=\"comment\">// 读取10个分数</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"The　scores　read　in　are　as　follows:\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(index=<span class=\"number\">0</span>;index&lt;SIZE;index++)</span><br><span class=\"line\">   \t\t <span class=\"built_in\">printf</span>(<span class=\"string\">\"%5d\"</span>, score[index]);　　<span class=\"comment\">// 验证输入</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(index=<span class=\"number\">0</span>;index&lt;SIZE;index++)</span><br><span class=\"line\">   \t\t sum+=score[index];　　　　　　　<span class=\"comment\">// 求总分数</span></span><br><span class=\"line\">    average=(<span class=\"keyword\">float</span>) sum/SIZE;　　　　<span class=\"comment\">// 求平均分</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Sum　of　scores　=　%d,　average　=　%.2f\\n\"</span>,　sum,　average);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"That's　a　handicap　of　%.0f.\\n\"</span>,　average　-　PAR);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>先看看程序清单6.19是否能正常工作，接下来再做一些解释。下面是程序的输出：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter　<span class=\"number\">10</span>　golf　scores:</span><br><span class=\"line\"><span class=\"number\">99</span>　<span class=\"number\">95</span>　<span class=\"number\">109</span>　<span class=\"number\">105</span>　<span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">96</span>　<span class=\"number\">98</span>　<span class=\"number\">93</span>　<span class=\"number\">99</span>　<span class=\"number\">97</span>　<span class=\"number\">98</span></span><br><span class=\"line\">The　scores　<span class=\"built_in\">read</span>　in　are　as　follows:</span><br><span class=\"line\"><span class=\"number\">99</span>　<span class=\"number\">95</span>　<span class=\"number\">109</span>　<span class=\"number\">105</span>　<span class=\"number\">100</span>　<span class=\"number\">96</span>　<span class=\"number\">98</span>　<span class=\"number\">93</span>　<span class=\"number\">99</span>　<span class=\"number\">97</span></span><br><span class=\"line\">Sum　of　scores　=　<span class=\"number\">991</span>,　average　=　<span class=\"number\">99.10</span></span><br><span class=\"line\">That<span class=\"number\">'</span>s　a　handicap　of　<span class=\"number\">27.</span></span><br></pre></td></tr></table></figure><p>程序运行没问题，我们来仔细分析一下。首先，注意程序示例虽然打印了11个数字，但是只读入了10个数字，因为循环只读了10个值。由于<code>scanf()</code>会跳过空白字符，所以可以在一行输入10个数字，也可以每行只输入一个数字，或者像本例这样混合使用空格和换行符隔开每个数字（因为输入是缓冲的，只有当用户键入<code>Enter</code>键后数字才会被发送给程序）。</p>\n<p>然后，程序使用数组和循环处理数据，这比使用10个单独的<code>scanf()</code>语句和10个单独的<code>printf()</code>语句读取10个分数方便得多。<code>for</code>循环提供了一个简单直接的方法来使用数组下标。注意，<code>int</code>类型数组元素的用法与<code>int</code>类型变量的用法类似。要读取<code>int</code>类型变量<code>fue</code>，应这样写 <code>scanf(&quot;&amp;d&quot;,&amp;fue)</code>。程序清单6.19中要读取<code>int</code>类型的元素 <code>score[index]</code>，所以这样写<code>scanf(&quot;%d&quot;,&amp;score[index]</code>。</p>\n<p>该程序示例演示了一些较好的编程风格。第一，用<code>#define</code> 指令创建的明示常量（<code>SIZE</code>）来指定数组的大小。这样就可以在定义数组和设置循环边界时使用该明示常量。如果以后要扩展程序处理20个分数，只需简单地把<code>SIZE</code>重新定义为20即可，不用逐一修改程序中使用了数组大小的每一处。</p>\n<p>第二，下面的代码可以很方便地处理一个大小为<code>SIZE</code>的数组：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(index=<span class=\"number\">0</span>;index&lt;SIZE;index++)</span><br></pre></td></tr></table></figure><p>设置正确的数组边界很重要。第1个元素的下标是0，因此循环开始时把<code>index</code>设置为0。因为从0开始编号，所以数组中最后一个元素的下标是<code>SIZE - 1</code>。也就是说，第10个元素是<code>score[9]</code>。通过测试条件<strong>index &lt; SIZE来控制循环中使用的最后一个index的值是SIZE - 1</strong>。</p>\n<p>第三，程序能重复显示刚读入的数据。这是很好的编程习惯，有助于确保程序处理的数据与期望相符。</p>\n<p>最后，注意该程序使用了3个独立的<code>for</code>循环。这是否必要？是否可以将其合并成一个循环？当然可以，读者可以动手试试，合并后的程序显得更加紧凑。但是，调整时要注意遵循模块化（modularity）的原则。模块化隐含的思想是：应该把程序划分为一些独立的单元，每个单元执行一个任务。这样做提高了程序的可读性。也许更重要的是，模块化使程序的不同部分彼此独立，方便后续更新或修改程序。在掌握如何使用函数后，可以把每个执行任务的单元放进函数中，提高程序的模块化。</p>\n<h2 id=\"使用函数返回值的循环示例\">使用函数返回值的循环示例<a href=\"#使用函数返回值的循环示例\" title=\"使用函数返回值的循环示例\"></a></h2><p>本章最后一个程序示例要用一个函数计算数的整数次幂（<code>math.h</code>库提供了一个更强大幂函数<code>pow()</code>，可以使用<strong>浮点指数</strong>）。该示例有3个主要任务：设计算法、在函数中表示算法并返回计算结果、提供一个测试函数的便利方法。</p>\n<p>首先分析算法。为简化函数，我们规定该函数只处理正整数的幂。这样，把n与n相乘p次便可计算n的p次幂。这里自然会用到循环。先把变量<code>pow</code>设置为1，然后将其反复乘以n：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=p;i++)</span><br><span class=\"line\"><span class=\"built_in\">pow</span>*=n;</span><br></pre></td></tr></table></figure><p>回忆一下，<code>*=</code>运算符把左侧的项乘以右侧的项，再把乘积赋给左侧的项。第1次循环后，<code>pow</code>的值是1乘以n，即n；第2次循环后，<code>pow</code>的值是上一次的值（n）乘以n，即n的平方；以此类推。这种情况使用<code>for</code>循环很合适，因为在执行循环之前已预先知道了迭代的次数（已知p）。</p>\n<p>现在算法已确定，接下来要决定使用何种数据类型。指数p是整数，其类型应该是<code>int</code>。为了扩大n及其幂的范围，n和<code>pow</code>的类型都是<code>double</code>。</p>\n<p>接下来，考虑如何把以上内容用函数来实现。要使用两个参数（分别是<code>double</code>类型和<code>int</code>类型）才能把所需的信息传递给函数，并指定求哪个数的多少次幂。而且，函数要返回一个值。如何把函数的返回值返回给主调函数？编写一个有返回值的函数，要完成以下内容：</p>\n<ol><li><p>定义函数时，确定函数的返回类型；</p>\n</li>\n<li><p>使用关键字return表明待返回的值。</p>\n</li>\n</ol><p>例如，可以这样写：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"keyword\">double</span> n,<span class=\"keyword\">int</span> p)</span> <span class=\"comment\">// 返回一个double类型的值</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> <span class=\"built_in\">pow</span>=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=p;i++)</span><br><span class=\"line\">    <span class=\"built_in\">pow</span>*=n;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">pow</span>; <span class=\"comment\">// 返回pow的值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>要声明函数的返回类型，在函数名前写出类型即可，就像声明一个变量那样。关键字 <code>return</code> 表明该函数将把它后面的值返回给主调函数。根据上面的代码，函数返回一个变量的值。<mark>返回值也可以是表达式的值</mark>，如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">2</span>*x+b;</span><br></pre></td></tr></table></figure><p>函数将计算表达式的值，并返回该值。在主调函数中，可以把返回值赋给另一个变量、作为表达式中的值、作为另一个函数的参数（如，<code>printf(&quot;%f&quot;,power(6.28,3)</code>），或者忽略它。</p>\n<p>现在，我们在一个程序中使用这个函数。要测试一个函数很简单，只需给它提供几个值，看它是如何响应的。这种情况下可以创建一个输入循环，选择 <code>while</code> 循环很合适。可以使用 <code>scanf()</code>函数一次读取两个值。如果成功读取两个值，<code>scanf()</code>则返回2，所以可以把<code>scanf()</code>的返回值与2作比较来控制循环。还要注意，必须先声明<code>power()</code>函数（即写出函数原型）才能在程序中使用它，就像先声明变量再使用一样。程序清单6.20演示了这个程序。</p>\n<p>程序清单6.20 powwer.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// power.c -- 计算数的整数幂</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"keyword\">double</span> n,<span class=\"keyword\">int</span> p)</span></span>; <span class=\"comment\">// ANSI函数原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x,xpow;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">exp</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter　a　number　and　the　positive　integer　power\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"　to　which\\n the　number　will　be　raised.　Enter　q\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"　to　quit.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf%d\"</span>,&amp;x,&amp;<span class=\"built_in\">exp</span>)==<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        xpow=power(x,<span class=\"built_in\">exp</span>);　<span class=\"comment\">// 函数调用</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.3g　to　the　power　%d　is　%.5g\\n\"</span>,　x,　<span class=\"built_in\">exp</span>,　xpow);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter　next　pair　of　numbers　or　q　to　quit.\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hope　you　enjoyed　this　power　trip　--　bye!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"keyword\">double</span> n,<span class=\"keyword\">int</span> p)</span>　 <span class=\"comment\">// 函数定义</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> <span class=\"built_in\">pow</span>=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=p;i++)</span><br><span class=\"line\">    <span class=\"built_in\">pow</span>*=n;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">pow</span>;　　　　　　　　　 <span class=\"comment\">// 返回pow的值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>运行该程序后，输出示例如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter　a　number　<span class=\"keyword\">and</span>　the　positive　integer　power　to　which</span><br><span class=\"line\">the　number　will　be　raised.　Enter　q　to　quit.</span><br><span class=\"line\"><span class=\"number\">1.2</span>　<span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">1.2</span>　to　the　power　<span class=\"number\">12</span>　is　<span class=\"number\">8.9161</span></span><br><span class=\"line\">Enter　next　pair　of　numbers　<span class=\"keyword\">or</span>　q　to　quit.</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"number\">2</span>　to　the　power　<span class=\"number\">16</span>　is　<span class=\"number\">65536</span></span><br><span class=\"line\">Enter　next　pair　of　numbers　<span class=\"keyword\">or</span>　q　to　quit.</span><br><span class=\"line\">q</span><br><span class=\"line\">Hope　you　enjoyed　<span class=\"keyword\">this</span>　power　trip　--　bye!</span><br></pre></td></tr></table></figure><h3 id=\"程序分析-1\">程序分析<a href=\"#程序分析-1\" title=\"程序分析\"></a></h3><p>该程序示例中的<code>main()</code>是一个驱动程序（driver），即被设计用来测试函数的小程序。</p>\n<p>该例的<code>while</code>循环是前面讨论过的一般形式。输入<code>1.2</code>  <code>12</code>，<code>scanf()</code>成功读取两值，并返回2，循环继续。因为<code>scanf()</code>跳过空白，所以可以像输出示例那样，分多行输入。但是输入q会使<code>scanf()</code>的返回值为0，因为q与<code>scanf()</code>中的转换说明<code>%1f</code>不匹配。<code>scanf()</code>将返回0，循环结束。类似地，输入2.8 q会使<code>scanf()</code>的返回值为1，循环也会结束。</p>\n<p>现在分析一下与函数相关的内容。<code>power()</code>函数在程序中出现了3次。首次出现是：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"keyword\">double</span> n,<span class=\"keyword\">int</span> p)</span></span>; <span class=\"comment\">// ANSI函数原型</span></span><br></pre></td></tr></table></figure><p>这是<code>power()</code>函数的原型，它声明程序将使用一个名为<code>power()</code>的函数。开头的关键字<code>double</code>表明<code>power()</code>函数返回一个<code>double</code>类型的值。编译器要知道<code>power()</code>函数返回值的类型，才能知道有多少字节的数据，以及如何解释它们。这就是为什么必须声明函数的原因。圆括号中的 <code>double n,int p</code>表示<code>power()</code>函数的两个参数。第1个参数应该是<code>double</code>类型的值，第2个参数应该是<code>int</code>类型的值。</p>\n<p>第2次出现是：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xpow=power(x,<span class=\"built_in\">exp</span>); <span class=\"comment\">// 函数调用</span></span><br></pre></td></tr></table></figure><p>程序调用<code>power()</code>，把两个值传递给它。该函数计算<code>x</code>的<code>exp</code>次幂，并把计算结果返回给主调函数。在主调函数中，返回值将被赋给变量<code>xpow</code>。</p>\n<p>第3次出现是：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"keyword\">double</span> n, <span class=\"keyword\">int</span> p)</span> <span class=\"comment\">// 函数定义</span></span></span><br></pre></td></tr></table></figure><p>这里，<code>power()</code>有两个形参，一个是<code>double</code>类型，一个是<code>int</code>类型，分别由变量<code>n</code>和变量<code>p</code>表示。注意，函数定义的末尾没有分号，而函数原型的末尾有分号。在函数头后面花括号中的内容，就是<code>power()</code>完成任务的代码。</p>\n<p><code>power()</code>函数用<code>for</code>循环计算n的p次幂，并把计算结果赋给<code>pow</code>，然后返回<code>pow</code>的值，如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">pow</span>; <span class=\"comment\">//返回pow的值</span></span><br></pre></td></tr></table></figure><h3 id=\"使用带返回值的函数\">使用带返回值的函数<a href=\"#使用带返回值的函数\" title=\"使用带返回值的函数\"></a></h3><p>声明函数、调用函数、定义函数、使用关键字<code>return</code>，都是定义和使用带返回值函数的基本要素。</p>\n<p>这里，读者可能有一些问题。例如，既然在使用函数返回值之前要声明函数，那么为什么在使用<code>scanf()</code>的返回值之前没有声明<code>scanf()</code>？为什么在定义中说明了<code>power()</code>的返回类型为<code>double</code>，还要单独声明这个函数？</p>\n<p>我们先回答第2 个问题。编译器在程序中首次遇到<code>power()</code>时，需要知道<code>power()</code>的返回类型。此时，编译器尚未执行到<code>power()</code>的定义，并不知道函数定义中的返回类型是<code>double</code>。因此，必须通过前置声明（forward declaration）预先说明函数的返回类型。前置声明告诉编译器，<code>power()</code>定义在别处，其返回类型为<code>double</code>。如果把<code>power()</code>函数的定义置于<code>main()</code>的文件顶部，就可以省略前置声明，因为编译器在执行到<code>main()</code>之前已经知道<code>power()</code>的所有信息。但是，这不是C的标准风格。<strong>因为<code>main()</code>通常只提供整个程序的框架，最好把 <code>main()</code>放在所有函数定义的前面。</strong>另外，<strong>通常把函数放在其他文件中，所以前置声明必不可少。</strong></p>\n<p>接下来，为什么不用声明 <code>scanf()</code>函数就可以使用它？其实，你已经声明了。<code>stdio.h</code> 头文件中包含了<code>scanf()</code>、<code>printf()</code>和其他I/O函数的原型。<code>scanf()</code>函数的原型表明，它返回的类型是<code>int</code>。</p>\n<h2 id=\"关键概念\">关键概念<a href=\"#关键概念\" title=\"关键概念\"></a></h2><p>循环是一个强大的编程工具。在创建循环时，要特别注意以下3个方面：</p>\n<ul><li>注意循环的测试条件要能使循环结束；</li>\n<li>确保循环测试中的值在首次使用之前已初始化；</li>\n<li>确保循环在每次迭代都更新测试的值。</li>\n</ul><p>C通过求值来处理测试条件，结果为<strong>0表示假</strong>，<strong>非0表示真</strong>。带关系运算符的表达式常用于循环测试，它们有些特殊。如果关系表达式为真，其值为1；如果为假，其值为0。这与新类型<code>_Bool</code>的值保持一致。</p>\n<p>数组由相邻的内存位置组成，只储存相同类型的数据。记住，数组元素的编号从 0 开始，所有数组最后一个元素的下标一定比元素数目少1。C编译器不会检查数组下标值是否有效，自己要多留心。</p>\n<p>使用函数涉及3个步骤：</p>\n<ol><li>通过函数原型声明函数；</li>\n<li>在程序中通过函数调用使用函数；</li>\n<li>定义函数。</li>\n</ol><p>函数原型是为了方便编译器查看程序中使用的函数是否正确，函数定义描述了函数如何工作。现代的编程习惯是把程序要素分为接口部分和实现部分，例如函数原型和函数定义。接口部分描述了如何使用一个特性，也就是函数原型所做的；实现部分描述了具体的行为，这正是函数定义所做的。</p>\n<h2 id=\"本章小结\">本章小结<a href=\"#本章小结\" title=\"本章小结\"></a></h2><p>本章的主题是程序控制。C语言为实现结构化的程序提供了许多工具。<code>while</code>语句和<code>for</code>语句提供了入口条件循环。<code>for</code>语句特别适用于需要<strong>初始化和更新的循环</strong>。使用逗号运算符可以在<code>for</code>循环中初始化和更新多个变量。有些场合也需要使用出口条件循环，C为此提供了<code>do while</code>语句。</p>\n<p>典型的while循环设计的伪代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*获得初值*/</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(值满足测试条件)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    处理该值</span><br><span class=\"line\">    获取下一个值</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*for循环也可以完成相同的任务：*/</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(获得初值; 值满足测试条件; 获得下一个值)</span><br><span class=\"line\">处理该值</span><br></pre></td></tr></table></figure><p>这些循环都使用测试条件来判断是否继续执行下一次迭代。一般而言，如果对测试表达式求值为非0，则继续执行循环；否则，结束循环。通常，测试条件都是关系表达式（由关系运算符和表达式构成）。表达式的关系为真，则表达式的值为1；如果关系为假，则表达式的值为0。C99新增了<code>_Bool</code>类型，该类型的变量只能储存1或0，分别表示真或假。</p>\n<p>除了关系运算符，本章还介绍了其他的组合赋值运算符，如<code>+=</code>或<code>*=</code>。这些运算符通过对其左侧运算对象执行算术运算来修改它的值。</p>\n<p>接下来还简单地介绍了数组。声明数组时，方括号中的值指明了该数组的元素个数。数组的第 1 个元素编号为0，第2个元素编号为1，以此类推。例如，以下声明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> hippos[<span class=\"number\">20</span>];</span><br></pre></td></tr></table></figure><p>创建了一个有20个元素的数组<code>hippos</code>，其元素从<code>hippos[0]</code>～<code>hippos[19]</code>。利用循环可以很方便地操控数组的下标。</p>\n<p>最后，本章演示了如何编写和使用带返回值的函数。</p>\n","prev":{"title":"疫情期间基层党员如何发挥先锋模范作用","link":"posts/91d5787c"},"next":{"title":"Step3 运算符、表达式和语句","link":"posts/d0061c8b"},"plink":"https://dxsummer.gitee.io/posts/287f677b/","toc":[{"id":"c控制语句：循环","title":"C控制语句：循环","index":"1"},{"id":"再探while循环","title":"再探while循环","index":"2","children":[{"id":"程序注释","title":"程序注释","index":"2.1"},{"id":"c风格读取循环","title":"C风格读取循环","index":"2.2"}]},{"id":"while语句","title":"while语句","index":"3","children":[{"id":"终止while循环","title":"终止while循环","index":"3.1"},{"id":"何时终止循环","title":"何时终止循环","index":"3.2"},{"id":"while：入口条件循环","title":"while：入口条件循环","index":"3.3"},{"id":"语法要点","title":"语法要点","index":"3.4"}]},{"id":"用关系运算符和表达式比较大小","title":"用关系运算符和表达式比较大小","index":"4","children":[{"id":"什么是真","title":"什么是真","index":"4.1"},{"id":"其他真值","title":"其他真值","index":"4.2"},{"id":"真值的问题","title":"真值的问题","index":"4.3"},{"id":"新的_bool类型","title":"新的_Bool类型","index":"4.4"},{"id":"优先级和关系运算符","title":"优先级和关系运算符","index":"4.5"}]},{"id":"不确定循环和计数循环","title":"不确定循环和计数循环","index":"5"},{"id":"for循环","title":"for循环","index":"6","children":[{"id":"利用for的灵活性","title":"利用for的灵活性","index":"6.1"}]},{"id":"其他赋值运算符：、-、、、","title":"其他赋值运算符：+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;","index":"7"},{"id":"逗号运算符","title":"逗号运算符","index":"8","children":[{"id":"当zeno遇到for循环","title":"当Zeno遇到for循环","index":"8.1"}]},{"id":"出口条件循环：do-while","title":"出口条件循环：do while","index":"9"},{"id":"如何选择循环","title":"如何选择循环","index":"10"},{"id":"嵌套循环","title":"嵌套循环","index":"11","children":[{"id":"程序分析","title":"程序分析","index":"11.1"},{"id":"嵌套变式","title":"嵌套变式","index":"11.2"}]},{"id":"数组简介","title":"数组简介","index":"12","children":[{"id":"在for循环中使用数组","title":"在for循环中使用数组","index":"12.1"}]},{"id":"使用函数返回值的循环示例","title":"使用函数返回值的循环示例","index":"13","children":[{"id":"程序分析-1","title":"程序分析","index":"13.1"},{"id":"使用带返回值的函数","title":"使用带返回值的函数","index":"13.2"}]},{"id":"关键概念","title":"关键概念","index":"14"},{"id":"本章小结","title":"本章小结","index":"15"}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/287f677b/\" title=\"Step4 C控制语句：循环\">https://dxsummer.gitee.io/posts/287f677b/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2020年6月3日","updated":"2020年6月8日"}}