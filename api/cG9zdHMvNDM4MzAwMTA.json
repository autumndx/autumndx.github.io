{"title":"绪论","date":"2020-09-19T06:29:02.000Z","date_formatted":{"ll":"2020年9月19日","L":"2020/09/19","MM-DD":"09-19"},"link":"posts/43830010","comments":true,"tags":["数据结构"],"categories":["数据结构"],"updated":"2020-09-19T08:00:49.846Z","content":"<h1 id=\"基本概念和术语\">基本概念和术语<a href=\"#基本概念和术语\" title=\"基本概念和术语\"></a></h1><h2 id=\"11-数据、数据元素、数据项、数据对象关系\">1.1 数据、数据元素、数据项、数据对象关系<a href=\"#11-数据、数据元素、数据项、数据对象关系\" title=\"1.1 数据、数据元素、数据项、数据对象关系\"></a></h2><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/3c1f7cf6a34796dc.png\" class=\"φcy\"></p>\n<p><strong>数据</strong>（data)：所有能输入到计算机中去的描述客观事物的符号</p>\n<p><strong>数据对象</strong>(Data Object)：相同特性数据元素的集合，是数据的一个子集</p>\n<p><strong>数据元素</strong>（data element）：<strong>数据的基本单位</strong>，也称结点（node）或记录（record）</p>\n<p><strong>数据项</strong>（data item）：有独立含义的<strong>数据最小单位</strong>，也称域(field)</p>\n<h2 id=\"12-数据结构\">1.2 数据结构<a href=\"#12-数据结构\" title=\"1.2 数据结构\"></a></h2><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/shujujiegoufenlei.png\" class=\"φcy\"></p>\n<h3 id=\"逻辑结构\">逻辑结构<a href=\"#逻辑结构\" title=\"逻辑结构\"></a></h3><h4 id=\"集合结构：\">集合结构：<a href=\"#集合结构：\" title=\"集合结构：\"></a></h4><p>数据元素同属一个集合，<strong>单个数据元素之间没有任何关系</strong>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/20171015213224082.png\" class=\"φcy\"></p>\n<h4 id=\"线性结构：\">线性结构：<a href=\"#线性结构：\" title=\"线性结构：\"></a></h4><p>类似于线性关系，也就是说，线性结构中的数据元素之间是<strong>一对一</strong>的关系。注意：重点在一对一。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/20171015213254478.png\" class=\"φcy\"></p>\n<h4 id=\"树形结构：\">树形结构：<a href=\"#树形结构：\" title=\"树形结构：\"></a></h4><p>树形结构中的数据元素之间存在<strong>一对多</strong>的关系。（各元素及元素关系所组成图形类似于树状图）。注意：关系为一对多。如下图所示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/20171015213325699.png\" class=\"φcy\"></p>\n<h4 id=\"图形结构：\">图形结构：<a href=\"#图形结构：\" title=\"图形结构：\"></a></h4><p>数据元素之间是<strong>多对多</strong>的关系。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/20171015213350420.png\" class=\"φcy\"></p>\n<h3 id=\"存储结构物理结构\">存储结构(物理结构)<a href=\"#存储结构物理结构\" title=\"存储结构(物理结构)\"></a></h3><p>物理结构又叫存储结构，分为四种种，顺序存储结构、链式存储结构、索引结构、散列结构。</p>\n<h4 id=\"顺序存储结构：\">顺序存储结构：<a href=\"#顺序存储结构：\" title=\"顺序存储结构：\"></a></h4><p>一段连续的内存空间。</p>\n<p>优点：随机访问</p>\n<p>缺点：插入删除效率低，大小固定</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/20171015213409499.png\" class=\"φcy\"></p>\n<h4 id=\"链式存储结构：\">链式存储结构：<a href=\"#链式存储结构：\" title=\"链式存储结构：\"></a></h4><p>不连续的内存空间，<strong>借助指针</strong></p>\n<p>优点：大小动态扩展，插入删除效率高</p>\n<p>缺点：不能随机访问。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/20171015213436248.png\" class=\"φcy\"></p>\n<h4 id=\"索引存储结构：\">索引存储结构：<a href=\"#索引存储结构：\" title=\"索引存储结构：\"></a></h4><p>为了方便查找，整体无序，但索引块之间有序，需要额外空间，存储索引表。</p>\n<p>优点：对顺序查找的一种改进，查找效率高</p>\n<p>缺点：需额外空间存储索引</p>\n<h4 id=\"散列存储结构：\">散列存储结构：<a href=\"#散列存储结构：\" title=\"散列存储结构：\"></a></h4><p>选取某个函数，数据元素根据函数计算存储位置</p>\n<p>可能存在多个数据元素存储在同一位置，引起地址冲</p>\n<p>优点：查找基于数据本身即可找到，查找效率高，存取效率高。</p>\n<p>缺点：存取随机，不便于顺序查找。</p>\n<h2 id=\"13-数据类型和抽象数据类型\">1.3 数据类型和抽象数据类型<a href=\"#13-数据类型和抽象数据类型\" title=\"1.3 数据类型和抽象数据类型\"></a></h2><h3 id=\"数据类型\"><strong>数据类型</strong><a href=\"#数据类型\" title=\"数据类型\"></a></h3><p>数据类型是一个值的集合和定义在此集合上的一组操作的总称。<br>例如 c语言中的<strong>整型</strong>，<strong>浮点型</strong>，他们的取值范围不同，进行运算时所遵循的规范也不同</p>\n<h3 id=\"抽象数据类型\"><strong>抽象数据类型</strong><a href=\"#抽象数据类型\" title=\"抽象数据类型\"></a></h3><p><mark>抽象数据类型=逻辑结构＋抽象运算</mark><br>抽象数据类型暂不考虑计算机的具体<strong>存储结构</strong>和<strong>运算</strong>的具体实现。<br>抽象数据类型实质上，就是在描述问题本身（与计算机无关）。<br><strong>目标</strong>：在不涉及具体的，和计算机系统相关的细节情况下，优先理解问题本身，在此基础上，实现用计算机求解问题的过程。</p>\n<p>我们可以认为<strong>抽象数据类型是包含着数据类型的</strong>，也就是说，抽象数据类型是一个更大的概念</p>\n<p>例如：<br>在定义一个学生类型的抽象数据类型时，学生对象既包含整型的年龄，身高，又包含<code>char</code>类型的姓名，这时，我们就可以用一个结构体定义这个学生类型</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADT &lt;抽象数据类型名&gt;&#123;</span><br><span class=\"line\">数据对象：&lt;数据对象的定义&gt;</span><br><span class=\"line\">数据关系：&lt;数据关系的定义&gt;</span><br><span class=\"line\">基本操作：&lt;基本操作的定义&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>这里，Student是一个抽象数据类型，而里面的<code>int</code>,<code>char</code>类型又是不同的数据类型</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> sno; <span class=\"comment\">//学号</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> age; <span class=\"comment\">//年龄</span></span><br><span class=\"line\">… …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>这里，<code>Student</code>是一个抽象数据类型，而里面的<code>int</code>,<code>char</code>类型又是不同的数据类型</p>\n<h2 id=\"14-算法和算法分析\">1.4 算法和算法分析<a href=\"#14-算法和算法分析\" title=\"1.4 算法和算法分析\"></a></h2><p><strong>算法</strong>：解决某类问题而规定的一个有限长的操作序列</p>\n<h3 id=\"算法的五个重要特征：\">算法的五个重要特征：<a href=\"#算法的五个重要特征：\" title=\"算法的五个重要特征：\"></a></h3><ul><li>有穷性</li>\n<li>确定性</li>\n<li>可行性</li>\n<li>有输入</li>\n<li>有输出</li>\n</ul><h3 id=\"算法优劣基本标准\">算法优劣基本标准<a href=\"#算法优劣基本标准\" title=\"算法优劣基本标准\"></a></h3><ul><li>正确性</li>\n<li>可读性</li>\n<li>健壮性</li>\n<li>高效性：包括<strong>时间</strong>和<strong>空间（占用存储合理）</strong>，</li>\n</ul><h3 id=\"算法效率的度量\">算法效率的度量<a href=\"#算法效率的度量\" title=\"算法效率的度量\"></a></h3><p>一条语句的重复执行次数称作<strong>语句频度</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++)\t\t\t\t\t\t<span class=\"comment\">//n+1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>;j&lt;=n;j++)\t\t\t\t\t<span class=\"comment\">//n*(n+1)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        C[i][j]=<span class=\"number\">0</span>;\t\t\t\t\t\t<span class=\"comment\">//n²</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(k=<span class=\"number\">1</span>;k&lt;=n;k++)\t\t\t\t<span class=\"comment\">//n²*（n+1）</span></span><br><span class=\"line\">            c[i][j]=c[i][j]+a[i][k]*b[k][j];\t<span class=\"comment\">//n³</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><p>所有语句频度之和<code>f(n)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(n)&#x3D;2n³+3n²+2n+1</span><br></pre></td></tr></table></figure><p>算法中基本语句重复执行的次数是问题规模n的某个函数<code>f(n)</code>,算法的<strong>时间量度</strong></p>\n<p>  它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐进时间复杂度简称<strong>时间复杂度</strong><br>  语句的<strong>频度</strong>指的是该语句重复执行的次数</p>\n<h3 id=\"算法的存储空间需求\">算法的存储空间需求<a href=\"#算法的存储空间需求\" title=\"算法的存储空间需求\"></a></h3><p>  如果所占空间量依赖于特定的输入，除特别指明外，均按最坏情况来分析</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T（n）&#x3D;O(f(n))</span><br></pre></td></tr></table></figure><p>  它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的<strong>渐进时间复杂度</strong> 简称<strong>时间复杂度</strong></p>\n<p>语句的<strong>频度</strong>指的是该语句重复执行的次数</p>\n<h3 id=\"空间复杂度\">空间复杂度<a href=\"#空间复杂度\" title=\"空间复杂度\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S（n)&#x3D;O(f(n))</span><br></pre></td></tr></table></figure><blockquote>\n<p>数组逆序，将一维数组a中的n个数逆序存放到原数组中</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">算法1</span><br><span class=\"line\">for(i&#x3D;0;i&lt;n&#x2F;2;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tt&#x3D;a[i];</span><br><span class=\"line\">\ta[i]&#x3D;a[n-i-1];</span><br><span class=\"line\">\ta[n-i-1]&#x3D;t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>算法1 需要借助<code>t</code>，与问题规模<code>n</code>大小无关，所以空间复杂度为<code>O（1）</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">算法2</span><br><span class=\"line\">for(i&#x3D;0;i&lt;n;i++)</span><br><span class=\"line\">\tb[i]&#x3D;a[n-i-1];</span><br><span class=\"line\">for(i&#x3D;0;i&lt;n;i++)</span><br><span class=\"line\">\ta[i]&#x3D;b[i];</span><br></pre></td></tr></table></figure><p>算法2 借助大小为<code>n</code>的辅助数组<code>b</code>，空间复杂度为<code>O(n)</code></p>\n","prev":{"title":"HTML5","link":"posts/98f3a6d9"},"next":{"title":"Eclipse使用手册","link":"posts/4865d579"},"plink":"https://dxsummer.gitee.io/posts/43830010/","toc":[{"id":"基本概念和术语","title":"基本概念和术语","index":"1","children":[{"id":"11-数据、数据元素、数据项、数据对象关系","title":"1.1 数据、数据元素、数据项、数据对象关系","index":"1.1"},{"id":"12-数据结构","title":"1.2 数据结构","index":"1.2","children":[{"id":"逻辑结构","title":"逻辑结构","index":"1.2.1","children":[{"id":"集合结构：","title":"集合结构：","index":"1.2.1.1"},{"id":"线性结构：","title":"线性结构：","index":"1.2.1.2"},{"id":"树形结构：","title":"树形结构：","index":"1.2.1.3"},{"id":"图形结构：","title":"图形结构：","index":"1.2.1.4"}]},{"id":"存储结构物理结构","title":"存储结构(物理结构)","index":"1.2.2","children":[{"id":"顺序存储结构：","title":"顺序存储结构：","index":"1.2.2.1"},{"id":"链式存储结构：","title":"链式存储结构：","index":"1.2.2.2"},{"id":"索引存储结构：","title":"索引存储结构：","index":"1.2.2.3"},{"id":"散列存储结构：","title":"散列存储结构：","index":"1.2.2.4"}]}]},{"id":"13-数据类型和抽象数据类型","title":"1.3 数据类型和抽象数据类型","index":"1.3","children":[{"id":"数据类型","title":"数据类型","index":"1.3.1"},{"id":"抽象数据类型","title":"抽象数据类型","index":"1.3.2"}]},{"id":"14-算法和算法分析","title":"1.4 算法和算法分析","index":"1.4","children":[{"id":"算法的五个重要特征：","title":"算法的五个重要特征：","index":"1.4.1"},{"id":"算法优劣基本标准","title":"算法优劣基本标准","index":"1.4.2"},{"id":"算法效率的度量","title":"算法效率的度量","index":"1.4.3"},{"id":"算法的存储空间需求","title":"算法的存储空间需求","index":"1.4.4"},{"id":"空间复杂度","title":"空间复杂度","index":"1.4.5"}]}]}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/43830010/\" title=\"绪论\">https://dxsummer.gitee.io/posts/43830010/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2020年9月19日","updated":"2020年9月19日"}}