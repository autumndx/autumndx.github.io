{"title":"Step5 C控制语句：分支和跳转","date":"2020-06-06T02:30:50.000Z","date_formatted":{"ll":"2020年6月6日","L":"2020/06/06","MM-DD":"06-06"},"link":"posts/3e5d0fae","comments":true,"tags":["C语言基础"],"categories":["C语言"],"updated":"2020-06-08T01:44:18.717Z","content":"<p>本章介绍以下内容：</p>\n<p>关键字：<code>if</code>、<code>else</code>、<code>switch</code>、<code>continue</code>、<code>break</code>、<code>case</code>、<code>default</code>、<code>goto</code></p>\n<p>运算符：<code>&amp;&amp;</code>、<code>||</code>、<code>?</code>、<code>:</code></p>\n<p>函数：<code>getchar()</code>、<code>putchar()</code>、<code>ctype.h</code>系列</p>\n<p>如何使用<code>if</code>和<code>if else</code>语句，如何嵌套它们</p>\n<p>在更复杂的测试表达式中用逻辑运算符组合关系表达式</p>\n<p>C的条件运算符</p>\n<p><strong>switch语句</strong></p>\n<p><strong>break</strong>、<strong>continue</strong>和<strong>goto语句</strong></p>\n<p>使用C的字符I/O函数：<code>getchar()</code>和<code>putchar()</code></p>\n<p><code>ctype.h</code>头文件提供的字符分析函数系列</p>\n<p>随着越来越熟悉C，可以尝试用C程序解决一些更复杂的问题。这时候，需要一些方法来控制和组织程序，为此C提供了一些工具。前面已经学过如何在程序中用循环重复执行任务。本章将介绍分支结构（如， <code>if</code>和<code>switch</code>），让程序根据测试条件执行相应的行为。另外，还将介绍C语言的逻辑运算符，使用逻辑运算符能在 <code>while</code> 或 <code>if</code> 的条件中测试更多关系。此外，本章还将介绍跳转语句，它将程序流转换到程序的其他部分。学完本章后，读者就可以设计按自己期望方式运行的程序。</p>\n<h2 id=\"if语句\">if语句<a href=\"#if语句\" title=\"if语句\"></a></h2><p>我们从一个有<code>if</code>语句的简单示例开始学习，请看程序清单7.1。该程序读取一列数据，每个数据都表示每日的最低温度（℃），然后打印统计的总天数和最低温度在0℃以下的天数占总天数的百分比。程序中的循环通过<code>scanf</code>()读入温度值。<code>while</code>循环每迭代一次，就递增计数器增加天数，其中的<code>if</code>语句负责判断<strong>0℃</strong>以下的温度并单独统计相应的天数。</p>\n<p>程序清单7.1 colddays.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// colddays.c -- 找出0℃以下的天数占总天数的百分比</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> FREEZING=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> temperature;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cold_days=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> all_days=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter the list of daily low temperatures.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Use Celsius, and enter q to quit.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>,&amp;temperature)==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        all_days++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temperature&lt;FREEZING)</span><br><span class=\"line\">        cold_days++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (all_days!=<span class=\"number\">0</span>)</span><br><span class=\"line\">   \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d days total: %.1f%% were below freezing.\\n\"</span>,</span><br><span class=\"line\">  \t\tall_days,<span class=\"number\">100.0</span>*(<span class=\"keyword\">float</span>)cold_days/all_days);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (all_days==<span class=\"number\">0</span>)</span><br><span class=\"line\"> \t   <span class=\"built_in\">printf</span>(<span class=\"string\">\"No data entered!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>下面是该程序的输出示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter the <span class=\"built_in\">list</span> of daily low temperatures.</span><br><span class=\"line\">Use Celsius, <span class=\"keyword\">and</span> enter q to quit.</span><br><span class=\"line\"><span class=\"number\">12</span> <span class=\"number\">5</span> <span class=\"number\">-2.5</span> <span class=\"number\">0</span> <span class=\"number\">6</span> <span class=\"number\">8</span> <span class=\"number\">-3</span> <span class=\"number\">-10</span> <span class=\"number\">5</span> <span class=\"number\">10</span> q</span><br><span class=\"line\"><span class=\"number\">10</span> days total: <span class=\"number\">30.0</span>% were below freezing.</span><br></pre></td></tr></table></figure><p><code>while</code>循环的测试条件利用<code>scanf()</code>的返回值来结束循环，因为<code>scanf()</code>在读到非数字字符时会返回<code>0</code>。<code>temperature</code>的类型是<code>float</code>而不是<code>int</code>，这样程序既可以接受-2.5这样的值，也可以接受8这样的值。</p>\n<p><code>while</code>循环中的新语句如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(temperature&lt;FREEZING)</span><br><span class=\"line\">cold_days++;</span><br></pre></td></tr></table></figure><p><code>if</code> 语句指示计算机，如果刚读取的值（remperature）小于 0，就把 <code>cold_days</code> 递增 1；如果temperature不小于0，就跳过<code>cold_days++;</code>语句，<code>while</code>循环继续读取下一个温度值。</p>\n<p>接着，该程序又使用了两次if语句控制程序的输出。如果有数据，就打印结果；如果没有数据，就打印一条消息（稍后将介绍一种更好的方法来处理这种情况）。</p>\n<p>为避免整数除法，该程序示例把计算后的百分比强制转换为 <code>float</code>类型。其实，也不必使用强制类型转换，因为在表达式<code>100.0 * cold_days / all_days</code>中，将首先对表达式<code>100.0 * cold_days</code>求值，由于C的自动转换类型规则，乘积会被强制转换成浮点数。但是，使用强制类型转换可以明确表达转换类型的意图，保护程序免受不同版本编译器的影响。<code>if</code>语句被称为<strong>分支语句</strong>（branching statement）或<strong>选择语句</strong>（selection statement），因为它相当于一个交叉点，程序要在两条分支中选择一条执行。if语句的通用形式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(expression)</span><br><span class=\"line\">statement</span><br></pre></td></tr></table></figure><p>如果对<code>expression</code>求值为真（非0），则执行<code>statement</code>；否则，跳过<code>statement</code>。与<code>while</code>循环一样，<code>statement</code>可以是一条简单语句或复合语句。<code>if</code>语句的结构和<code>while</code>语句很相似，它们的主要区别是：如果满足条件可执行的话，if语句只能测试和执行一次，而while语句可以测试和执行多次。</p>\n<p>通常，<code>expression</code> 是<strong>关系表达式</strong>，即比较两个量的大小（如，表达式 x &gt; y 或 c == 6）。如果<code>expression</code>为真（即x大于y，或c == 6），则执行<code>statement</code>。否则，忽略<code>statement</code>。概括地说，可以使用任意表达式，表达式的值为0则为假。</p>\n<p><code>statement</code>部分可以是一条简单语句，如本例所示，或者是一条用花括号括起来的复合语句（或块）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (score &gt; big)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Jackpot!\\n\"</span>);　<span class=\"comment\">// 简单语句</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (joe &gt; ron)</span><br><span class=\"line\">&#123;　　　　　　　　　　　　　 <span class=\"comment\">// 复合语句</span></span><br><span class=\"line\">    joecash++;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"You lose, Ron.\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>注意，即使if语句由复合语句构成，整个if语句仍被视为一条语句。</p>\n<h2 id=\"if-else语句\">if else语句<a href=\"#if-else语句\" title=\"if else语句\"></a></h2><p>简单形式的if语句可以让程序选择执行一条语句，或者跳过这条语句。C还提供了if else形式，可以在两条语句之间作选择。我们用if else形式修正程序清单7.1中的程序段。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (all_days != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d days total: %.1f%% were below freezing.\\n\"</span>,</span><br><span class=\"line\">\tall_days, <span class=\"number\">100.0</span> * (<span class=\"keyword\">float</span>) cold_days / all_days);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (all_days == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"No data entered!\\n\"</span>);</span><br></pre></td></tr></table></figure><p>如果程序发现<code>all_days</code>不等于0，那么它应该知道另一种情况一定是<code>all_days</code>等于0。用<code>if else</code>形式只需测试一次。重写上面的程序段如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (all_days!= <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d days total: %.1f%% were below freezing.\\n\"</span>,</span><br><span class=\"line\">    all_days, <span class=\"number\">100.0</span> * (<span class=\"keyword\">float</span>) cold_days / all_days);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"No data entered!\\n\"</span>);</span><br></pre></td></tr></table></figure><p>如果if语句的测试表达式为真，就打印温度数据；如果为假，就打印警告消息。</p>\n<p>注意，<code>if else</code>语句的通用形式是：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( expression )</span><br><span class=\"line\">statement1</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">statement2</span><br></pre></td></tr></table></figure><p>如果<code>expression</code>为真（非0），则执行<code>statement1</code>；如果<code>expression</code>为假或0，则执行else后面的<code>statement2</code>。<code>statement1</code>和<code>statement2</code>可以是一条简单语句或复合语句。C并不要求一定要缩进，但这是标准风格。缩进让根据测试条件的求值结果来判断执行哪部分语句一目了然。</p>\n<p>如果要在<code>if</code>和<code>else</code>之间执行多条语句，必须用花括号把这些语句括起来成为一个块。下面的代码结构违反了C语法，因为在if和else之间只允许有一条语句（简单语句或复合语句）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Incrementing x:\\n\"</span>);</span><br><span class=\"line\">x++;</span><br><span class=\"line\"><span class=\"keyword\">else</span>　　　<span class=\"comment\">// 将产生一个错误</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"x &lt;= 0 \\n\"</span>);</span><br></pre></td></tr></table></figure><p>编译器把<code>printf()</code>语句视为<code>if</code>语句的一部分，而把<code>x++;</code>看作一条单独的语句，它不是<code>if</code>语句的一部分。然后，编译器发现<code>else</code>并没有所属的<code>if</code>，这是错误的。上面的代码应该这样写：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Incrementing x:\\n\"</span>);</span><br><span class=\"line\">    x++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"x &lt;= 0 \\n\"</span>);</span><br></pre></td></tr></table></figure><p><code>if</code>语句用于选择是否执行一个行为，而<code>else if</code>语句用于在两个行为之间选择。图7.1比较了这两种语句。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/inside/if语句和ifelse语句.png\" class=\"φcy\"></p>\n<h3 id=\"另一个示例：介绍getchar和putchar\">另一个示例：介绍getchar()和putchar()<a href=\"#另一个示例：介绍getchar和putchar\" title=\"另一个示例：介绍getchar()和putchar()\"></a></h3><p>到目前为止，学过的大多数程序示例都要求输入数值。接下来，我们看看输入字符的示例。相信读者已经熟悉了如何用 <code>scanf()</code>和 <code>printf()</code>根据<code>%c</code> 转换说明读写字符，我们马上要讲解的示例中要用到一对字符输入/输出函数：<code>getchar()</code>和<code>putchar()</code>。</p>\n<p><code>getchar()</code>函数不带任何参数，它从输入队列中返回下一个字符。例如，下面的语句读取下一个字符输入，并把该字符的值赋给变量ch：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch = getchar();</span><br></pre></td></tr></table></figure><p>该语句与下面的语句效果相同：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%c\"</span>, &amp;ch);</span><br></pre></td></tr></table></figure><p><code>putchar()</code>函数打印它的参数。例如，下面的语句把之前赋给ch的值作为字符打印出来：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">putchar</span>(ch);</span><br></pre></td></tr></table></figure><p>该语句与下面的语句效果相同：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, ch);</span><br></pre></td></tr></table></figure><p>由于这些函数只处理字符，所以它们比更通用的<code>scanf()</code>和<code>printf()</code>函数更快、更简洁。而且，注意 <code>getchar()</code>和 <code>putchar()</code>不需要转换说明，因为它们只处理字符。这两个函数通常定义在 <code>stdio.h</code>头文件中（而且，它们通常是预处理宏，而不是真正的函数，第16章会讨论类似函数的宏）。</p>\n<p>接下来，我们编写一个程序来说明这两个函数是如何工作的。该程序把一行输入重新打印出来，但是每个非空格都被替换成原字符在ASCII序列中的下一个字符，空格不变。这一过程可描述为“如果字符是空白，原样打印；否则，打印原字符在ASCII序列中的下一个字符”。</p>\n<p>C代码看上去和上面的描述很相似，请看程序清单7.2。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">7.2</span> cypher1.c程序</span><br><span class=\"line\"><span class=\"comment\">// cypher1.c -- 更改输入，空格不变</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SPACE <span class=\"meta-string\">' '</span>　　　　　　　 <span class=\"comment\">// SPACE表示单引号-空格-单引号</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    ch = getchar();　　　　　　 <span class=\"comment\">// 读取一个字符</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch != <span class=\"string\">'\\n'</span>)　　　　 <span class=\"comment\">// 当一行未结束时</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == SPACE)　　　 <span class=\"comment\">// 留下空格</span></span><br><span class=\"line\">     \t   <span class=\"built_in\">putchar</span>(ch);　　　 <span class=\"comment\">// 该字符不变</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">     \t   <span class=\"built_in\">putchar</span>(ch + <span class=\"number\">1</span>);　 <span class=\"comment\">// 改变其他字符</span></span><br><span class=\"line\">        ch = getchar();　　　　<span class=\"comment\">// 获取下一个字符</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(ch);　　　　　　　　<span class=\"comment\">// 打印换行符</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>（如果编译器警告因转换可能导致数据丢失，不用担心。第8章在讲到EOF时再解释。）</p>\n<p>下面是该程序的输入示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CALL ME HAL.</span><br><span class=\"line\">DBMM NF IBM/</span><br></pre></td></tr></table></figure><p>把程序清单7.1中的循环和该例中的循环作比较。前者使用<code>scanf()</code>返回的状态值判断是否结束循环，而后者使用输入项的值来判断是否结束循环。这使得两程序所用的循环结构略有不同：程序清单7.1中在循环前面有一条“读取语句”，程序清单7.2中在每次迭代的末尾有一条“读取语句”。不过，C的语法比较灵活，读者也可以模仿程序清单7.1，把读取和测试合并成一个表达式。也就是说，可以把这种形式的循环：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch = getchar();　　　 <span class=\"comment\">/* 读取一个字符 */</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (ch != <span class=\"string\">'\\n'</span>)　　<span class=\"comment\">/* 当一行未结束时 */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...　　　　　　　<span class=\"comment\">/* 处理字符 */</span></span><br><span class=\"line\">    ch = getchar();　 <span class=\"comment\">/* 获取下一个字符 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>替换成下面形式的循环：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ((ch = getchar()) != <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t...　　　　　　　<span class=\"comment\">/* 处理字符 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>关键的一行代码是：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ((ch = getchar()) != <span class=\"string\">'\\n'</span>)</span><br></pre></td></tr></table></figure><p>这体现了C特有的编程风格——把两个行为合并成一个表达式。C对代码的格式要求宽松，这样写让其中的每个行为更加清晰：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (</span><br><span class=\"line\">(ch = getchar())　　　　　　 <span class=\"comment\">// 给ch赋一个值</span></span><br><span class=\"line\">!= <span class=\"string\">'\\n'</span>)　 <span class=\"comment\">// 把ch和\\n作比较</span></span><br></pre></td></tr></table></figure><p>以上执行的行为是赋值给<code>ch</code>和把<code>ch</code>的值与换行符作比较。表达式<code>ch = getchar()</code>两侧的圆括号使之成为<code>!=</code>运算符的左侧运算对象。要对该表达式求值，必须先调用<code>getchar()</code>函数，然后把该函数的返回值赋给 <code>ch</code>。因为赋值表达式的值是赋值运算符左侧运算对象的值，所以 <code>ch = getchar()</code>的值就是 <code>ch</code> 的新值，因此，读取<code>ch</code>的值后，测试条件相当于是<code>ch != &#39;\\n&#39;</code>（即，ch不是换行符）。</p>\n<p>这种独特的写法在C编程中很常见，应该多熟悉它。还要记住合理使用圆括号组合子表达式。上面例子中的圆括号都必不可少。假设省略<code>ch = getchar()</code>两侧的圆括号：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (ch = getchar() != <span class=\"string\">'\\n'</span>)</span><br></pre></td></tr></table></figure><p><code>!=</code>运算符的优先级比<code>=</code>高，所以先对表达式<code>getchar() != &#39;\\n&#39;</code>求值。由于这是关系表达式，所以其值不是1就是0（真或假）。然后，把该值赋给<code>ch</code>。省略圆括号意味着赋给<code>ch</code>的值是0或1，而不是 <code>getchar()</code>的返回值。这不是我们的初衷。</p>\n<p>下面的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">putchar</span>(ch + <span class=\"number\">1</span>); <span class=\"comment\">/* 改变其他字符 */</span></span><br></pre></td></tr></table></figure><p>再次演示了字符实际上是作为整数储存的。为方便计算，表达式<code>ch + 1</code>中的<code>ch</code>被转换成<code>int</code>类型，然后<code>int</code>类型的计算结果被传递给接受一个<code>int</code>类型参数的<code>putchar()</code>，该函数只根据最后一个字节确定显示哪个字符。</p>\n<h3 id=\"ctypeh系列的字符函数\">ctype.h系列的字符函数<a href=\"#ctypeh系列的字符函数\" title=\"ctype.h系列的字符函数\"></a></h3><p>注意到程序清单7.2的输出中，最后输入的点号（<code>.</code>）被转换成斜杠（<code>/</code>），这是因为斜杠字符对应的ASCII码比点号的 ASCII 码多 1。如果程序只转换字母，保留所有的非字母字符（不只是空格）会更好。本章稍后讨论的逻辑运算符可用来测试字符是否不是空格、不是逗号等，但是列出所有的可能性太繁琐。C 有一系列<strong>专门处理字符的函数</strong>，<code>ctype.h</code>头文件包含了这些函数的原型。这些函数接受一个字符作为参数，如果该字符属于某特殊的类别，就返回一个非零值（真）；否则，返回0（假）。例如，如果<code>isalpha()</code><strong>函数的参数是一个字母，则返回一个非零值</strong>。程序清单7.3在程序清单7.2的基础上使用了这个函数，还使用了刚才精简后的循环。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">7.3</span> cypher2.c程序</span><br><span class=\"line\"><span class=\"comment\">// cypher2.c -- 替换输入的字母，非字母字符保持不变</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctype.h&gt;　　　　　　　// 包含isalpha()的函数原型</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((ch = getchar()) != <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isalpha</span>(ch))　　　 <span class=\"comment\">// 如果是一个字符，</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">putchar</span>(ch + <span class=\"number\">1</span>);　 <span class=\"comment\">// 显示该字符的下一个字符</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>　　　　　　　　　　<span class=\"comment\">// 否则，</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">putchar</span>(ch);　　　 <span class=\"comment\">// 原样显示</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(ch);　　　　　　　 <span class=\"comment\">// 显示换行符</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>下面是该程序的一个输出示例，注意大小写字母都被替换了，除了空格和标点符号：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Look! It<span class=\"number\">'</span>s a programmer!</span><br><span class=\"line\">Mppl! Ju't b qsphsbnnfs!</span><br></pre></td></tr></table></figure><p>表7.1和表7.2列出了<code>ctype.h</code>头文件中的一些函数。有些函数涉及本地化，指的是为适应特定区域的使用习惯修改或扩展 C 基本用法的工具（例如，许多国家在书写小数点时，用逗号代替点号，于是特殊的本地化可以指定C编译器使用逗号以相同的方式输出浮点数，这样123.45可以显示为123,45）。注意，字符映射函数不会修改原始的参数，这些函数只会返回已修改的值。也就是说，下面的语句不改变ch的值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tolower</span>(ch); <span class=\"comment\">// 不影响ch的值</span></span><br></pre></td></tr></table></figure><p>这样做才会改变ch的值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch = <span class=\"built_in\">tolower</span>(ch); <span class=\"comment\">// 把ch转换成小写字母</span></span><br></pre></td></tr></table></figure><blockquote>\n<p>ctype.h头文件中的字符测试函数</p>\n</blockquote>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/inside/ctype.h头文件中的字符测试函数.png\" class=\"φcy\"></p>\n<blockquote>\n<p>ctype.h头文件中的字符映射函数</p>\n</blockquote>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/inside/ctype.h头文件中的字符映射函数.png\" class=\"φcy\"></p>\n<h3 id=\"多重选择else-if\">多重选择else if<a href=\"#多重选择else-if\" title=\"多重选择else if\"></a></h3><p>现实生活中我们经常有多种选择。在程序中也可以用<code>else if</code>扩展<code>if else</code>结构模拟这种情况。来看一个特殊的例子。电力公司通常根据客户的总用电量来决定电费。下面是某电力公司的电费清单，单位是千瓦时（kWh）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首 <span class=\"number\">360</span>kWh:　　　　 $<span class=\"number\">0.13230</span>/kWh</span><br><span class=\"line\">续 <span class=\"number\">108</span>kWh:　　　　 $<span class=\"number\">0.15040</span>/kWh</span><br><span class=\"line\">续 <span class=\"number\">252</span>kWh:　　　　 $<span class=\"number\">0.30025</span>/kWh</span><br><span class=\"line\">超过 <span class=\"number\">720</span>kWh:　　　 $<span class=\"number\">0.34025</span>/kWh</span><br></pre></td></tr></table></figure><p>如果对用电管理感兴趣，可以编写一个计算电费的程序。程序清单7.4是完成这一任务的第1步。</p>\n<p>程序清单7.4 electric.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// electric.c -- 计算电费</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RATE1　 0.13230　　　　　　　<span class=\"comment\">// 首次使用 360 kwh 的费率</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RATE2　 0.15040　　　　　　　<span class=\"comment\">// 接着再使用 108 kwh 的费率</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RATE3　 0.30025　　　　　　　<span class=\"comment\">// 接着再使用 252 kwh 的费率</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RATE4　 0.34025　　　　　　　<span class=\"comment\">// 使用超过 720kwh 的费率</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BREAK1　360.0　　　　　　　　<span class=\"comment\">// 费率的第1个分界点</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BREAK2　468.0　　　　　　　　<span class=\"comment\">// 费率的第2个分界点</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BREAK3　720.0　　　　　　　　<span class=\"comment\">// 费率的第3个分界点</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BASE1　(RATE1 * BREAK1)</span></span><br><span class=\"line\"><span class=\"comment\">// 使用360kwh的费用</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BASE2 (BASE1 + (RATE2 * (BREAK2 - BREAK1)))</span></span><br><span class=\"line\"><span class=\"comment\">// 使用468kwh的费用</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BASE3　(BASE1 + BASE2 + (RATE3 *(BREAK3 - BREAK2)))</span></span><br><span class=\"line\"><span class=\"comment\">// 使用720kwh的费用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> kwh;　　　　　　　　　　 <span class=\"comment\">// 使用的千瓦时</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> bill;　　　　　　　　　　<span class=\"comment\">// 电费</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter the kwh used.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>, &amp;kwh);　　　　　　 <span class=\"comment\">// %lf对应double类型</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (kwh &lt;= BREAK1)</span><br><span class=\"line\">\t\tbill = RATE1 * kwh;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (kwh &lt;= BREAK2)　　　　 <span class=\"comment\">// 360～468 kwh</span></span><br><span class=\"line\">\t\tbill = BASE1 + (RATE2 * (kwh - BREAK1));</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (kwh &lt;= BREAK3)　　　　 <span class=\"comment\">// 468～720 kwh</span></span><br><span class=\"line\">\t\tbill = BASE2 + (RATE3 * (kwh - BREAK2));</span><br><span class=\"line\">    <span class=\"keyword\">else</span>　　　　　　　　　　　　　　<span class=\"comment\">// 超过 720 kwh</span></span><br><span class=\"line\">\t\tbill = BASE3 + (RATE4 * (kwh - BREAK3));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"The charge for %.1f kwh is $%1.2f.\\n\"</span>, kwh, bill);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出示例如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please enter the kwh used.</span><br><span class=\"line\"><span class=\"number\">580</span></span><br><span class=\"line\">The charge <span class=\"keyword\">for</span> <span class=\"number\">580.0</span> kwh is $<span class=\"number\">97.50</span>.</span><br></pre></td></tr></table></figure><p>程序清单 7.4 用符号常量表示不同的费率和费率分界点，以便把常量统一放在一处。这样，电力公司在更改费率以及费率分界点时，更新数据非常方便。<code>BASE1</code>和<code>BASE2</code>根据费率和费率分界点来表示。一旦费率或分界点发生了变化，它们也会自动更新。预处理器是不进行计算的。程序中出现<code>BASE1</code>的地方都会被替换成 <code>0.13230*360.0</code>。不用担心，编译器会对该表达式求值得到一个数值（47.628），以便最终的程序代码使用的是<strong>47.628</strong>而不是一个计算式。</p>\n<p>程序流简单明了。该程序根据<code>kwh</code>的值在3个公式之间选择一个。特别要注意的是，如果<code>kwh</code>大于或等于<code>360</code>，程序只会到达第1个<code>else</code>。因此，<code>else if(kwh&lt;=BREAK2)</code>这行相当于要求<code>kwh</code>在<strong>360～482</strong>之间，如程序注释所示。类似地，只有当<code>kwh</code>的值超过<code>720</code>时，才会执行最后的<code>else</code>。最后，注意<code>BASE1</code>、<code>BASE2</code>和<code>BASE3</code>分别代表<strong>360</strong>、<strong>468</strong>和<strong>720</strong>千瓦时的总费用。因此，当电量超过这些值时，只需要加上额外的费用即可。</p>\n<p>实际上，<code>else if</code> 是已学过的 <code>if else</code> 语句的变式。例如，该程序的核心部分只不过是下面代码的另一种写法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (kwh &lt;= BREAK1)</span><br><span class=\"line\">\tbill=RATE1*kwh;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (kwh &lt;= BREAK2)　　　　 <span class=\"comment\">// 360～468 kwh</span></span><br><span class=\"line\">\t\tbill = BASE1 + (RATE2 * (kwh - BREAK1));</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (kwh &lt;= BREAK3)　　 <span class=\"comment\">// 468～720 kwh</span></span><br><span class=\"line\">\t\t\tbill = BASE2 + (RATE3 * (kwh - BREAK2));</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>　　　　　　　　　　<span class=\"comment\">// 超过720 kwh</span></span><br><span class=\"line\">\t\t\tbill = BASE3 + (RATE4 * (kwh - BREAK3));</span><br></pre></td></tr></table></figure><p>也就是说，该程序由一个<code>if else</code>语句组成，<code>else</code>部分包含另一个<code>if else</code>语句，该<code>if else</code>语句的<code>else</code>部分又包含另一个<code>if else</code>语句。第2个<code>if else</code>语句嵌套在第 1个<code>if else</code>语句中，第3个<code>if else</code>语句嵌套在第2个<code>if else</code>语句中。回忆一下，整个<code>if else</code>语句被视为一条语句，因此不必把嵌套的<code>if else</code>语句用花括号括起来。当然，花括号可以更清楚地表明这种特殊格式的含义。</p>\n<p>这两种形式完全等价。唯一不同的是使用空格和换行的位置不同，不过编译器会忽略这些。尽管如此，第1种形式还是好些，因为这种形式更清楚地显示了有4种选择。在浏览程序时，这种形式让读者更容易看清楚各项选择。在需要时要缩进嵌套的部分，例如，必须测试两个单独的量时。本例中，仅在夏季对用电量超过720kWh的用户加收10%的电费，就属于这种情况。</p>\n<p>可以把多个<code>else if</code>语句连成一串使用，如下所示（当然，要在编译器的限制范围内）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (score &lt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">\tbonus = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &lt; <span class=\"number\">1500</span>)</span><br><span class=\"line\">\tbonus = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &lt; <span class=\"number\">2000</span>)</span><br><span class=\"line\">\tbonus = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &lt; <span class=\"number\">2500</span>)</span><br><span class=\"line\">\tbonus = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tbonus = <span class=\"number\">6</span>;</span><br></pre></td></tr></table></figure><p>（这可能是一个游戏程序的一部分，<code>bonus</code>表示下一局游戏获得的光子炸弹或补给。）</p>\n<p>对于编译器的限制范围，C99标准要求编译器最少支持127层套嵌。</p>\n<h3 id=\"else与if配对\">else与if配对<a href=\"#else与if配对\" title=\"else与if配对\"></a></h3><p>如果程序中有许多if和else，编译器如何知道哪个if对应哪个else？例如，考虑下面的程序段：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (number &gt; <span class=\"number\">6</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (number &lt; <span class=\"number\">12</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"You're close!\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Sorry, you lose a turn!\\n\"</span>);</span><br></pre></td></tr></table></figure><p>何时打印<code>Sorry, you lose a turn!？</code>当<code>number</code>小于或等于6时，还是<code>number</code>大于12时？换言之，<code>else</code>与第1个<code>if</code>还是第2个<code>if</code>匹配？答案是，<code>else</code>与第2个<code>if</code>匹配。也就是说，输入的数字和匹配的响应如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数字　　　 响应</span><br><span class=\"line\"><span class=\"number\">5</span>　　　　 None</span><br><span class=\"line\"><span class=\"number\">10</span>　　　　You’re <span class=\"built_in\">close</span>!</span><br><span class=\"line\"><span class=\"number\">15</span>　　　　Sorry, you lose a <span class=\"built_in\">turn</span>!</span><br></pre></td></tr></table></figure><p>规则是，如果没有花括号，<code>else</code>与离它最近的<code>if</code>匹配，除非最近的<code>if</code>被花括号括起来（见图7.2）。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/ifelse匹配的规则.png\" class=\"φcy\"></p>\n<p>第1个例子的缩进使得<code>else</code>看上去与第1个<code>if</code>相匹配，但是记住，编译器是忽略缩进的。如果希望<code>else</code>与第1个<code>if</code>匹配，应该这样写：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (number &gt; <span class=\"number\">6</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (number &lt; <span class=\"number\">12</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"You're close!\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Sorry, you lose a turn!\\n\"</span>);</span><br></pre></td></tr></table></figure><p>这样改动后，响应如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数字　　　 响应</span><br><span class=\"line\"><span class=\"number\">5</span>　　　　 Sorry, you lose a <span class=\"built_in\">turn</span>!</span><br><span class=\"line\"><span class=\"number\">10</span>　　　　You’re <span class=\"built_in\">close</span>!</span><br><span class=\"line\"><span class=\"number\">15</span>　　　　None</span><br></pre></td></tr></table></figure><h3 id=\"多层嵌套的if语句\">多层嵌套的if语句<a href=\"#多层嵌套的if语句\" title=\"多层嵌套的if语句\"></a></h3><p>前面介绍的<code>if...else if...else</code>序列是嵌套<code>if</code>的一种形式，从一系列选项中选择一个执行。有时，选择一个特定选项后又引出其他选择，这种情况可以使用另一种嵌套 <code>if</code>。例如，程序可以使用 <code>if else</code>选择男女，<code>if else</code>的每个分支里又包含另一个<code>if else</code>来区分不同收入的群体。</p>\n<p>我们把这种形式的嵌套if应用在下面的程序中。给定一个整数，显示所有能整除它的约数。如果没有约数，则报告该数是一个素数。</p>\n<p>在编写程序的代码之前要先规划好。首先，要总体设计一下程序。为方便起见，程序应该使用一个循环让用户能连续输入待测试的数。这样，测试一个新的数字时不必每次都要重新运行程序。下面是我们为这种循环开发的一个模型（伪代码）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">提示用户输入数字</span><br><span class=\"line\">当<span class=\"built_in\">scanf</span>()返回值为<span class=\"number\">1</span></span><br><span class=\"line\">分析该数并报告结果</span><br><span class=\"line\">提示用户继续输入</span><br></pre></td></tr></table></figure><p>回忆一下在测试条件中使用<code>scanf()</code>，把读取数字和判断测试条件确定是否结束循环合并在一起。</p>\n<p>下一步，设计如何找出约数。也许最直接的方法是：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (div = <span class=\"number\">2</span>; div &lt; num; div++)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (num % div == <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d is divisible by %d\\n\"</span>, num, div);</span><br></pre></td></tr></table></figure><p>该循环检查<strong>2～num</strong>之间的所有数字，测试它们是否能被<strong>num</strong>整除。但是，这个方法有点浪费时间。我们可以改进一下。例如，考虑如果<code>144%2</code>得0，说明2是144的约数；如果144除以2得72，那么72也是144的一个约数。所以，<code>num % div</code>测试成功可以获得两个约数。为了弄清其中的原理，我们分析一下循环中得到的成对约数：2和72、2和48、4和36、6和24、8和18、9和16、12和12、16和9、18和8，等等。在得到12和12这对约数后，又开始得到已找到的相同约数（次序相反）。因此，不用循环到143，在达到12以后就可以停止循环。这大大地节省了循环时间！</p>\n<p>分析后发现，必须测试的数只要到<code>num</code>的平方根就可以了，不用到<code>num</code>。对于9这样的数字，不会节约很多时间，但是对于10000这样的数，使用哪一种方法求约数差别很大。不过，我们不用在程序中计算平方根，可以这样编写测试条件：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (div = <span class=\"number\">2</span>; (div * div) &lt;= num; div++)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (num % div == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d is divisible by %d and %d.\\n\"</span>,num, div, num / div);</span><br></pre></td></tr></table></figure><p>如果num是144，当div = 12时停止循环。如果num是145，当div = 13时停止循环。</p>\n<p>不使用平方根而用这样的测试条件，有两个原因。其一，整数乘法比求平方根快。其二，我们还没有正式介绍平方根函数。</p>\n<p>还要解决两个问题才能准备编程。第1个问题，如果待测试的数是一个完全平方数怎么办？报告144可以被12和12整除显得有点傻。可以使用嵌套if语句测试div是否等于num /div。如果是，程序只打印一个约数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (div = <span class=\"number\">2</span>; (div * div) &lt;= num; div++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num % div == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (div * div != num)</span><br><span class=\"line\">        \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d is divisible by %d and %d.\\n\"</span>,num, div, num / div);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d is divisible by %d.\\n\"</span>, num, div);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>注意</p>\n<p>从技术角度看，<code>if else</code>语句作为一条单独的语句，不必使用花括号。外层<code>if</code>也是一条单独的语句，也不必使用花括号。但是，当语句太长时，使用花括号能提高代码的可读性，而且还可防止今后在if循环中添加其他语句时忘记加花括号。</p>\n<p>第2个问题，如何知道一个数字是素数？如果<code>num</code>是素数，程序流不会进入<code>if</code>语句。要解决这个问题，可以在外层循环把一个变量设置为某个值（如，1），然后在if语句中把该变量重新设置为0。循环完成后，检查该变量是否是1，如果是，说明没有进入if语句，那么该数就是素数。这样的变量通常称为标记（flag）。</p>\n<p>一直以来，C都习惯用<code>int</code>作为标记的类型，其实新增的<code>_Bool</code>类型更合适。另外，如果在程序中包含了<code>stdbool.h</code>头文件，便可用<code>bool</code>代替<code>_Bool</code>类型，用<code>true</code>和<code>false</code>分别代替<strong>1</strong>和<strong>0</strong>。</p>\n<p>程序清单7.5体现了以上分析的思路。为扩大该程序的应用范围，程序用<code>long</code>类型而不是<code>int</code>类型（如果系统不支持<code>_Bool</code>类型，可以把<code>isPrime</code>的类型改为<code>int</code>，并用<strong>1</strong>和<strong>0</strong>分别替换程序中的<strong>true</strong>和<strong>false</strong>）。</p>\n<p>程序清单7.5 divisors.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// divisors.c -- 使用嵌套if语句显示一个数的约数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdbool.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> num;　　　　 <span class=\"comment\">// 待测试的数</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> div;　　　　 <span class=\"comment\">// 可能的约数</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isPrime;　　　　　　　<span class=\"comment\">// 素数标记</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter an integer for analysis; \"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter q to quit.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lu\"</span>, &amp;num) == <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span> (div = <span class=\"number\">2</span>, isPrime = <span class=\"literal\">true</span>; (div * div) &lt;= num; div++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num % div == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((div * div) != num)</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lu is divisible by %lu and %lu.\\n\"</span>,</span><br><span class=\"line\">                    num, div, num / div);</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lu is divisible by %lu.\\n\"</span>,</span><br><span class=\"line\">                    num, div);</span><br><span class=\"line\">                isPrime = <span class=\"literal\">false</span>;　 <span class=\"comment\">// 该数不是素数</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isPrime)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lu is prime.\\n\"</span>, num);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter another integer for analysis; \"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter q to quit.\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Bye.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>注意，该程序在<code>for</code>循环的测试表达式中使用了逗号运算符，这样每次输入新值时都可以把<code>isPrime</code>设置为<code>true</code>。</p>\n<p>下面是该程序的一个输出示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please enter an integer <span class=\"keyword\">for</span> analysis; Enter q to quit.</span><br><span class=\"line\"><span class=\"number\">123456789</span></span><br><span class=\"line\"><span class=\"number\">123456789</span> is divisible by <span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"number\">41152263.</span></span><br><span class=\"line\"><span class=\"number\">123456789</span> is divisible by <span class=\"number\">9</span> <span class=\"keyword\">and</span> <span class=\"number\">13717421.</span></span><br><span class=\"line\"><span class=\"number\">123456789</span> is divisible by <span class=\"number\">3607</span> <span class=\"keyword\">and</span> <span class=\"number\">34227.</span></span><br><span class=\"line\"><span class=\"number\">123456789</span> is divisible by <span class=\"number\">3803</span> <span class=\"keyword\">and</span> <span class=\"number\">32463.</span></span><br><span class=\"line\"><span class=\"number\">123456789</span> is divisible by <span class=\"number\">10821</span> <span class=\"keyword\">and</span> <span class=\"number\">11409.</span></span><br><span class=\"line\">Please enter another integer <span class=\"keyword\">for</span> analysis; Enter q to quit.</span><br><span class=\"line\"><span class=\"number\">149</span></span><br><span class=\"line\"><span class=\"number\">149</span> is prime.</span><br><span class=\"line\">Please enter another integer <span class=\"keyword\">for</span> analysis; Enter q to quit.</span><br><span class=\"line\"><span class=\"number\">2013</span></span><br><span class=\"line\"><span class=\"number\">2013</span> is divisible by <span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"number\">671.</span></span><br><span class=\"line\"><span class=\"number\">2013</span> is divisible by <span class=\"number\">11</span> <span class=\"keyword\">and</span> <span class=\"number\">183.</span></span><br><span class=\"line\"><span class=\"number\">2013</span> is divisible by <span class=\"number\">33</span> <span class=\"keyword\">and</span> <span class=\"number\">61.</span></span><br><span class=\"line\">Please enter another integer <span class=\"keyword\">for</span> analysis; Enter q to quit.</span><br><span class=\"line\">q</span><br><span class=\"line\">Bye.</span><br></pre></td></tr></table></figure><p>该程序会把1认为是素数，其实它不是。下一节将要介绍的逻辑运算符可以排除这种特殊的情况。</p>\n<p>小结：用<code>if</code>语句进行选择</p>\n<p>关键字：<code>if</code>、<code>else</code></p>\n<p>一般注解：</p>\n<p>下面各形式中，<code>statement</code>可以是一条简单语句或复合语句。表达式为真说明其值是非零值。</p>\n<p>形式1：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (expression)</span><br><span class=\"line\">statement</span><br><span class=\"line\">如果expression为真，则执行statement部分。</span><br></pre></td></tr></table></figure><p>形式2：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (expression)</span><br><span class=\"line\">statement1</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">statement2</span><br><span class=\"line\">如果expression为真，执行statement1部分；否则，执行statement2部分。</span><br></pre></td></tr></table></figure><p>形式3：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (expression1)</span><br><span class=\"line\">statement1</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expression2)</span><br><span class=\"line\">statement2</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">statement3</span><br></pre></td></tr></table></figure><p>如果expression1为真，执行statement1部分；如果expression2为真，执行statement2部分；否则，执行statement3部分。</p>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (legs == <span class=\"number\">4</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"It might be a horse.\\n\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (legs &gt; <span class=\"number\">4</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"It is not a horse.\\n\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">else</span>　　 <span class=\"comment\">/* 如果legs &lt; 4 */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tlegs++;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Now it has one more leg.\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"逻辑运算符\">逻辑运算符<a href=\"#逻辑运算符\" title=\"逻辑运算符\"></a></h2><p>读者已经很熟悉了，<code>if</code> 语句和 <code>while</code> 语句通常使用关系表达式作为测试条件。有时，把多个关系表达式组合起来会很有用。例如，要编写一个程序，计算输入的一行句子中除单引号和双引号以外其他字符的数量。这种情况下可以使用逻辑运算符，并使用句点（.）标识句子的末尾。程序清单7.6用一个简短的程序进行演示。</p>\n<p>程序清单7.6 chcount.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// chcount.c　-- 使用逻辑与运算符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PERIOD <span class=\"meta-string\">'.'</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> charcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((ch = getchar()) != PERIOD)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch != <span class=\"string\">'\"'</span> &amp;&amp; ch != <span class=\"string\">'\\''</span>)</span><br><span class=\"line\">        \tcharcount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"There are %d non-quote characters.\\n\"</span>, charcount);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>下面是该程序的一个输出示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I didn<span class=\"number\">'</span>t <span class=\"built_in\">read</span> the <span class=\"string\">\"I'm a Programming Fool\"</span> best seller.</span><br><span class=\"line\">There are <span class=\"number\">50</span> non-quote characters.</span><br></pre></td></tr></table></figure><p>程序首先读入一个字符，并检查它是否是一个句点，因为句点标志一个句子的结束。接下来，<code>if</code>语句的测试条件中使用了逻辑与运算符<code>&amp;&amp;</code>。该 <code>if</code> 语句翻译成文字是“如果待测试的字符不是双引号，并且它也不是单引号，那么charcount递增1”。</p>\n<p>逻辑运算符两侧的条件必须都为真，整个表达式才为真。逻辑运算符的优先级比关系运算符低，所以不必在子表达式两侧加圆括号。</p>\n<p>C有3种逻辑运算符，见表7.3。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/种逻辑运算符.png\" class=\"φcy\"></p>\n<p>假设exp1和exp2是两个简单的关系表达式（如<code>car &gt; rat或debt == 1000</code>），那么：</p>\n<p>当且仅当exp1和exp2都为真时，<code>exp1 &amp;&amp; exp2</code>才为真；</p>\n<p>如果exp1或exp2为真，则<code>exp1 || exp2</code>为真；</p>\n<p>如果exp1为假，则!exp1为真；如果exp1为真，则!exp1为假。</p>\n<p>下面是一些具体的例子：</p>\n<p><code>5 &gt; 2 &amp;&amp; 4 &gt; 7</code>为假，因为只有一个子表达式为真；</p>\n<p><code>5 &gt; 2 || 4 &gt; 7</code>为真，因为有一个子表达式为真；</p>\n<p><code>!(4 &gt; 7)</code>为真，因为4不大于7。</p>\n<p>顺带一提，最后一个表达式与下面的表达式等价：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span> &lt;= <span class=\"number\">7</span></span><br></pre></td></tr></table></figure><p>如果不熟悉逻辑运算符或者觉得很别扭，请记住：<code>(练习&amp;&amp;时间)== 完美</code>。</p>\n<h3 id=\"备选拼写：iso646h头文件\">备选拼写：iso646.h头文件<a href=\"#备选拼写：iso646h头文件\" title=\"备选拼写：iso646.h头文件\"></a></h3><p>C 是在美国用标准美式键盘开发的语言。但是在世界各地，并非所有的键盘都有和美式键盘一样的符号。因此，C99标准新增了可代替逻辑运算符的拼写，它们被定义在ios646.h头文件中。如果在程序中包含该头文件，便可用and代替<code>&amp;&amp;</code>、or代替<code>||</code>、not代替<code>!</code>。例如，可以把下面的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (ch != <span class=\"string\">'\"'</span> &amp;&amp; ch != <span class=\"string\">'\\''</span>)</span><br><span class=\"line\">charcount++;</span><br></pre></td></tr></table></figure><p>改写为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (ch != <span class=\"string\">'\"'</span> <span class=\"keyword\">and</span> ch != <span class=\"string\">'\\''</span>)</span><br><span class=\"line\">charcount++;</span><br></pre></td></tr></table></figure><p>表7.4列出了逻辑运算符对应的拼写，很容易记。读者也许很好奇，为何C不直接使用<strong>and、or</strong>和<strong>not</strong>？因为C一直坚持尽量保持较少的关键字。参考资料V“新增C99和C11的标准ANSI C库”列出了一些运算符的备选拼写，有些我们还没见过。</p>\n<h3 id=\"优先级\">优先级<a href=\"#优先级\" title=\"优先级\"></a></h3><blockquote>\n<p><strong>算数运算符&gt;关系运算符&gt;赋值运算符</strong></p>\n</blockquote>\n<p><code>!</code>运算符的优先级很高，比乘法运算符还高，与递增运算符的优先级相同，只比圆括号的优先级低。<code>&amp;&amp;</code>运算符的优先级比<code>||</code>运算符高，但是两者的优先级都<strong>比关系运算符低</strong>，<strong>比赋值运算符高</strong>。因此，表达式<code>a&gt;b &amp;&amp; b&gt;c || b&gt;d</code>相当于<code>((a&gt;b) &amp;&amp; (b&gt;c)) || (b&gt;d)</code>。</p>\n<p>也就是说，b介于a和c之间，或者b大于d。</p>\n<p>尽管对于该例没必要使用圆括号，但是许多程序员更喜欢使用带圆括号的第 2 种写法。这样做即使不记得逻辑运算符的优先级，表达式的含义也很清楚。</p>\n<h3 id=\"求值顺序\">求值顺序<a href=\"#求值顺序\" title=\"求值顺序\"></a></h3><p>除了两个运算符共享一个运算对象的情况外，C 通常不保证先对复杂表达式中哪部分求值。例如，下面的语句，可能先对表达式5 + 3求值，也可能先对表达式9 + 6求值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apples = (<span class=\"number\">5</span> + <span class=\"number\">3</span>) * (<span class=\"number\">9</span> + <span class=\"number\">6</span>);</span><br></pre></td></tr></table></figure><p>C 把先计算哪部分的决定权留给编译器的设计者，以便针对特定系统优化设计。但是，对于逻辑运算符是个例外，C保证逻辑表达式的求值顺序是从左往右。&amp;&amp;和||运算符都是序列点，所以程序在从一个运算对象执行到下一个运算对象之前，所有的副作用都会生效。而且，C 保证一旦发现某个元素让整个表达式无效，便立即停止求值。正是由于有这些规定，才能写出这样结构的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>((c = getchar()) != <span class=\"string\">' '</span> &amp;&amp; c != <span class=\"string\">'\\n'</span>)</span><br></pre></td></tr></table></figure><p>如上代码所示，读取字符直至遇到第1 个空格或换行符。第1 个子表达式把读取的值赋给c，后面的子表达式会用到c的值。如果没有求值循序的保证，编译器可能在给c赋值之前先对后面的表达式求值。</p>\n<p>这里还有一个例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (number != <span class=\"number\">0</span> &amp;&amp; <span class=\"number\">12</span>/number == <span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"The number is 5 or 6.\\n\"</span>);</span><br></pre></td></tr></table></figure><p>如果number的值是0，那么第1个子表达式为假，且不再对关系表达式求值。这样避免了把0作为除数。许多语言都没有这种特性，知道number为0后，仍继续检查后面的条件。</p>\n<p>最后，考虑这个例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ( x++ &lt; <span class=\"number\">10</span> &amp;&amp; x + y &lt; <span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure><p>实际上，<code>&amp;&amp;</code>是一个序列点，这保证了在对<code>&amp;&amp;</code>右侧的表达式求值之前，已经递增了x。</p>\n<p>小结：逻辑运算符和表达式</p>\n<p>逻辑运算符：</p>\n<p>逻辑运算符的运算对象通常是关系表达式。<code>!</code>运算符只需要一个运算对象，其他两个逻辑运算符都需要两个运算对象，左侧一个，右侧一个。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/种逻辑运算符.png\" class=\"φcy\"></p>\n<p>逻辑表达式：</p>\n<p>当且仅当expression1和expression2都为真，<code>expression1 &amp;&amp; expression2</code>才为真。如果 expression1 或 expression2 为真，<code>expression1 || expression2</code> 为真。如果expression为假，<code>!expression</code>则为真，反之亦然。</p>\n<p>求值顺序：</p>\n<p>逻辑表达式的求值顺序是从左往右。一旦发现有使整个表达式为假的因素，立即停止求值。</p>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">6</span> &gt; <span class=\"number\">2</span> &amp;&amp; <span class=\"number\">3</span> == <span class=\"number\">3</span>　　　　 真</span><br><span class=\"line\">!(<span class=\"number\">6</span> &gt; <span class=\"number\">2</span> &amp;&amp; <span class=\"number\">3</span> == <span class=\"number\">3</span>)　　　假</span><br><span class=\"line\">x != <span class=\"number\">0</span> &amp;&amp; (<span class=\"number\">20</span> / x) &lt; <span class=\"number\">5</span> 只有当x不等于<span class=\"number\">0</span>时，才会对第<span class=\"number\">2</span>个表达式求值</span><br></pre></td></tr></table></figure><h3 id=\"范围\">范围<a href=\"#范围\" title=\"范围\"></a></h3><p>&amp;&amp;运算符可用于测试范围。例如，要测试score是否在90～100的范围内，可以这样写：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (range &gt;= <span class=\"number\">90</span> &amp;&amp; range &lt;= <span class=\"number\">100</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Good show!\\n\"</span>);</span><br></pre></td></tr></table></figure><p>千万不要模仿数学上的写法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">90</span> &lt;= range &lt;= <span class=\"number\">100</span>)　　<span class=\"comment\">// 千万不要这样写！</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Good show!\\n\"</span>);</span><br></pre></td></tr></table></figure><p>这样写的问题是代码有语义错误，而不是语法错误，所以编译器不会捕获这样的问题（虽然可能会给出警告）。由于<code>&lt;=</code>运算符的求值顺序是从左往右，所以编译器把测试表达式解释为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">90</span> &lt;= range) &lt;= <span class=\"number\">100</span></span><br></pre></td></tr></table></figure><p>子表达式<code>90 &lt;= range</code>的值要么是1（为真），要么是0（为假）。这两个值都小于100，所以不管range的值是多少，整个表达式都恒为真。因此，在范围测试中要使用<code>&amp;&amp;</code>。</p>\n<p>许多代码都用范围测试来确定一个字符是否是小写字母。例如，假设ch是<code>char</code>类型的变量：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'a'</span> &amp;&amp; ch &lt;= <span class=\"string\">'z'</span>)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"That's a lowercase character.\\n\"</span>);</span><br></pre></td></tr></table></figure><p>该方法仅对于像ASCII这样的字符编码有效，这些编码中相邻字母与相邻数字一一对应。但是，对于像EBCDIC这样的代码就没用了。相应的可移植方法是，用<code>ctype.h</code>系列中的<code>islower()</code>函数（参见表7.1）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">islower</span>(ch))</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"That's a lowercase character.\\n\"</span>);</span><br></pre></td></tr></table></figure><p>无论使用哪种特定的字符编码，<code>islower()</code>函数都能正常运行（不过，一些早期的编译器没有<code>ctype.h</code>系列）。</p>\n<h2 id=\"一个统计单词的程序\">一个统计单词的程序<a href=\"#一个统计单词的程序\" title=\"一个统计单词的程序\"></a></h2><p>现在，我们可以编写一个统计单词数量的程序（即，该程序读取并报告单词的数量）。该程序还可以计算字符数和行数。先来看看编写这样的程序要涉及那些内容。</p>\n<p>首先，该程序要逐个字符读取输入，知道何时停止读取。然后，该程序能识别并计算这些内容：字符、行数和单词。据此我们编写的伪代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">读取一个字符</span><br><span class=\"line\">当有更多输入时</span><br><span class=\"line\">递增字符计数</span><br><span class=\"line\">如果读完一行，递增行数计数</span><br><span class=\"line\">如果读完一个单词，递增单词计数</span><br><span class=\"line\">读取下一个字符</span><br><span class=\"line\">前面有一个输入循环的模型：</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((ch = getchar()) != STOP)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>这里，<code>STOP</code>表示能标识输入末尾的某个值。以前我们用过换行符和句点标记输入的末尾，但是对于一个通用的统计单词程序，它们都不合适。我们暂时选用一个文本中不常用的字符（如，|）作为输入的末尾标记。第8章中会介绍更好的方法，以便程序既能处理文本文件，又能处理键盘输入。</p>\n<p>现在，我们考虑循环体。因为该程序使用<code>getchar()</code>进行输入，所以每次迭代都要通过递增计数器来计数。为了统计行数，程序要能检查换行字符。如果输入的字符是一个换行符，该程序应该递增行数计数器。这里要注意 <code>STOP</code> 字符位于一行的中间的情况。是否递增行数计数？我们可以作为特殊行计数，即没有换行符的一行字符。可以通过记录之前读取的字符识别这种情况，即如果读取时发现 <code>STOP</code> 字符的上一个字符不是换行符，那么这行就是特殊行。</p>\n<p>最棘手的部分是识别单词。首先，必须定义什么是该程序识别的单词。我们用一个相对简单的方法，把一个单词定义为一个不含空白（即，没有空格、制表符或换行符）的字符序列。因此，“<code>glymxck</code>”和“<code>r2d2</code>”都算是一个单词。程序读取的第 1 个非空白字符即是一个单词的开始，当读到空白字符时结束。判断非空白字符最直接的测试表达式是：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c != <span class=\"string\">' '</span> &amp;&amp; c != <span class=\"string\">'\\n'</span> &amp;&amp; c != <span class=\"string\">'\\t'</span> <span class=\"comment\">/* 如果c不是空白字符，该表达式为真*/</span></span><br></pre></td></tr></table></figure><p>检测空白字符最直接的测试表达式是：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c == <span class=\"string\">' '</span> || c == <span class=\"string\">'\\n'</span> || c == <span class=\"string\">'\\t'</span> <span class=\"comment\">/*如果c是空白字符，该表达式为真*/</span></span><br></pre></td></tr></table></figure><p>然而，使用<code>ctype.h</code>头文件中的函数<code>isspace()</code>更简单，如果该函数的参数是空白字符，则返回真。所以，如果<code>c</code>是空白字符，<code>isspace(c)</code>为真；如果c不是空白字符，<code>!isspace(c)</code>为真。</p>\n<p>要查找一个单词里是否有某个字符，可以在程序读入单词的首字符时把一个标记（名为 inword）设置为1。也可以在此时递增单词计数。然后，只要inword为1（或true），后续的非空白字符都不记为单词的开始。下一个空白字符，必须重置标记为0（或false），然后程序就准备好读取下一个单词。我们把以上分析写成伪代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果c不是空白字符，且inword为假</span><br><span class=\"line\">设置inword为真，并给单词计数</span><br><span class=\"line\">如果c是空白字符，且inword为真</span><br><span class=\"line\">设置inword为假</span><br></pre></td></tr></table></figure><p>这种方法在读到每个单词的开头时把inword设置为1（真），在读到每个单词的末尾时把inword设置为0（假）。只有在标记从0设置为1时，递增单词计数。如果能使用_Bool类型，可以在程序中包含<code>stdbool.h</code>头文件，把inword的类型设置为<code>bool</code>，其值用true和false表示。如果编译器不支持这种用法，就把inword的类型设置为<code>int</code>，其值用1和0表示。</p>\n<p>如果使用布尔类型的变量，通常习惯把变量自身作为测试条件。如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用<span class=\"keyword\">if</span> (inword)代替<span class=\"keyword\">if</span> (inword == <span class=\"literal\">true</span>)</span><br><span class=\"line\">用<span class=\"keyword\">if</span> (!inword)代替<span class=\"keyword\">if</span> (inword == <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure><p>可以这样做的原因是，如果 inword为true，则表达式 <code>inword == true</code>为true；如果 inword为false，则表达式<code>inword == true</code>为false。所以，还不如直接用inword作为测试条件。类似地，<code>!inword</code>的值与表达式<code>inword == false</code>的值相同（非真即false，非假即true）。</p>\n<p>程序清单7.7把上述思路（识别行、识别不完整的行和识别单词）翻译了成C代码。</p>\n<p>程序清单7.7 wordcnt.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// wordcnt.c -- 统计字符数、单词数、行数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctype.h&gt;　　　　 // 为isspace()函数提供原型</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdbool.h&gt;　　　 // 为bool、true、false提供定义</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STOP <span class=\"meta-string\">'|'</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;　　　　　　　　<span class=\"comment\">// 读入字符</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> prev;　　　　　　 <span class=\"comment\">// 读入的前一个字符</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> n_chars = <span class=\"number\">0L</span>;<span class=\"comment\">// 字符数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n_lines = <span class=\"number\">0</span>;　　　 <span class=\"comment\">// 行数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n_words = <span class=\"number\">0</span>;　　　 <span class=\"comment\">// 单词数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> p_lines = <span class=\"number\">0</span>;　　　 <span class=\"comment\">// 不完整的行数</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> inword = <span class=\"literal\">false</span>;　 <span class=\"comment\">// 如果c在单词中，inword 等于 true</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter text to be analyzed (| to terminate):\\n\"</span>);</span><br><span class=\"line\">    prev = <span class=\"string\">'\\n'</span>;　　　　　 <span class=\"comment\">// 用于识别完整的行</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((c = getchar()) != STOP)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n_chars++;　　　　 <span class=\"comment\">// 统计字符</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">        \tn_lines++;　　 <span class=\"comment\">// 统计行</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">isspace</span>(c) &amp;&amp; !inword)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            inword = <span class=\"literal\">true</span>;<span class=\"comment\">// 开始一个新的单词</span></span><br><span class=\"line\">            n_words++;　　 <span class=\"comment\">// 统计单词</span></span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isspace</span>(c) &amp;&amp; inword)</span><br><span class=\"line\">\t\t\tinword = <span class=\"literal\">false</span>;　　<span class=\"comment\">// 打到单词的末尾</span></span><br><span class=\"line\">        prev = c;　　　　　<span class=\"comment\">// 保存字符的值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prev != <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">\t\tp_lines = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"characters = %ld, words = %d, lines = %d, \"</span>,</span><br><span class=\"line\">    n_chars, n_words, n_lines);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"partial lines = %d\\n\"</span>, p_lines);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>下面是运行该程序后的一个输出示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Enter <span class=\"built_in\">text</span> to be <span class=\"title\">analyzed</span> <span class=\"params\">(| to <span class=\"built_in\">terminate</span>)</span>:</span></span><br><span class=\"line\"><span class=\"function\">Reason is a</span></span><br><span class=\"line\"><span class=\"function\">powerful servant but</span></span><br><span class=\"line\">an inadequate master.</span><br><span class=\"line\">|</span><br><span class=\"line\">characters = <span class=\"number\">55</span>, words = <span class=\"number\">9</span>, lines = <span class=\"number\">3</span>, partial lines = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure><p>该程序使用逻辑运算符把伪代码翻译成C代码。例如，把下面的伪代码：</p>\n<p>如果c不是空白字符，且<code>inword</code>为假</p>\n<p>翻译成如下C代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">isspace</span>(c) &amp;&amp;!inword)</span><br></pre></td></tr></table></figure><p>再次提醒读者注意，<code>!inword</code> 与 <code>inword == false</code> 等价。上面的整个测试条件比单独判断每个空白字符的可读性高：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (c != <span class=\"string\">' '</span> &amp;&amp; c != <span class=\"string\">'\\n'</span> &amp;&amp; c != <span class=\"string\">'\\t'</span> &amp;&amp; !inword)</span><br></pre></td></tr></table></figure><p>上面的两种形式都表示“如果c不是空白字符，且如果c不在单词里”。如果两个条件都满足，则一定是一个新单词的开头，所以要递增n_words。如果位于单词中，满足第1个条件，但是inword为true，就不递增 n_word。当读到下一个空白字符时，inword 被再次设置为 false。检查代码，查看一下如果单词之间有多个空格时，程序是否能正常运行。第 8 章讲解了如何修正这个问题，让该程序能统计文件中的单词量。</p>\n<h2 id=\"条件运算符：\">条件运算符：?:<a href=\"#条件运算符：\" title=\"条件运算符：?:\"></a></h2><p>C提供条件表达式（conditional expression）作为表达<code>if else</code>语句的一种便捷方式，该表达式使用<code>?:</code>条件运算符。该运算符分为两部分，需要 3 个运算对象。回忆一下，带一个运算对象的运算符称为一元运算符，带两个运算对象的运算符称为二元运算符。以此类推，带 3 个运算对象的运算符称为三元运算符。条件运算符是C语言中唯一的三元运算符。下面的代码得到一个数的绝对值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = (y &lt; <span class=\"number\">0</span>) ? -y : y;</span><br></pre></td></tr></table></figure><p>在<code>=</code>和<code>;</code>之间的内容就是条件表达式，该语句的意思是“<strong>如果y小于0，那么x = -y;否则，x = y</strong>”。用<code>if else</code>可以这样表达：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (y &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\tx = -y;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tx = y;</span><br></pre></td></tr></table></figure><p>条件表达式的通用形式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expression1 ? expression2 : expression3</span><br></pre></td></tr></table></figure><p>如果 expression1 为真（非 0），那么整个条件表达式的值与 expression2 的值相同；如果expression1为假（0），那么整个条件表达式的值与expression3的值相同。</p>\n<p>需要把两个值中的一个赋给变量时，就可以用条件表达式。典型的例子是，把两个值中的最大值赋给变量：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">max</span> = (a &gt; b) ? a : b;</span><br></pre></td></tr></table></figure><p>如果a大于b，那么将max设置为a；否则，设置为b。</p>\n<p>通常，条件运算符完成的任务用 <code>if else</code> 语句也可以完成。但是，使用条件运算符的代码更简洁，而且编译器可以生成更紧凑的程序代码。</p>\n<p>我们来看程序清单7.8中的油漆程序，该程序计算刷给定平方英尺的面积需要多少罐油漆。基本算法很简单：用平方英尺数除以每罐油漆能刷的面积。但是，商店只卖整罐油漆，不会拆分来卖，所以如果计算结果是1.7罐，就需要两罐。因此，该程序计算得到带小数的结果时应该进1。条件运算符常用于处理这种情况，而且还要根据单复数分别打印can和cans。</p>\n<p>程序清单7.8 paint.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* paint.c -- 使用条件运算符 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> COVERAGE 350　　　<span class=\"comment\">// 每罐油漆可刷的面积（单位：平方英尺）</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sq_feet;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cans;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter number of square feet to be painted:\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;sq_feet) == <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cans = sq_feet / COVERAGE;</span><br><span class=\"line\">        cans += ((sq_feet % COVERAGE == <span class=\"number\">0</span>)) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"You need %d %s of paint.\\n\"</span>, cans,</span><br><span class=\"line\">        cans == <span class=\"number\">1</span> ? <span class=\"string\">\"can\"</span> : <span class=\"string\">\"cans\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter next value (q to quit):\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>下面是该程序的运行示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter number of square feet to be painted:</span><br><span class=\"line\"><span class=\"number\">349</span></span><br><span class=\"line\">You need <span class=\"number\">1</span> can of paint.</span><br><span class=\"line\"><span class=\"function\">Enter next <span class=\"title\">value</span> <span class=\"params\">(q to quit)</span>:</span></span><br><span class=\"line\"><span class=\"function\">351</span></span><br><span class=\"line\">You need 2 cans of paint.</span><br><span class=\"line\"><span class=\"function\">Enter next <span class=\"title\">value</span> <span class=\"params\">(q to quit)</span>:</span></span><br><span class=\"line\"><span class=\"function\">q</span></span><br></pre></td></tr></table></figure><p>该程序使用的变量都是<code>int</code>类型，除法的计算结果（sq_feet / COVERAGE）会被截断。也就是说， 351/350得1。所以，cans被截断成整数部分。如果<code>sq_feet % COVERAGE</code>得0，说明sq_feet被COVERAGE整除，cans的值不变；否则，肯定有余数，就要给cans加1。这由下面的语句完成：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cans += ((sq_feet % COVERAGE == <span class=\"number\">0</span>)) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure><p>该语句把<code>+=</code>右侧表达式的值加上<code>cans</code>，再赋给<code>cans</code>。右侧表达式是一个条件表达式，根据sq_feet是否能被COVERAGE整除，其值为0或1。</p>\n<p>printf()函数中的参数也是一个条件表达式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cans == <span class=\"number\">1</span> ? <span class=\"string\">\"can\"</span> : <span class=\"string\">\"cans\"</span>);</span><br></pre></td></tr></table></figure><p>如果cans的值是1，则打印can；否则，打印cans。这也说明了条件运算符的第2个和第3个运算对象可以是字符串。</p>\n<p>小结：条件运算符</p>\n<p>条件运算符：<code>?:</code></p>\n<p>一般注解：</p>\n<p>条件运算符需要3个运算对象，每个运算对象都是一个表达式。其通用形式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expression1 ? expression2 : expression3</span><br></pre></td></tr></table></figure><p>如果expression1为真，整个条件表达式的值是expression2的值；否则，是expression3的值。</p>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">5</span> &gt; <span class=\"number\">3</span>) ? <span class=\"number\">1</span> : <span class=\"number\">2</span> 值为<span class=\"number\">1</span></span><br><span class=\"line\">(<span class=\"number\">3</span> &gt; <span class=\"number\">5</span>) ? <span class=\"number\">1</span> : <span class=\"number\">2</span> 值为<span class=\"number\">2</span></span><br><span class=\"line\">(a &gt; b) ? a : b 如果a &gt;b，则取较大的值</span><br></pre></td></tr></table></figure><h2 id=\"循环辅助：continue和break\">循环辅助：continue和break<a href=\"#循环辅助：continue和break\" title=\"循环辅助：continue和break\"></a></h2><p>一般而言，程序进入循环后，在下一次循环测试之前会执行完循环体中的所有语句。<code>continue</code> 和<code>break</code>语句可以根据循环体中的测试结果来忽略一部分循环内容，甚至结束循环。</p>\n<h3 id=\"continue语句\">continue语句<a href=\"#continue语句\" title=\"continue语句\"></a></h3><p>3种循环都可以使用<code>continue</code>语句。执行到该语句时，会跳过本次迭代的剩余部分，并开始下一轮迭代。如果<code>continue</code>语句在嵌套循环内，则只会影响包含该语句的内层循环。程序清单7.9中的简短程序演示了如何使用<code>continue</code>。</p>\n<p>程序清单7.9 skippart.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* skippart.c -- 使用continue跳过部分循环 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> MIN = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> MAX = <span class=\"number\">100.0f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> score;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> total = <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> <span class=\"built_in\">min</span> = MAX;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> <span class=\"built_in\">max</span> = MIN;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter the first score (q to quit): \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>, &amp;score) == <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (score &lt; MIN || score &gt; MAX)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%0.1f is an invalid value.Try again: \"</span>,score);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;　 <span class=\"comment\">// 跳转至while循环的测试条件</span></span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Accepting %0.1f:\\n\"</span>, score);</span><br><span class=\"line\">        <span class=\"built_in\">min</span> = (score &lt; <span class=\"built_in\">min</span>) ? score : <span class=\"built_in\">min</span>;</span><br><span class=\"line\">        <span class=\"built_in\">max</span> = (score &gt; <span class=\"built_in\">max</span>) ? score : <span class=\"built_in\">max</span>;</span><br><span class=\"line\">        total += score;</span><br><span class=\"line\">        n++;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter next score (q to quit): \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Average of %d scores is %0.1f.\\n\"</span>, n, total / n);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Low = %0.1f, high = %0.1f\\n\"</span>, <span class=\"built_in\">min</span>, <span class=\"built_in\">max</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"No valid scores were entered.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>在程序清单7.9中，while循环读取输入，直至用户输入非数值数据。循环中的if语句筛选出无效的分数。假设输入 188，程序会报告：<code>188 is an invalid value</code>。在本例中，<code>continue</code> 语句让程序跳过处理有效输入部分的代码。程序开始下一轮循环，准备读取下一个输入值。</p>\n<p>注意，有两种方法可以避免使用continue，一是省略continue，把剩余部分放在一个else块中：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (score &lt; <span class=\"number\">0</span> || score &gt; <span class=\"number\">100</span>)</span><br><span class=\"line\">\t<span class=\"comment\">/* printf()语句 */</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 语句*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>另一种方法是，用以下格式来代替：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">0</span> &amp;&amp; score &lt;= <span class=\"number\">100</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">/* 语句 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>这种情况下，使用<code>continue</code>的好处是减少主语句组中的一级缩进。当语句很长或嵌套较多时，紧凑简洁的格式提高了代码的可读性。</p>\n<p><code>continue</code>还可用作占位符。例如，下面的循环读取并丢弃输入的数据，直至读到行末尾：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (getchar() != <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure><p>当程序已经读取一行中的某些内容，要跳至下一行开始处时，这种用法很方便。问题是，一般很难注意到一个单独的分号。如果使用continue，可读性会更高：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (getchar() != <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"><span class=\"keyword\">continue</span>;</span><br></pre></td></tr></table></figure><p>如果用了<code>continue</code>没有简化代码反而让代码更复杂，就不要使用<code>continue</code>。例如，考虑下面的程序段：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ((ch = getchar() ) != <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\t'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(ch);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该循环跳过制表符，并在读到换行符时退出循环。以上代码这样表示更简洁：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ((ch = getchar()) != <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ch != <span class=\"string\">'\\t'</span>)</span><br><span class=\"line\"><span class=\"built_in\">putchar</span>(ch);</span><br></pre></td></tr></table></figure><p>通常，在这种情况下，把<code>if</code>的测试条件的关系反过来便可避免使用<code>continue</code>。</p>\n<p>以上介绍了<code>continue</code>语句让程序跳过循环体的余下部分。那么，从何处开始继续循环？对于<code>while</code>和 <code>do while</code> 循环，执行 <code>continue</code> 语句后的下一个行为是对循环的测试表达式求值。考虑下面的循环：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (count &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ch = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(ch);</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该循环读取10个字符（除换行符外，因为当ch是换行符时，程序会跳过<code>count++;</code>语句）并重新显示它们，其中不包括换行符。执行<code>continue</code>后，下一个被求值的表达式是循环测试条件。</p>\n<p>对于<code>for</code>循环，执行<code>continue</code>后的下一个行为是对更新表达式求值，然后是对循环测试表达式求值。例如，考虑下面的循环：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (count = <span class=\"number\">0</span>; count &lt; <span class=\"number\">10</span>; count++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ch = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(ch);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该例中，执行完<code>continue</code>后，首先递增<code>count</code>，然后将递增后的值和10作比较。因此，该循环与上面while循环的例子稍有不同。<code>while</code>循环的例子中，除了换行符，其余字符都显示；而本例中，换行符也计算在内，所以读取的10个字符中包含换行符。</p>\n<h3 id=\"break语句\">break语句<a href=\"#break语句\" title=\"break语句\"></a></h3><p>程序执行到循环中的<code>break</code>语句时，会终止包含它的循环，并继续执行下一阶段。把程序清单7.9中的<code>continue</code>替换成<code>break</code>，在输入188时，不是跳至执行下一轮循环，而是导致退出当前循环。图7.3比较了<code>break</code>和<code>continue</code>。如果<code>break</code>语句位于嵌套循环内，它只会影响包含它的当前循环。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/比较break和continue.png\" class=\"φcy\"></p>\n<p><code>break</code>还可用于因其他原因退出循环的情况。程序清单7.10用一个循环计算矩形的面积。如果用户输入非数字作为矩形的长或宽，则终止循环。</p>\n<p>程序清单7.10 break.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* break.c -- 使用 break 退出循环 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> length, <span class=\"built_in\">width</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter the length of the rectangle:\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>, &amp;length) == <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Length = %0.2f:\\n\"</span>, length);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter its width:\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>, &amp;<span class=\"built_in\">width</span>) != <span class=\"number\">1</span>)</span><br><span class=\"line\">        \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Width = %0.2f:\\n\"</span>, <span class=\"built_in\">width</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Area = %0.2f:\\n\"</span>, length * <span class=\"built_in\">width</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter the length of the rectangle:\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Done.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>可以这样控制循环：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f %f\"</span>, &amp;length, &amp;<span class=\"built_in\">width</span>) == <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure><p>但是，用<code>break</code>可以方便显示用户输入的值。</p>\n<p>和<code>continue</code>一样，如果用了<code>break</code>代码反而更复杂，就不要使用<code>break</code>。例如，考虑下面的循环：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ((ch = getchar()) != <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\t'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(ch);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>如果把两个测试条件放在一起，逻辑就更清晰了：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ((ch = getchar() ) != <span class=\"string\">'\\n'</span> &amp;&amp; ch != <span class=\"string\">'\\t'</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>(ch);</span><br></pre></td></tr></table></figure><p><code>break</code>语句对于稍后讨论的<code>switch</code>语句而言至关重要。</p>\n<p>在for循环中的<code>break</code>和<code>continue</code>的情况不同，执行完<code>break</code>语句后会直接执行循环后面的第1条语句，连更新部分也跳过。嵌套循环内层的<code>break</code>只会让程序跳出包含它的当前循环，要跳出外层循环还需要一个<code>break</code>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> p, q;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;p);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (p &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, p);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;q);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, p*q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q &gt; <span class=\"number\">100</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>; <span class=\"comment\">// 跳出内层循环</span></span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q &gt; <span class=\"number\">100</span>)</span><br><span class=\"line\">  \t  <span class=\"keyword\">break</span>; <span class=\"comment\">// 跳出外层循环</span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"多重选择：switch和break\">多重选择：switch和break<a href=\"#多重选择：switch和break\" title=\"多重选择：switch和break\"></a></h2><p>使用条件运算符和 <code>if else</code> 语句很容易编写二选一的程序。然而，有时程序需要在多个选项中进行选择。可以用<code>if else</code>  <code>if...else</code>来完成。但是，大多数情况下使用<code>switch</code>语句更方便。程序清单7.11演示了如何使用<code>switch</code>语句。该程序读入一个字母，然后打印出与该字母开头的动物名。</p>\n<p>程序清单7.11 animals.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* animals.c -- 使用switch语句 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Give me a letter of the alphabet, and I will give \"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"an animal name\\nbeginning with that letter.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please type in a letter; type # to end my act.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((ch = getchar()) != <span class=\"string\">'#'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">'\\n'</span> == ch)</span><br><span class=\"line\">        \t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">islower</span>(ch))　　<span class=\"comment\">/* 只接受小写字母*/</span></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (ch)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'a'</span>:</span><br><span class=\"line\">                \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"argali, a wild sheep of Asia\\n\"</span>);</span><br><span class=\"line\">                \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'b'</span>:</span><br><span class=\"line\">                \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"babirusa, a wild pig of Malay\\n\"</span>);</span><br><span class=\"line\">                \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'c'</span>:</span><br><span class=\"line\">                \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"coati, racoonlike mammal\\n\"</span>);</span><br><span class=\"line\">                \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'d'</span>:</span><br><span class=\"line\">                \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"desman, aquatic, molelike critter\\n\"</span>);</span><br><span class=\"line\">               \t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'e'</span>:</span><br><span class=\"line\">                \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"echidna, the spiny anteater\\n\"</span>);</span><br><span class=\"line\">                \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'f'</span>:</span><br><span class=\"line\">                \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"fisher, brownish marten\\n\"</span>);</span><br><span class=\"line\">                \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"That's a stumper!\\n\"</span>);</span><br><span class=\"line\">            &#125;　　　　　　　　<span class=\"comment\">/* switch结束　　　　*/</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"I recognize only lowercase letters.\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (getchar() != <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">        \t<span class=\"keyword\">continue</span>;　　 <span class=\"comment\">/* 跳过输入行的剩余部分　*/</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please type another letter or a #.\\n\"</span>);</span><br><span class=\"line\">    &#125;　　　　　　　　　 <span class=\"comment\">/* while循环结束　　　*/</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Bye!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>篇幅有限，我们只编到f，后面的字母以此类推。在进一步解释该程序之前，先看看输出示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Give me a letter of the alphabet, <span class=\"keyword\">and</span> I will give an animal name</span><br><span class=\"line\">beginning with that letter.</span><br><span class=\"line\">Please type in a letter; type <span class=\"meta\"># to end my act.</span></span><br><span class=\"line\">a [enter]</span><br><span class=\"line\">argali, a wild sheep of Asia</span><br><span class=\"line\">Please type another letter <span class=\"keyword\">or</span> a #.</span><br><span class=\"line\">dab [enter]</span><br><span class=\"line\">desman, aquatic, molelike critter</span><br><span class=\"line\">Please type another letter <span class=\"keyword\">or</span> a #.</span><br><span class=\"line\">r [enter]</span><br><span class=\"line\">That<span class=\"number\">'</span>s a stumper!</span><br><span class=\"line\">Please type another letter <span class=\"keyword\">or</span> a #.</span><br><span class=\"line\">Q [enter]</span><br><span class=\"line\">I recognize only lowercase letters.</span><br><span class=\"line\">Please type another letter <span class=\"keyword\">or</span> a #.</span><br><span class=\"line\"># [enter]</span><br><span class=\"line\">Bye!</span><br></pre></td></tr></table></figure><p>该程序的两个主要特点是：使用了<code>switch</code>语句和它对输出的处理。我们先分析<code>switch</code>的工作原理。</p>\n<h3 id=\"switch语句\">switch语句<a href=\"#switch语句\" title=\"switch语句\"></a></h3><p>要对紧跟在关键字 <code>switch</code> 后圆括号中的表达式求值。在程序清单 7.11 中，该表达式是刚输入给 ch的值。然后程序扫描标签（这里指，<code>case &#39;a&#39; :</code>、<code>case &#39;b&#39; :</code>等）列表，直到发现一个匹配的值为止。然后程序跳转至那一行。如果没有匹配的标签怎么办？如果有<code>default :</code>标签行，就跳转至该行；否则，程序继续执行在<code>switch</code>后面的语句。</p>\n<p><code>break</code>语句在其中起什么作用？它让程序离开<code>switch</code>语句，跳至<code>switch</code>语句后面的下一条语句（见图7.4）。如果没有<code>break</code>语句，就会从匹配标签开始执行到<code>switch</code>末尾。例如，如果删除该程序中的所有<code>break</code>语句，运行程序后输入d，其交互的输出结果如下：</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/switch中有break和没有break的程序流.png\" class=\"φcy\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Give me a letter of the alphabet, <span class=\"keyword\">and</span> I will give an animal name</span><br><span class=\"line\">beginning with that letter.</span><br><span class=\"line\">Please type in a letter; type <span class=\"meta\"># to end my act.</span></span><br><span class=\"line\">d [enter]</span><br><span class=\"line\">desman, aquatic, molelike critter</span><br><span class=\"line\">echidna, the spiny anteater</span><br><span class=\"line\">fisher, a brownish marten</span><br><span class=\"line\">That<span class=\"number\">'</span>s a stumper!</span><br><span class=\"line\">Please type another letter <span class=\"keyword\">or</span> a #.</span><br><span class=\"line\">\\# [enter]</span><br><span class=\"line\">Bye!</span><br></pre></td></tr></table></figure><p>如上所示，执行了从<code>case &#39;d&#39;:</code>到<code>switch</code>语句末尾的所有语句。</p>\n<p>顺带一提，<code>break</code>语句可用于循环和<code>switch</code>语句中，但是<code>continue</code>只能用于循环中。尽管如此，如果<code>switch</code>语句在一个循环中，<code>continue</code>便可作为<code>switch</code>语句的一部分。这种情况下，就像在其他循环中一样，<code>continue</code>让程序跳出循环的剩余部分，包括<code>switch</code>语句的其他部分。</p>\n<p>如果读者熟悉Pascal，会发现<code>switch</code>语句和Pascal的<code>case</code>语句类似。它们最大的区别在于，如果只希望处理某个带标签的语句，就必须在<code>switch</code>语句中使用<code>break</code>语句。另外，C语言的<code>case</code>一般都指定一个值，不能使用一个范围。</p>\n<p><code>switch</code>在圆括号中的测试表达式的值应该是一个整数值（包括<code>char</code>类型）。<code>case</code>标签必须是整数类型（包括<code>char</code>类型）的常量或整型常量表达式（即，表达式中只包含整型常量）。不能用变量作为<code>case</code>标签。<code>switch</code>的构造如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> ( 整型表达式)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> 常量<span class=\"number\">1</span>:</span><br><span class=\"line\">    \t语句　　　&lt;--可选</span><br><span class=\"line\">    <span class=\"keyword\">case</span> 常量<span class=\"number\">2</span>:</span><br><span class=\"line\">    \t语句　　　&lt;--可选</span><br><span class=\"line\">    <span class=\"keyword\">default</span> :　　 &lt;--可选</span><br><span class=\"line\">    \t语句　　　&lt;--可选</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"只读每行的首字符\">只读每行的首字符<a href=\"#只读每行的首字符\" title=\"只读每行的首字符\"></a></h3><p><code>animals.c</code>（程序清单7.11）的另一个独特之处是它读取输入的方式。运行程序时读者可能注意到了，当输入<code>dab</code>时，只处理了第1个字符。这种丢弃一行中其他字符的行为，经常出现在响应单字符的交互程序中。可以用下面的代码实现这样的行为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (getchar() != <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">continue</span>;　　　　<span class=\"comment\">/* 跳过输入行的其余部分 */</span></span><br></pre></td></tr></table></figure><p>循环从输入中读取字符，包括按下Enter键产生的换行符。注意，函数的返回值并没有赋给<code>ch</code>，以上代码所做的只是读取并丢弃字符。由于最后丢弃的字符是换行符，所以下一个被读取的字符是下一行的首字母。在外层的<code>while</code>循环中，<code>getchar()</code>读取首字母并赋给ch。</p>\n<p>假设用户一开始就按下Enter键，那么程序读到的首个字符就是换行符。下面的代码处理这种情况：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">continue</span>;</span><br></pre></td></tr></table></figure><h3 id=\"多重标签\">多重标签<a href=\"#多重标签\" title=\"多重标签\"></a></h3><p>如程序清单7.12所示，可以在switch语句中使用多重case标签。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">7.12</span> vowels.c程序</span><br><span class=\"line\"><span class=\"comment\">// vowels.c -- 使用多重标签</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a_ct, e_ct, i_ct, o_ct, u_ct;</span><br><span class=\"line\">    a_ct = e_ct = i_ct = o_ct = u_ct = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter some text; enter # to quit.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((ch = getchar()) != <span class=\"string\">'#'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (ch)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'a'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'A'</span>:　a_ct++;</span><br><span class=\"line\">            \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'e'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'E'</span>:　e_ct++;</span><br><span class=\"line\">            \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'i'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'I'</span>:　i_ct++;</span><br><span class=\"line\">            \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'o'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'O'</span>:　o_ct++;</span><br><span class=\"line\">            \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'u'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'U'</span>:　u_ct++;</span><br><span class=\"line\">            \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:　 <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;　　　　　　　　　<span class=\"comment\">// switch结束</span></span><br><span class=\"line\">    &#125;　　　　　　　　　　　 <span class=\"comment\">// while循环结束</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"number of vowels:　 A　 E　 I　 O　 U\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%4d %4d %4d %4d %4d\\n\"</span>,a_ct, e_ct, i_ct, o_ct, u_ct);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>假设如果ch是字母i，<code>switch</code>语句会定位到标签为<code>case &#39;i&#39; :</code>的位置。由于该标签没有关联<code>break</code>语句，所以程序流直接执行下一条语句，即<code>i_ct++;</code>。如果 ch是字母I，程序流会直接定位到<code>case &#39;I&#39; :</code>。本质上，两个标签都指的是相同的语句。</p>\n<p>严格地说，<code>case &#39;U&#39;</code>的 <code>break</code> 语句并不需要。因为即使删除这条 <code>break</code> 语句，程序流会接着执行<code>switch</code>中的下一条语句，即<code>default : break;</code>。所以，可以把<code>case &#39;U&#39;</code>的<code>break</code>语句去掉以缩短代码。但是从另一方面看，保留这条<code>break</code>语句可以防止以后在添加新的<code>case</code>（例如，把y作为元音）时遗漏<code>break</code>语句。</p>\n<p>下面是该程序的运行示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter some <span class=\"built_in\">text</span>; enter <span class=\"meta\"># to quit.</span></span><br><span class=\"line\">I see under the overseer.#</span><br><span class=\"line\">number of vowels:　　 A　 E　 I　 O　 U</span><br><span class=\"line\"><span class=\"number\">0</span>　　<span class=\"number\">7</span>　 <span class=\"number\">1</span>　 <span class=\"number\">1</span>　 <span class=\"number\">1</span></span><br></pre></td></tr></table></figure><p>在该例中，如果使用<code>ctype.h</code>系列的<code>toupper()</code>函数（参见表7.2）可以避免使用多重标签，在进行测试之前就把字母转换成大写字母：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ((ch = getchar()) != <span class=\"string\">'#'</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ch = <span class=\"built_in\">toupper</span>(ch);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ch)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'A'</span>: a_ct++;</span><br><span class=\"line\">        \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'E'</span>: e_ct++;</span><br><span class=\"line\">        \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'I'</span>: i_ct++;</span><br><span class=\"line\">        \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'O'</span>: o_ct++;</span><br><span class=\"line\">        \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'U'</span>: u_ct++;</span><br><span class=\"line\">        \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>: <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// switch结束</span></span><br><span class=\"line\">&#125; <span class=\"comment\">// while循环结束</span></span><br></pre></td></tr></table></figure><p>或者，也可以先不转换ch，把<code>toupper(ch)</code>放进<code>switch</code>的测试条件中：<code>switch(toupper(ch))</code>。</p>\n<p>小结：带多重选择的<code>switch</code>语句</p>\n<p>关键字：<code>switch</code></p>\n<p>一般注解：</p>\n<p>程序根据expression的值跳转至相应的case标签处。然后，执行剩下的所有语句，除非执行到break语句进行重定向。<strong>expression和case标签都必须是整数值（包括<code>char</code>类型），标签必须是常量或完全由常量组成的表达式。</strong>如果没有case标签与expression的值匹配，控制则转至标有<code>default</code>的语句（如果有的话）；否则，将转至执行紧跟在<code>switch</code>语句后面的语句。</p>\n<p>形式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> ( expression )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> label1 : statement1<span class=\"comment\">//使用break跳出switch</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> label2 : statement2</span><br><span class=\"line\">    <span class=\"keyword\">default</span>　　 : statement3</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>可以有多个标签语句，default语句可选。</p>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (choice)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span> :</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span> : <span class=\"built_in\">printf</span>(<span class=\"string\">\"Darn tootin'!\\n\"</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span> : <span class=\"built_in\">printf</span>(<span class=\"string\">\"Quite right!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span> : <span class=\"built_in\">printf</span>(<span class=\"string\">\"Good show!\\n\"</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">\"Have a nice day.\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>如果choice的值是1或2，打印第1条消息；如果choice的值是3，打印第2条和第3条消息（程序继续执行后续的语句，因为case 3后面没有break语句）；如果choice的值是4，则打印第3条消息；如果choice的值是其他值只打印最后一条消息。</p>\n<h3 id=\"switch和if-else\">switch和if else<a href=\"#switch和if-else\" title=\"switch和if else\"></a></h3><p>何时使用<code>switch</code>？何时使用<code>if else</code>？你经常会别无选择。如果是根据浮点类型的变量或表达式来选择，就无法使用 <code>switch</code>。如果根据变量在某范围内决定程序流的去向，使用 <code>switch</code> 就很麻烦，这种情况用if就很方便：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (integer &lt; <span class=\"number\">1000</span> &amp;&amp; integer &gt; <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure><p>使用<code>switch</code>要涵盖以上范围，需要为每个整数（3～999）设置<code>case</code>标签。但是，如果使用<code>switch</code>，程序通常运行快一些，生成的代码少一些。</p>\n<h2 id=\"goto语句\">goto语句<a href=\"#goto语句\" title=\"goto语句\"></a></h2><p>早期版本的<strong>BASIC</strong>和<strong>FORTRAN</strong>所依赖的<code>goto</code>语句，在C中仍然可用。但是C和其他两种语言不同，没有<code>goto</code>语句C程序也能运行良好。Kernighan和Ritchie提到<code>goto</code>语句“易被滥用”，并建议“谨慎使用，或者根本不用”。首先，介绍一下如何使用<code>goto</code>语句；然后，讲解为什么通常不需要它。</p>\n<p><code>goto</code>语句有两部分：<strong><code>goto</code>和标签名</strong>。标签的命名遵循变量命名规则，如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">goto</span> part2;</span><br></pre></td></tr></table></figure><p>要让这条语句正常工作，函数还必须包含另一条标为part2的语句，该语句以标签名后紧跟一个冒号开始：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">part2: <span class=\"built_in\">printf</span>(<span class=\"string\">\"Refined analysis:\\n\"</span>);</span><br></pre></td></tr></table></figure><h3 id=\"避免使用goto\">避免使用goto<a href=\"#避免使用goto\" title=\"避免使用goto\"></a></h3><p>原则上，根本不用在C程序中使用<code>goto</code>语句。但是，如果你曾经学过FORTRAN或BASIC（<code>goto</code>对这两种语言而言都必不可少），可能还会依赖用<code>goto</code>来编程。为了帮助你克服这个习惯，我们先概述一些使用<code>goto</code>的常见情况，然后再介绍C的解决方案。</p>\n<p>处理包含多条语句的if语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">size</span> &gt; <span class=\"number\">12</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> a;</span><br><span class=\"line\"><span class=\"keyword\">goto</span> b;</span><br><span class=\"line\">a: cost = cost * <span class=\"number\">1.05</span>;</span><br><span class=\"line\">flag = <span class=\"number\">2</span>;</span><br><span class=\"line\">b: bill = cost * flag;</span><br></pre></td></tr></table></figure><p>对于以前的BASIC和FORTRAN，只有直接跟在<code>if</code>条件后面的一条语句才属于<code>if</code>，不能使用块或复合语句。我们把以上模式转换成等价的C代码，标准C用复合语句或块来处理这种情况：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">size</span> &gt; <span class=\"number\">12</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cost = cost * <span class=\"number\">1.05</span>;</span><br><span class=\"line\">    flag = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bill = cost * flag;</span><br></pre></td></tr></table></figure><p>二选一：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (ibex &gt; <span class=\"number\">14</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> a;</span><br><span class=\"line\">sheds = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">goto</span> b;</span><br><span class=\"line\">a: sheds= <span class=\"number\">3</span>;</span><br><span class=\"line\">b: help = <span class=\"number\">2</span> * sheds;</span><br></pre></td></tr></table></figure><p>C通过if else表达二选一更清楚：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (ibex &gt; <span class=\"number\">14</span>)</span><br><span class=\"line\">sheds = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">sheds = <span class=\"number\">2</span>;</span><br><span class=\"line\">help = <span class=\"number\">2</span> * sheds;</span><br></pre></td></tr></table></figure><p>实际上，新版的BASIC和FORTRAN已经把<code>else</code>纳入新的语法中。</p>\n<p>创建不确定循环：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">readin: <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;score);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (score &lt; O)</span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> stage2;</span><br><span class=\"line\">lots of statements</span><br><span class=\"line\"><span class=\"keyword\">goto</span> readin;</span><br><span class=\"line\">stage2: more stuff;</span><br></pre></td></tr></table></figure><p>C用while循环代替：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;score);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (score &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    lots of statements</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;score);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">more stuff;</span><br></pre></td></tr></table></figure><p>跳转至循环末尾，并开始下一轮迭代。C使用<code>continue</code>语句代替。</p>\n<p>跳出循环。C使用<code>break</code>语句。实际上，<code>break</code>和<code>continue</code>是<code>goto</code>的特殊形式。使用<code>break</code>和 <code>continue</code> 的好处是：其名称已经表明它们的用法，而且这些语句不使用标签，所以不用担心把标签放错位置导致的危险。</p>\n<p>胡乱跳转至程序的不同部分。简而言之，不要这样做！</p>\n<p>但是，C程序员可以接受一种<code>goto</code>的用法——出现问题时从一组嵌套循环中跳出（一条<code>break</code>语句只能跳出当前循环）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (funct &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>, i &lt;= <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">50</span>; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            其他语句</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (问题)</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> help;</span><br><span class=\"line\">        \t其他语句</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        其他语句</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    其他语句</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">其他语句</span><br><span class=\"line\">help: 语句</span><br></pre></td></tr></table></figure><p>从其他例子中也能看出，程序中使用其他形式比使用<code>goto</code>的条理更清晰。当多种情况混在一起时，这种差异更加明显。哪些<code>goto</code>语句可以帮助if语句？哪些可以模仿<code>if else</code>？哪些控制循环？哪些是因为程序无路可走才不得已放在那里？过度地使用 <code>goto</code> 语句，会让程序错综复杂。如果不熟悉<code>goto</code>语句，就不要使用它。如果已经习惯使用<code>goto</code>语句，试着改掉这个毛病。讽刺地是，虽然C根本不需要<code>goto</code>，但是它的<code>goto</code>比其他语言的<code>goto</code>好用，因为C允许在标签中使用描述性的单词而不是数字。</p>\n<p>小结：程序跳转</p>\n<p>关键字：<code>break</code>、<code>continue</code>、<code>goto</code></p>\n<p>一般注解：</p>\n<p>这3种语句都能使程序流从程序的一处跳转至另一处。</p>\n<p><code>break</code>语句：</p>\n<p>所有的循环和<code>switch</code>语句都可以使用<code>break</code>语句。它使程序控制跳出当前循环或<code>switch</code>语句的剩余部分，并继续执行跟在循环或<code>switch</code>后面的语句。</p>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (number)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">\"That's a good choice.\\n\"</span>);</span><br><span class=\"line\">    \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">5</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">\"That's a fair choice.\\n\"</span>);</span><br><span class=\"line\">    \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">\"That's a poor choice.\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><code>continue</code>语句：</p>\n<p><strong>所有的循环都可以使用<code>continue</code>语句，但是<code>switch</code>语句不行。</strong><code>continue</code>语句使程序控制跳出循环的剩余部分。对于<code>while</code>或<code>for</code>循环，程序执行到<code>continue</code>语句后会开始进入下一轮迭代。对于<code>do while</code>循环，对出口条件求值后，如有必要会进入下一轮迭代。</p>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ((ch = getchar()) != <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">' '</span>)</span><br><span class=\"line\">    \t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(ch);</span><br><span class=\"line\">    chcount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>以上程序段把用户输入的字符再次显示在屏幕上，并统计非空格字符。</p>\n<p><code>goto</code>语句：</p>\n<p><code>goto</code>语句使程序控制跳转至相应标签语句。冒号用于分隔标签和标签语句。标签名遵循变量命名规则。标签语句可以出现在<code>goto</code>的前面或后面。</p>\n<p>形式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">goto</span> label;</span><br><span class=\"line\">label: statement</span><br></pre></td></tr></table></figure><p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top: ch=getchar();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ch!=<span class=\"string\">'y'</span>)</span><br><span class=\"line\"><span class=\"keyword\">goto</span> top;</span><br></pre></td></tr></table></figure><h2 id=\"关键概念\">关键概念<a href=\"#关键概念\" title=\"关键概念\"></a></h2><p>智能的一个方面是，根据情况做出相应的响应。所以，选择语句是开发具有智能行为程序的基础。C语言通过<code>if</code>、<code>if else</code>和<code>switch</code>语句，以及条件运算符（<code>?:</code>）可以实现智能选择。</p>\n<p><code>if</code> 和 <code>if else</code> 语句使用测试条件来判断执行哪些语句。所有非零值都被视为 true，零被视为false。测试通常涉及关系表达式（比较两个值）、逻辑表达式（用逻辑运算符组合或更改其他表达式）。</p>\n<p>要记住一个通用原则，如果要测试两个条件，应该使用逻辑运算符把两个完整的测试表达式组合起来。例如，下面这些是错误的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (a &lt; x &lt; z)　　　　　　 <span class=\"comment\">// 错误，没有使用逻辑运算符</span></span><br><span class=\"line\">…</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ch != <span class=\"string\">'q'</span> &amp;&amp; != <span class=\"string\">'Q'</span>)　 <span class=\"comment\">// 错误，缺少完整的测试表达式</span></span><br><span class=\"line\">…</span><br></pre></td></tr></table></figure><p>正确的方式是用逻辑运算符连接两个关系表达式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (a &lt; x &amp;&amp; x &lt; z)　　　　　　 <span class=\"comment\">// 使用&amp;&amp;组合两个表达式</span></span><br><span class=\"line\">…</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ch != <span class=\"string\">'q'</span> &amp;&amp; ch != <span class=\"string\">'Q'</span>)　　<span class=\"comment\">// 使用&amp;&amp;组合两个表达式</span></span><br><span class=\"line\">…</span><br></pre></td></tr></table></figure><p>对比这两章和前几章的程序示例可以发现：使用第6章、第7章介绍的语句，可以写出功能更强大、更有趣的程序。</p>\n<h2 id=\"本章小结\">本章小结<a href=\"#本章小结\" title=\"本章小结\"></a></h2><p>本章介绍了很多内容，我们来总结一下。<code>if</code>语句使用测试条件控制程序是否执行测试条件后面的一条简单语句或复合语句。如果测试表达式的值是非零值，则执行语句；如果测试表达式的值是零，则不执行语句。<code>if else</code>语句可用于二选一的情况。如果测试条件是非零，则执行<code>else</code>前面的语句；如果测试表达式的值是零，则执行<code>else</code>后面的语句。在<code>else</code>后面使用另一个<code>if</code>语句形成<code>else if</code>，可构造多选一的结构。</p>\n<p>测试条件通常都是关系表达式，即用一个关系运算符（如，<code>&lt;</code>或<code>==</code>）的表达式。使用C的逻辑运算符，可以把关系表达式组合成更复杂的测试条件。</p>\n<p>在多数情况下，用<strong>条件运算符</strong>（<code>?:</code>）写成的表达式比<code>if else</code>语句更简洁。</p>\n<p><code>ctype.h</code>系列的字符函数（如，<code>issapce()</code>和<code>isalpha()</code>）为创建以分类字符为基础的测试表达式提供了便捷的工具。</p>\n<p><code>switch</code> 语句可以在一系列以整数作为标签的语句中进行选择。如果紧跟在 <code>switch</code> 关键字后的测试条件的整数值与某标签匹配，程序就转至执行匹配的标签语句，然后在遇到break之前，继续执行标签语句后面的语句。</p>\n<p><code>break</code>、<code>continue</code>和<code>goto</code>语句都是跳转语句，使程序流跳转至程序的另一处。<code>break</code>语句使程序跳转至紧跟在包含<code>break</code>语句的循环或<code>switch</code>末尾的下一条语句。<code>continue</code>语句使程序跳出当前循环的剩余部分，并开始下一轮迭代。</p>\n","prev":{"title":"Step6 字符输入/输出和输入验证","link":"posts/86602531"},"next":{"title":"emoji符号大全","link":"posts/e193db5d"},"plink":"https://dxsummer.gitee.io/posts/3e5d0fae/","toc":[{"id":"if语句","title":"if语句","index":"1"},{"id":"if-else语句","title":"if else语句","index":"2","children":[{"id":"另一个示例：介绍getchar和putchar","title":"另一个示例：介绍getchar()和putchar()","index":"2.1"},{"id":"ctypeh系列的字符函数","title":"ctype.h系列的字符函数","index":"2.2"},{"id":"多重选择else-if","title":"多重选择else if","index":"2.3"},{"id":"else与if配对","title":"else与if配对","index":"2.4"},{"id":"多层嵌套的if语句","title":"多层嵌套的if语句","index":"2.5"}]},{"id":"逻辑运算符","title":"逻辑运算符","index":"3","children":[{"id":"备选拼写：iso646h头文件","title":"备选拼写：iso646.h头文件","index":"3.1"},{"id":"优先级","title":"优先级","index":"3.2"},{"id":"求值顺序","title":"求值顺序","index":"3.3"},{"id":"范围","title":"范围","index":"3.4"}]},{"id":"一个统计单词的程序","title":"一个统计单词的程序","index":"4"},{"id":"条件运算符：","title":"条件运算符：?:","index":"5"},{"id":"循环辅助：continue和break","title":"循环辅助：continue和break","index":"6","children":[{"id":"continue语句","title":"continue语句","index":"6.1"},{"id":"break语句","title":"break语句","index":"6.2"}]},{"id":"多重选择：switch和break","title":"多重选择：switch和break","index":"7","children":[{"id":"switch语句","title":"switch语句","index":"7.1"},{"id":"只读每行的首字符","title":"只读每行的首字符","index":"7.2"},{"id":"多重标签","title":"多重标签","index":"7.3"},{"id":"switch和if-else","title":"switch和if else","index":"7.4"}]},{"id":"goto语句","title":"goto语句","index":"8","children":[{"id":"避免使用goto","title":"避免使用goto","index":"8.1"}]},{"id":"关键概念","title":"关键概念","index":"9"},{"id":"本章小结","title":"本章小结","index":"10"}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/3e5d0fae/\" title=\"Step5 C控制语句：分支和跳转\">https://dxsummer.gitee.io/posts/3e5d0fae/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2020年6月6日","updated":"2020年6月8日"}}