{"title":"C语言菜鸟笔记","date":"2020-04-23T05:18:11.000Z","date_formatted":{"ll":"2020年4月23日","L":"2020/04/23","MM-DD":"04-23"},"link":"posts/4f274412","comments":true,"categories":["C语言"],"updated":"2020-06-26T14:48:52.192Z","content":"<p class='div-border yellow left right'>此帖记录C语言学习笔记，整合从最初学习C语言遇到的问题到一步步成长</p><h2 id=\"数据\">数据<a href=\"#数据\" title=\"数据\"></a></h2><h3 id=\"c-语言中-main、void-main-和-int-mainvoid-有什么区别？\">C 语言中 main()、void main() 和 int main(void) 有什么区别？<a href=\"#c-语言中-main、void-main-和-int-mainvoid-有什么区别？\" title=\"C 语言中 main()、void main() 和 int main(void) 有什么区别？\"></a></h3><ol><li><p><code>main()</code>是K&amp;R C的语法，也就是C89，现在可以使用，但是不推荐。<br><code>int main(void)</code>是c99的语法。<br><code>void main()</code>不是任何标准定义的，根据维基百科 C语言 的说法，这个是微软自己定义的。</p>\n</li>\n<li><p><code>int main(void)</code>表示返回一个整数值，不接收任何参数。<br><code>main()</code>按照老的C语言标准，不写返回值的函数默认返回类型为整形。空的括号表示可以接收任意个数任意类型的参数。</p>\n</li>\n<li><p><code>void main()</code> 的空括号表示可以接收任意个数任意类型的参数。<mark>在一般函数里void表示没有返回值</mark>。但是这个在main函数里面有点特殊,按照C99标准的5.1.2.2.3节描述，程序依然会返回一个unspecified的值。(实际上这一节的内容也隐喻了main函数可以不是<code>int main(void)</code>的形式)</p>\n</li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pound</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br></pre></td></tr></table></figure><p><mark><strong>如果函数不接受任何参数，函数头的圆括号中应该写上关键字 void</strong></mark>。由于该函数接受一个 <code>int</code> 类型的参数，所以圆括号中包含一个<code>int</code>类型变量<code>n</code>的声明。</p>\n</li>\n</ol><h3 id=\"c-标识符只能由字母下划线和数字组成-且不能以数字开头。\">C 标识符只能由字母.下划线和数字组成 且不能以数字开头。<a href=\"#c-标识符只能由字母下划线和数字组成-且不能以数字开头。\" title=\"C 标识符只能由字母.下划线和数字组成 且不能以数字开头。\"></a></h3><h3 id=\"int常量是求不大于括号内数字-的最大整数\">int(常量)是求不大于括号内数字 的最大整数<a href=\"#int常量是求不大于括号内数字-的最大整数\" title=\"int(常量)是求不大于括号内数字 的最大整数\"></a></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>(<span class=\"number\">3.5</span>)=<span class=\"number\">3</span></span><br></pre></td></tr></table></figure><h3 id=\"float在计算机中存储类型默认为double精度\">float在计算机中存储类型默认为double精度<a href=\"#float在计算机中存储类型默认为double精度\" title=\"float在计算机中存储类型默认为double精度\"></a></h3><ol><li><p><code>char</code>为1字符，8位</p>\n<p><code>short</code> 2字节 16位</p>\n<p><code>short int</code> 2字节 16位 输出格式：<code>%hd</code></p>\n<p><code>int</code>为2字符或4字符，16位或32位</p>\n<p><code>float</code>实际为4字符，即32位,C语言，<code>float</code>类型值会被自动转换成<code>double</code>类型,即64位</p>\n<p><code>long</code>浮点数要占用4字节，32位</p>\n<p><code>double</code> 八字节，64位</p>\n<p><code>long long</code> 八字节，64位</p>\n<p><code>long double</code> 十六位，128位</p>\n</li>\n<li><p>默认情况下，<mark>编译器假定<strong>浮点型float</strong>常量是<code>double</code>类型的精度</mark>。例如，假设some是float类型的变量，编写下面的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">some = <span class=\"number\">4.0</span> * <span class=\"number\">2.0</span>;</span><br></pre></td></tr></table></figure><p> 通常，4.0和2.0被储存为64位的<code>double</code>类型，使用双精度进行乘法运算，然后将乘积截断成float类型的宽度。这样做虽然计算精度更高，但是会减慢程序的运行速度。</p>\n</li>\n<li><p><strong>在浮点数后面加上<code>f</code>或<code>F</code>后缀可覆盖默认设置</strong>，编译器会将浮点型常量看作<code>float</code>类型，如<code>2.3f</code>和<code>9.11E9F</code>。使用<code>l</code>或<code>L</code>后缀使得数字成为<code>long double</code>类型，如<code>54.3l</code>和<code>4.32L</code>。注意，建议使用<code>L</code>后缀，因为字母<code>l</code>和数字<code>1</code>很容易混淆。<mark>没有后缀的浮点型常量是<code>double</code>类型。</mark></p>\n</li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Type <span class=\"keyword\">int</span> has a <span class=\"built_in\">size</span> of <span class=\"number\">4</span> bytes.</span><br><span class=\"line\">Type <span class=\"keyword\">char</span> has a <span class=\"built_in\">size</span> of <span class=\"number\">1</span> bytes.</span><br><span class=\"line\">Type <span class=\"keyword\">long</span> has a <span class=\"built_in\">size</span> of <span class=\"number\">4</span> bytes.</span><br><span class=\"line\">Type <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> has a <span class=\"built_in\">size</span> of <span class=\"number\">8</span> bytes.</span><br><span class=\"line\">Type <span class=\"keyword\">double</span> has a <span class=\"built_in\">size</span> of <span class=\"number\">8</span> bytes.</span><br><span class=\"line\">Type <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> has a <span class=\"built_in\">size</span> of <span class=\"number\">16</span> bytes.</span><br></pre></td></tr></table></figure></li>\n</ol><h3 id=\"float\">float<a href=\"#float\" title=\"float\"></a></h3><p><strong>float类型的数字通常只能储存按指数比例缩小或放大的6或7位有效数字。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* floaterr.c--演示舍入错误 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">float</span>　a,b;</span><br><span class=\"line\">    b　=　<span class=\"number\">2.0e20</span>　+　<span class=\"number\">1.0</span>;</span><br><span class=\"line\">    a　=　b　-　<span class=\"number\">2.0e20</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%f　\\n\"</span>,　a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下<br><img src=\"https://i.loli.net/2020/04/24/pIM1fPDzQNqRJa9.jpg\" class=\"φcy\"></p>\n<p>得出这些奇怪答案的原因是，计算机缺少足够的小数位来完成正确的运算。2.0e20是 2后面有20个0。如果把该数加1，那么发生变化的是第21位。要正确运算，程序至少要储存21位数字。而float类型的数字通常只能储存按指数比例缩小或放大的6或7位有效数字。在这种情况下，计算结果一定是错误的。另一方面，如果把2.0e20改成2.0e4，计算结果就没问题。因为2.0e4加1只需改变第5位上的数字，float类型的精度足够进行这样的计算。</p>\n<h3 id=\"字符串常量\">字符串常量<a href=\"#字符串常量\" title=\"字符串常量\"></a></h3><p>用双引号(<code>“”</code>)括起来的0个或者多个字符组成的序列存储：每个字符串尾自动加一个 ‘<code>\\0</code>’ 作为字符串结束标志</p>\n<p>字符串常量是百一对双引号括起来的字符序列。字符常量可以赋值给字符变量，如<code>char b=&#39;a&#39;;</code>,但不能把一个字符串常量赋给一个字符变量，同时也不能对字符串常量赋值。</p>\n<h3 id=\"优先级\">优先级<a href=\"#优先级\" title=\"优先级\"></a></h3><blockquote>\n<p><strong>算数运算符&gt;关系运算符&gt;赋值运算符</strong></p>\n</blockquote>\n<p><strong><mark>关系运算符的优先级比算术运算符低</mark></strong>（包括<code>+</code>和<code>-</code>），比赋值运算符高。这意味着<code>x &gt; y + 2</code>和<code>x &gt; (y+ 2)</code>相同，<code>x = y &gt; 2</code>和<code>x = (y &gt; 2)</code>相同。换言之，如果y大于2，则给x赋值1，否则赋值0。y的值不会赋给x。</p>\n<p><strong><mark>关系运算符比赋值运算符的优先级高</mark></strong>，因此，<code>x_bigger=x&gt;y;</code>相当于<code>x_bigger=(x &gt; y);</code>。</p>\n<p>关系运算符之间有两种不同的优先级。</p>\n<p>高优先级组： <code>&lt;&lt;= &gt;&gt;=</code></p>\n<p>低优先级组： <code>== !=</code></p>\n<p>与其他大多数运算符一样，<strong><mark>关系运算符的结合律也是从左往右</mark></strong>。因此：</p>\n<p><code>ex!=wye==zee</code>与<code>(ex != wye) == zee</code>相同</p>\n<p>首先，C判断<code>ex</code>与<code>wye</code>是否相等；然后，用得出的值1或0（真或假）再与<code>zee</code>比较。我们并不推荐这样写，但是在这里有必要说明一下。</p>\n<p>表6.2列出了目前我们学过的运算符的性质。附录B的参考资料II“C运算符”中列出了全部运算符的完整优先级表。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/运算符优先级.png\" class=\"φcy\"></p>\n<h2 id=\"格式化输入\">格式化输入<a href=\"#格式化输入\" title=\"格式化输入\"></a></h2><h3 id=\"字符串s\">字符串%s<a href=\"#字符串s\" title=\"字符串%s\"></a></h3><p>如果使用<code>%s</code> 转换说明，<code>scanf()</code>会读取除空白以外的所有字符。<code>scanf()</code><strong>跳过空白开始读取第 1 个非空白字符</strong>，并保存非空白字符直到再次遇到空白。这意味着 <code>scanf()</code>根据<code>%s</code> 转换说明读取一个单词，即不包含空白字符的字符串</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,s);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n输出%s\"</span>,s);</span><br></pre></td></tr></table></figure><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出</span><br><span class=\"line\">abc123 <span class=\"number\">123</span></span><br><span class=\"line\">输出abc123</span><br></pre></td></tr></table></figure><h2 id=\"格式输出符\">格式输出符<a href=\"#格式输出符\" title=\"格式输出符\"></a></h2><h3 id=\"hu-hd\">%hu hd<a href=\"#hu-hd\" title=\"%hu hd\"></a></h3><ul><li><p><code>%hd</code>表示短整数(short int)。</p>\n</li>\n<li><p><code>%hu</code>用于输出一个<code>unsigned short int</code>类型的数值百，此类型占两个字节，度范围问为0到65535（2^16-1）</p>\n</li>\n<li><p><mark><code>%hhu</code>用于输出一个<code>unsigned short</code>类型答的数值</mark>，此类型占一个字节，范围为0到255（2^8-1）</p>\n</li>\n</ul><h3 id=\"mne、e\">%m.ne、%e<a href=\"#mne、e\" title=\"%m.ne、%e\"></a></h3><p><code>%e</code>是按指数的形式输出，比如 <code>4.22e5</code></p>\n<p><code>e</code>表示10的N次方，5.2 长度为5，小数点精确度为2，这个本身和复<code>%e</code>没有关系，C语言的输出就是标准就这样。</p>\n<p><code>%hd</code>：<code>short int</code> 16位</p>\n<p>详细点的说明就是 <code>%m.ne</code> 指定输出的数值共占m位，其中有n位小数制。<mark>若数值长度小于m，则左端补空格。若数值长度大于m，则按实际数值输出，小数位保留n位。</mark></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\">main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">float</span> i=<span class=\"number\">1777777</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%3.2f\"</span>,i);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1777777.00</span></span><br></pre></td></tr></table></figure><p>这是<code>ptintf()</code>的格式。</p>\n<p><img src=\"https://i.loli.net/2020/05/09/9Ad3hVP7aYZS4ix.png\" class=\"φcy\"><br><img src=\"https://i.loli.net/2020/05/09/EUbTfNxDqXnWJSZ.jpg\" class=\"φcy\"></p>\n<h3 id=\"带格式输出-x\">带格式输出 %#x<a href=\"#带格式输出-x\" title=\"带格式输出 %#x\"></a></h3><ol><li><p><code>%#x</code>是带格<code>zd</code>式输出, 效果为在输出前加<code>0x</code>.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%x %X %#x\\n\"</span>, <span class=\"number\">31</span>, <span class=\"number\">31</span>, <span class=\"number\">31</span>);</span><br></pre></td></tr></table></figure><p> 输出</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1f</span> <span class=\"number\">1F</span> <span class=\"number\">0x1f</span></span><br></pre></td></tr></table></figure></li>\n<li><p>输出演示了如何在整型格式中使用精度（%5.3d）生成足够的前导0以满足最小位数的要求（本例是3）。然而，使用0标记会使得编译器用前导0填充满整个字段宽度。最后，如果0标记和精度一起出现，0标记会被忽略。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"**%5d**%5.3d**%05d**%05.3d**\\n\"</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>);</span><br></pre></td></tr></table></figure><p> 输出：  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**    <span class=\"number\">6</span>**  <span class=\"number\">006</span>**<span class=\"number\">00006</span>**  <span class=\"number\">006</span>**</span><br></pre></td></tr></table></figure></li>\n</ol><h3 id=\"带格式输出-s\">带格式输出 %*s<a href=\"#带格式输出-s\" title=\"带格式输出 %*s\"></a></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a;</span><br><span class=\"line\"><span class=\"keyword\">char</span> b[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%*s\"</span>,&amp;a,b);</span><br></pre></td></tr></table></figure><p>输入为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">12</span> abc</span><br></pre></td></tr></table></figure><p>那么12将会读取到变量<code>a</code>中，但是后面的abc将在读取之后抛弃，不赋予任何变量(例如这里的字符数组b）<br>用<code>*</code>和扫描集配合，可以从输入中只选出需要的内容，而忽略其余的东西。<br>另外，也常用于清空缓冲区。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%*s\"</span>,<span class=\"number\">10</span>,s);</span><br></pre></td></tr></table></figure><p>意思是输出字符串s，但至少占10个位置，不足的在字符串s左边补空格，这里等同于</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%10s\"</span>,s);</span><br></pre></td></tr></table></figure><h3 id=\"带格式输入输出-d\">带格式输入输出 %*d<a href=\"#带格式输入输出-d\" title=\"带格式输入输出 %*d\"></a></h3><p><mark>如果转换说明是<code>%*d</code>，那么参数列表中应包含<code>*</code>和 <code>d</code>对应的值</mark></p>\n<blockquote>\n<p><strong>例一 printf()</strong></p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;<span class=\"built_in\">width</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"The number is :%*d:\\n\"</span>, <span class=\"built_in\">width</span>, number);</span><br></pre></td></tr></table></figure><p>输出</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\">The number is :      <span class=\"number\">256</span>:</span><br></pre></td></tr></table></figure><blockquote>\n<p><strong>例二 printf()</strong></p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;<span class=\"built_in\">width</span>, &amp;precision);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Weight = %*.*f\\n\"</span>, <span class=\"built_in\">width</span>, precision, weight);</span><br></pre></td></tr></table></figure><p>输出</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">8</span> <span class=\"number\">3</span></span><br><span class=\"line\">Weight = <span class=\"number\">242.500</span></span><br></pre></td></tr></table></figure><blockquote>\n<p><strong>例三 scanf()</strong></p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%*d %*d %d\"</span>, &amp;n);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"The last integer was %d\\n\"</span>, n);</span><br></pre></td></tr></table></figure><p><code>scanf()</code>指示：跳过两个整数，把第3个整数拷贝给n。下面是一个运行示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2013</span> <span class=\"number\">2014</span> <span class=\"number\">2015</span></span><br><span class=\"line\">The last integer was <span class=\"number\">2015</span></span><br></pre></td></tr></table></figure><p>在程序需要读取文件中特定列的内容时，这项跳过功能很有用。</p>\n<h3 id=\"strlen和-sizeof的区别\">strlen()和 sizeof()的区别<a href=\"#strlen和-sizeof的区别\" title=\"strlen()和 sizeof()的区别\"></a></h3><p>C语言中没有字符串类型，字符串在内存中是用字符数组表示的。</p>\n<p><code>strlen( )</code>：<code>strlen( )</code>求得的是字符串的长度 <code>%u</code>、<code>%lu</code>、<code>%zd</code></p>\n<p><code>sizeof( )</code>：<code>sizeof( )</code>计算字符串占的总内存空间 <code>%u</code>、<code>%lu</code>、<code>%zd</code></p>\n<p>例如字符串  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str[20]&#x3D; &#123;“abcdef”&#125;;</span><br></pre></td></tr></table></figure><p><code>strlen(str)</code>,结果为6</p>\n<p><code>sizeof(str)</code>,结果为20</p>\n<h3 id=\"x-y-xy\">x-=y x+=y<a href=\"#x-y-xy\" title=\"x-=y x+=y\"></a></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x+=y\t<span class=\"comment\">/*x=x+y*/</span></span><br><span class=\"line\">x-=y\t<span class=\"comment\">/*x=x-y*/</span></span><br></pre></td></tr></table></figure><h3 id=\"scanf（）-的返回值\">scanf（） 的返回值<a href=\"#scanf（）-的返回值\" title=\"scanf（） 的返回值\"></a></h3><p><code>C=scanf()</code> 返回值赋给<code>C</code></p>\n<ul><li><code>C</code>表示<code>scanf（）</code>成功收到赋值的个数</li>\n</ul><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"keyword\">int</span> a,b,c;</span><br><span class=\"line\">    c=<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>,&amp;a,&amp;b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">为什么我</span><br><span class=\"line\">    输入a <span class=\"number\">1</span>\tc的值就为<span class=\"number\">0</span>，</span><br><span class=\"line\">    输入<span class=\"number\">1</span> a\tc的值为<span class=\"number\">1</span></span><br></pre></td></tr></table></figure><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>返回接收到的变量值的个数。 </span><br><span class=\"line\"><span class=\"keyword\">int</span>  a,b,c。</span><br><span class=\"line\">a <span class=\"number\">1</span>进去时，试图用字符‘a’对a赋值，肯定是错的，于是退出，返回成功接收到赋值的个数 <span class=\"number\">0.</span></span><br><span class=\"line\"><span class=\"number\">1</span> a进去时，首先a能获取<span class=\"number\">1.</span>但b不能获取<span class=\"string\">'a'</span>,于是返回只是<span class=\"number\">1</span> </span><br><span class=\"line\">如果是  <span class=\"number\">1</span> <span class=\"number\">1</span>的话，那就都成功，返回<span class=\"number\">2</span></span><br></pre></td></tr></table></figure><h3 id=\"指针\">指针<a href=\"#指针\" title=\"指针\"></a></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp = *u;</span><br></pre></td></tr></table></figure><p>记住，<code>u</code>的值是<code>&amp;x</code>，即x的地址，所以<code>u</code>指向<code>x</code>。这意味着用<code>*u</code>即可表示<code>x</code>的值，这正是我们需要的。不要写成这样：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp = u; <span class=\"comment\">/* 不要这样做 */</span></span><br></pre></td></tr></table></figure><p>因为这条语句赋给<code>temp</code>的是<code>x</code>的地址（<code>u</code>的值就是<code>x</code>的地址），而不是<code>x</code>的值。函数要交换的是x和y的值，而不是它们的地址。</p>\n<h3 id=\"二维数组名、二维数组名取地址、二级指针\">二维数组名、二维数组名取地址、二级指针<a href=\"#二维数组名、二维数组名取地址、二级指针\" title=\"二维数组名、二维数组名取地址、二级指针\"></a></h3><p>首先给出几个定义：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef int (*p1x4)[4];//定义数据类型，p1x4这种类型为指向含4个int元素的1维数组的指针</span><br><span class=\"line\">typedef int (*p3x4)[3][4];//定义数据类型，p3x4这种类型为指向含3x4个int元素的2维数组的指针</span><br></pre></td></tr></table></figure><p>下面从一维数组说起：（定义：<code>int a[4]</code>）</p>\n<ol><li><p>一维数组名<code>a</code>是个地址，地址类型为：<code>int *</code></p>\n</li>\n<li><p>一维数组名取地址<code>&amp;a</code>是个地址，地址类型同：<code>int (*p)[4]</code>， 也即<code>&amp;a</code>指向含4个<code>int</code>元素的一维数组</p>\n</li>\n</ol><p>再看二维数组<code>b[3][4]</code>，这个二维数组也可以可以看成一个含3个成员的一维数组，每一个成员含有4个<code>int</code>元素，依次，仿照一维数组的结论，有：</p>\n<ol><li><p><code>b[0]</code>是个一维数组名，也是个地址，地址类型为：<code>int *</code></p>\n</li>\n<li><p><code>&amp;b[0]</code>是个地址，地址类型同：<code>int (*p)[4]</code>， 也即<code>&amp;b[0]</code>指向含4个<code>int</code>元素的一维数组</p>\n<p><strong>更进一步：</strong></p>\n</li>\n<li><p><code>b</code>是个地址，地址类型同：<code>int (*p)[4]</code>，也即<code>b</code>指向含4个<code>int</code>元素的一维数组</p>\n</li>\n<li><p><code>&amp;b</code>是个地址，地址类型同：<code>int (*p)[3][4]</code>，也即<code>&amp;b</code>指向含3x4个<code>int</code>元素的2维数组</p>\n</li>\n</ol><p>注意：尤其注意上面的（3），这条结论指出了：<mark><strong>二维数组名实际上是一维数组的地址！</strong></mark></p>\n<p><strong>总结：</strong></p>\n<p>① 数组名，是指向它的第一个一级成员的指针</p>\n<p>② 数组名取地址，是指向整个数组的指针</p>\n<p>PS：所谓一级成员，举个例子，<code>int a[5]</code>，那么数组<code>a</code>的一级成员就是<code>int</code>型变量；<code>int b[10][5]</code>，数组b的一级成员是<code>int [5]</code>的一维数组</p>\n","prev":{"title":"英语笔记","link":"posts/4e70975"},"next":{"title":"加油吧！少年——社会还在逼他们继续奋斗","link":"posts/ca5d3c1d"},"plink":"https://dxsummer.gitee.io/posts/4f274412/","toc":[{"id":"数据","title":"数据","index":"1","children":[{"id":"c-语言中-main、void-main-和-int-mainvoid-有什么区别？","title":"C 语言中 main()、void main() 和 int main(void) 有什么区别？","index":"1.1"},{"id":"c-标识符只能由字母下划线和数字组成-且不能以数字开头。","title":"C 标识符只能由字母.下划线和数字组成 且不能以数字开头。","index":"1.2"},{"id":"int常量是求不大于括号内数字-的最大整数","title":"int(常量)是求不大于括号内数字 的最大整数","index":"1.3"},{"id":"float在计算机中存储类型默认为double精度","title":"float在计算机中存储类型默认为double精度","index":"1.4"},{"id":"float","title":"float","index":"1.5"},{"id":"字符串常量","title":"字符串常量","index":"1.6"},{"id":"优先级","title":"优先级","index":"1.7"}]},{"id":"格式化输入","title":"格式化输入","index":"2","children":[{"id":"字符串s","title":"字符串%s","index":"2.1"}]},{"id":"格式输出符","title":"格式输出符","index":"3","children":[{"id":"hu-hd","title":"%hu hd","index":"3.1"},{"id":"mne、e","title":"%m.ne、%e","index":"3.2"},{"id":"带格式输出-x","title":"带格式输出 %#x","index":"3.3"},{"id":"带格式输出-s","title":"带格式输出 %*s","index":"3.4"},{"id":"带格式输入输出-d","title":"带格式输入输出 %*d","index":"3.5"},{"id":"strlen和-sizeof的区别","title":"strlen()和 sizeof()的区别","index":"3.6"},{"id":"x-y-xy","title":"x-&#x3D;y x+&#x3D;y","index":"3.7"},{"id":"scanf（）-的返回值","title":"scanf（） 的返回值","index":"3.8"},{"id":"指针","title":"指针","index":"3.9"},{"id":"二维数组名、二维数组名取地址、二级指针","title":"二维数组名、二维数组名取地址、二级指针","index":"3.10"}]}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/4f274412/\" title=\"C语言菜鸟笔记\">https://dxsummer.gitee.io/posts/4f274412/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2020年4月23日","updated":"2020年6月26日"}}