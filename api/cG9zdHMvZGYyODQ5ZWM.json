{"title":"Java","date":"2021-12-31T12:35:52.000Z","date_formatted":{"ll":"2021年12月31日","L":"2021/12/31","MM-DD":"12-31"},"link":"posts/df2849ec","comments":true,"tags":["Java"],"categories":["Java"],"updated":"2022-01-19T16:10:40.370Z","content":"<h1 id=\"理解面向对象\">理解面向对象<a href=\"#理解面向对象\" title=\"理解面向对象\"></a></h1><h2 id=\"jdk\">JDK<a href=\"#jdk\" title=\"JDK\"></a></h2><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/202111151240397.png\" alt=\"QQ截图20211115123629\" style=\"zoom:67%;\" /><h3 id=\"jdk安装目录\">JDK安装目录<a href=\"#jdk安装目录\" title=\"JDK安装目录\"></a></h3><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/202111151251089.png\" alt=\"QQ截图20211115124959\" style=\"zoom:50%;\" /><p><code>bin</code>：该路径下存放了JDK的各种工具命令，常用的javac、java等命令就放在该路径下。<br><code>db</code>：该路径是安装Java DB的路径。<br><code>include</code>：一些平台特定的头文件。<br><code>jre</code>：该路径下安装的就是运行Java程序所必须的JRE环境。<br><code>lib</code>：该路径下存放的是JDK工具命令的实际执行程序。<br><code>src.zip</code>：该压缩文件里存放的是Java所有核心类库的源代码。<br><code>README</code>和<code>LICENSE</code>等说明性文档。</p>\n<h2 id=\"命令行\">命令行<a href=\"#命令行\" title=\"命令行\"></a></h2><h3 id=\"win-cmd命令\">WIN cmd命令<a href=\"#win-cmd命令\" title=\"WIN cmd命令\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\t\t进入E盘</span><br><span class=\"line\">dir \t查看目录</span><br><span class=\"line\">cd XX \t进入XX文件夹</span><br><span class=\"line\">cd.. \t退出到上一级</span><br><span class=\"line\">cd\\\t\t多级回退</span><br><span class=\"line\">cls\t\t清屏</span><br><span class=\"line\">exit \t退出窗口</span><br><span class=\"line\">↑↓\t\t上下命令切换</span><br><span class=\"line\">Tab\t\t自动补齐文件名</span><br></pre></td></tr></table></figure><h3 id=\"mac-命令行\">mac 命令行<a href=\"#mac-命令行\" title=\"mac 命令行\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd\t进入指定文件夹路径\tcd ~&#x2F;Desktop</span><br><span class=\"line\">pwd\t显示当前的目录路径\t&#x2F;Users&#x2F;xz&#x2F;Desktop</span><br><span class=\"line\">ls\t显示当前目录下的内容\t</span><br><span class=\"line\">ls -la\t显示当前目录下的详细内容\t</span><br><span class=\"line\">ls -A\t显示当前目录下的内容\t含点(.)开头的文件</span><br><span class=\"line\">mkdir\t创建目录\tmkdir dir_name</span><br><span class=\"line\">touch file.format\t创建指定格式的文件\t</span><br><span class=\"line\">mvdir\t移动目录\tmvdir dir1 dir2</span><br><span class=\"line\">mv\t移动&#x2F;重命名---文件&#x2F;文件夹\tmv dir1 dir2</span><br><span class=\"line\">MAC没有重命名的命令</span><br><span class=\"line\">rm\t删除文件 或 空目录\t</span><br><span class=\"line\">rm -rf dir\t删除一个 非空 目录\trm -rf dir</span><br><span class=\"line\">rmdir\t删除 空 目录\t平时用得少</span><br><span class=\"line\">cp\t复制文件或目录\tcp file1 file2</span><br><span class=\"line\">file\t显示文件类型\tfile file_name</span><br><span class=\"line\">find\t使用匹配表达式查找文件\tfind *.file_format</span><br><span class=\"line\">open\t使用默认的程序打开文件\topen file_name</span><br><span class=\"line\">cat\t显示或连接文件内容\tcat file</span><br><span class=\"line\">ln\t为文件创建联接\tln -s file1 file2</span><br><span class=\"line\">s 表示软联接</span><br><span class=\"line\">head\t显示文件的最初几行\thead -20 file_name</span><br><span class=\"line\">tail\t显示文件的最后几行\ttail -10 file_name</span><br><span class=\"line\">paste\t横向拼接文件内容\tpaste file1 file2</span><br><span class=\"line\">diff\t比较并显示两个文件的内容差异\tdiff file1 file2</span><br><span class=\"line\">wc\t统计文件的字符数、词数和行数\twc file_name</span><br><span class=\"line\">uniq\t去掉文件中的重复行\tuniq file_name</span><br><span class=\"line\">grep\t通过简单正则表达式搜索文件</span><br><span class=\"line\"></span><br><span class=\"line\">作者：惑也</span><br><span class=\"line\">链接：https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;4f66b1468646</span><br><span class=\"line\">来源：简书</span><br><span class=\"line\">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h2 id=\"编译\">编译<a href=\"#编译\" title=\"编译\"></a></h2><blockquote>\n<p>一个class的名称为Simple，Java源文件名称可以不是Simple.java么？</p>\n</blockquote>\n<p>答案是可以的，但是前提是该类不是public修饰符。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/202111151303502.png\" alt=\"482124c0e7691066b85c2251fb51c0d5\" style=\"zoom: 44%;\" /><blockquote>\n<p>一个Java源文件中可以写多个类么？</p>\n</blockquote>\n<p>答案是可以的。如下图所示：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/202111151302326.png\" alt=\"a5f0765b294abf4d7f6574401623f945\" style=\"zoom: 44%;\" /><h3 id=\"javac\">javac<a href=\"#javac\" title=\"javac\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac -d destdir srcFile</span><br></pre></td></tr></table></figure><p><code>-d destdir</code>: 指定编译生成的字节码文件的存放路径，<code>destdir</code>是本地磁盘的一个有效地址</p>\n<p><code>srcFile</code>: Java源文件所在地址</p>\n<blockquote>\n<p>例</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/20220101161429.png\" class=\"φcy\" alt=\"QQ截图20211002153323\"></p>\n<p><strong>可省略<code>-d</code>简写</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\&gt; javac helloworld.java</span><br></pre></td></tr></table></figure><h3 id=\"java\">java<a href=\"#java\" title=\"java\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java Java类名</span><br></pre></td></tr></table></figure><blockquote>\n<p>例</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java HelloWorld</span><br></pre></td></tr></table></figure><h3 id=\"根据classpath环境变量定位类\">根据CLASSPATH环境变量定位类<a href=\"#根据classpath环境变量定位类\" title=\"根据CLASSPATH环境变量定位类\"></a></h3><p>如果指定了环境变量，一定不要忘记在CLASSPATH中增加（<code>.</code>），代表当前路径，用以强制Java解释器在当前路径下搜索Java类</p>\n<blockquote>\n<p> 当使用<code>java Java类名</code>来运行java程序时，JRE到哪里搜索Java类？</p>\n</blockquote>\n<ul><li><strong>1.4以前版本</strong><ul><li>需要在CLASSPATH环境变量中添加（.），用以告诉JRE需要在当前路径下搜索Java类</li>\n<li>还需要设置环境变量中的值，<code>;%JAVA_HOME%\\lib\\dt.jar</code> <code>;%JAVA_HOME%\\lib\\tools.jar</code></li>\n</ul></li>\n<li><strong>1.5版本以后</strong><ul><li><strong>一旦设置了环境变量，JRE将会按照环境变量指定的路径来搜索Java类</strong>。意味着如果没有在CLASSPATH环境变量中添加（.），也就是没有包含当前路径，JRE不会搜索当前路径下的Java类</li>\n<li>也可不设置环境变量</li>\n</ul></li>\n</ul><blockquote>\n<p>如果想在运行Java程序时临时指定JRE搜索Java类的路径，可使用 <code>-classpath</code>或者 <code>-cp</code> </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -classpath dir1;dir2;dir3...;dirN Java类</span><br><span class=\"line\">java -classpath D:\\work\\java\\log4.jar HelloWorld</span><br></pre></td></tr></table></figure><p>Windows上用 <code>;</code>隔开 ， Linux使用 <code>：</code>隔开</p>\n<p><mark><code>-classpath</code>选项的值可以是一系列路径</mark></p>\n<blockquote>\n<p>如果希望CLASSPATH环境变量指定搜索路径仍然有效</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -classpath %CLASSPATH%;.;dir1;dir2;dir3...;dirN Java类</span><br></pre></td></tr></table></figure><p><code>%CLASSPATH%</code>:引用环境变量的值</p>\n<p><code>.</code>：强制JRE在当前路径下搜索Java类</p>\n<h3 id=\"源文件命名规则\">源文件命名规则<a href=\"#源文件命名规则\" title=\"源文件命名规则\"></a></h3><ol><li><p>源文件扩展名必须是 <code>.java</code></p>\n</li>\n<li><p>Java程序源文件的主文件名可以是任意的。<mark><strong>如果Java程序源代码里定义了一个public类，则该源文件的主文件名必须为public类的类名相同</strong></mark></p>\n</li>\n<li><p><strong>一个Java源文件最多只能定义一个public类</strong></p>\n</li>\n<li><p>定义3个独立的类，会生成3个 <code>.class</code> 文件，每个类对应一个 <code>.class</code>文件</p>\n<p><strong>生成 <code>Elephant.class</code> <code>Cat.class</code> <code>Dog.class</code> 三个文件</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Elephant</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Elephant\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>Java源文件通常只定义一个类</p>\n</li>\n</ol><h2 id=\"交互式工具-jshell\">交互式工具 jshell<a href=\"#交互式工具-jshell\" title=\"交互式工具 jshell\"></a></h2><ul><li>执行Java语言的变量声明，语句和表达式，可立即看到执行结果</li>\n<li>测试Java的新API</li>\n</ul><blockquote>\n<p>启动：在命令行中直接输入<code>jshell</code></p>\n</blockquote>\n<p><code>/help</code>: 查看帮助信息</p>\n<p><code>/exit</code> : 退出jshell</p>\n<h2 id=\"程序优化\">程序优化<a href=\"#程序优化\" title=\"程序优化\"></a></h2><h3 id=\"java11改进的垃圾回收器\">Java11改进的垃圾回收器<a href=\"#java11改进的垃圾回收器\" title=\"Java11改进的垃圾回收器\"></a></h3><ul><li>为了更快的让垃圾回收器回收那些不再使用的对象，可以<strong>将该对象的引用变量设置为 <code>null</code></strong>，来暗示垃圾回收器可以回收该对象</li>\n<li>对于不再需要的对象，不要引用他们</li>\n</ul><h2 id=\"基本结构-基本特征\">基本结构-基本特征<a href=\"#基本结构-基本特征\" title=\"基本结构-基本特征\"></a></h2><p>任何简单或复杂的算法都可以由<strong>顺序结构、选择结构、循环结构</strong>这三种基本类型组合而成。</p>\n<blockquote>\n<p>面向对象的三大特征</p>\n</blockquote>\n<ul><li><strong>封装</strong>：将对象的实现细节隐藏起来，然后通过一些公用的方法来暴露该对象的功能。</li>\n<li><strong>继承</strong>：面向对象实现软件复用的重要手段，子类作为特殊的父类，将直接获得父类的属性和方法。<strong>Java不支持多继承</strong></li>\n<li><strong>多态</strong>：子类对象可以直接赋给父类变量，但运行时仍然表现出子类的行为特征。</li>\n</ul><h2 id=\"main方法\">main方法<a href=\"#main方法\" title=\"main方法\"></a></h2><ul><li><p>如果需要用Java命令直接运行一个Java类，这个Java类必须包含main方法，这个main方法必须使用<code>public</code>和<code>static</code>修饰，必须使用<code>void</code>声明该方法的返回值，而且该方法的参数类型只能是一个字符串数组</p>\n</li>\n<li><p>Java程序必须以类Class的形式存在，<strong>类是java程序的最小程序单位</strong>。</p>\n</li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"helloworld\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"数据类型和运算符\">数据类型和运算符<a href=\"#数据类型和运算符\" title=\"数据类型和运算符\"></a></h1><h2 id=\"注释\">注释<a href=\"#注释\" title=\"注释\"></a></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t多行注释 java语言很有趣</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//这是单行注释</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//这行代码被注释了 所以不会执行 System.out.println(\"hello\");</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"文档注释\">文档注释<a href=\"#文档注释\" title=\"文档注释\"></a></h3><p>文档说明，用于说明每个类，每个方法的用途</p>\n<blockquote>\n<p>下载官方API文档</p>\n</blockquote>\n<p><a href=\"https://docs.oracle.com/en/java/javase/index.html\" target=\"_blank\">￥点我进入！！！Oracle官方javaAPI</a></p>\n<blockquote>\n<p>文档注释</p>\n</blockquote>\n<p><code>javadoc</code>工具默认只处理以<code>public</code>或<code>protected</code>修饰的类、接口、方法、成员变量、构造器和内部类之前的文档注释</p>\n<p>Java11 的API文档已经支持HTML 5 规范</p>\n<p>文档注释以 <code>/**</code>开始 <code>*/</code>结束</p>\n<ul><li><code>-d &lt;directory&gt;</code> : 该选项指定一个路径，用于将生成的API文档放到<strong>指定目录</strong>下</li>\n<li><code>-windowtitle &lt;test&gt;</code> : 该选项指定一个字符串，用于设置API文档的浏览器<strong>窗口标题</strong></li>\n<li><code>-doctitle &lt;html-code&gt;</code> : 该选项指定一个HTML格式的文本，用于指定概述<strong>页面的标题</strong><ul><li>只有对处于多个包下的源文件来生成API文档时，才有概述页面</li>\n</ul></li>\n<li><code>-header &lt;html-code&gt;</code> : 该选项指定一个HTML格式的文本，包含<strong>每个页面的页眉</strong></li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javadoc -d apidoc -windowtitle 测试 -doctitle 学习javadoc工具的测试API文档 -header 我的类 *Test.java</span><br></pre></td></tr></table></figure><ul><li><code>@author</code> : 指定Java程序的作者</li>\n<li><code>@version</code> : 指定源文件的版本</li>\n<li><code>@deprecated</code> ： 不推荐使用的方法</li>\n<li><code>@param</code> : 方法的参数说明信息</li>\n<li><code>@return</code> ： 方法的返回值说明信息</li>\n<li><code>@see</code> ： “参见” 用于指定交叉参考的内容</li>\n<li><code>@exception</code> : 抛出异常的类型</li>\n<li><code>@throws</code> : 抛出的异常，和<code>@exception</code>同意义 </li>\n</ul><p><mark> <strong>重点</strong> </mark> <strong>javadoc 工具默认不会提取 <code>@author</code> 和 <code>@version</code> 两个标记的信息，如果需要提取这两个标记的信息，应该在使用javadoc工具时指定 <code>-author</code> 和 <code>-version</code> 两个选项</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javadoc -d apidoc -windowtitle 测试 -doctitle 学习javadoc工具的测试API文档 -header 我的类 -version -author *Test.java</span><br></pre></td></tr></table></figure><blockquote>\n<p> 例</p>\n</blockquote>\n<p><strong>codes/JavadocTest.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 网站: &lt;a href=\"https://www.baidu.com\"&gt;11&lt;/a&gt;&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c),2021-2020,YE &lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * This program is protected by copyright laws. &lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Program Name: &lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: &lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> AutumnDx 2088809753@qq.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 5.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavadocTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 简单测试成员变量</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 这是程序的入口函数</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> args 这是调用参数。。。。。。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong>codes/Test.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 网站: &lt;a href=\"https://www.baidu.com\"&gt;11&lt;/a&gt;&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c),2021-2020,YE &lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * This program is protected by copyright laws. &lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Program Name: &lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: &lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> AutumnDx 2088809753@qq.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 5.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 简单测试成员变量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Test类的测试构造器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>在命令行窗口执行命令，将<code>JavadocTest.java</code> 和 <code>Test.java</code> 程序生成API文档：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javadoc -d apidoc -windowtitle 测试 -doctitle 学习javadoc工具的测试API文档 -header 我的类 *Test.java</span><br></pre></td></tr></table></figure><h2 id=\"关键字-标识符\">关键字-标识符<a href=\"#关键字-标识符\" title=\"关键字-标识符\"></a></h2><p><strong>关键字（全部小写）：</strong>全部小写 idea有特殊颜色标记    <code>public</code>    <code>class</code>    <code>static</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java 语言目前定义了 <span class=\"number\">51</span> 个关键字，这些关键字不能作为变量名、类名和方法名来使用。以下对这些关键字进行了分类。</span><br><span class=\"line\">数据类型：<span class=\"keyword\">boolean</span>、<span class=\"keyword\">int</span>、<span class=\"keyword\">long</span>、<span class=\"keyword\">short</span>、<span class=\"keyword\">byte</span>、<span class=\"keyword\">float</span>、<span class=\"keyword\">double</span>、<span class=\"keyword\">char</span>、<span class=\"class\"><span class=\"keyword\">class</span>、<span class=\"title\">interface</span>。</span></span><br><span class=\"line\"><span class=\"class\">流程控制：<span class=\"title\">if</span>、<span class=\"title\">else</span>、<span class=\"title\">do</span>、<span class=\"title\">while</span>、<span class=\"title\">for</span>、<span class=\"title\">switch</span>、<span class=\"title\">case</span>、<span class=\"title\">default</span>、<span class=\"title\">break</span>、<span class=\"title\">continue</span>、<span class=\"title\">return</span>、<span class=\"title\">try</span>、<span class=\"title\">catch</span>、<span class=\"title\">finally</span>。</span></span><br><span class=\"line\"><span class=\"class\">修饰符：<span class=\"title\">public</span>、<span class=\"title\">protected</span>、<span class=\"title\">private</span>、<span class=\"title\">final</span>、<span class=\"title\">void</span>、<span class=\"title\">static</span>、<span class=\"title\">strict</span>、<span class=\"title\">abstract</span>、<span class=\"title\">transient</span>、<span class=\"title\">synchronized</span>、<span class=\"title\">volatile</span>、<span class=\"title\">native</span>。</span></span><br><span class=\"line\"><span class=\"class\">动作：<span class=\"title\">package</span>、<span class=\"title\">import</span>、<span class=\"title\">throw</span>、<span class=\"title\">throws</span>、<span class=\"keyword\">extends</span>、<span class=\"keyword\">implements</span>、<span class=\"title\">this</span>、<span class=\"title\">supper</span>、<span class=\"title\">instanceof</span>、<span class=\"title\">new</span>。</span></span><br><span class=\"line\"><span class=\"class\">保留字：<span class=\"title\">true</span>、<span class=\"title\">false</span>、<span class=\"title\">null</span>、<span class=\"title\">goto</span>、<span class=\"title\">const</span>。</span></span><br></pre></td></tr></table></figure><p><strong>标识符：</strong></p>\n<ul><li>标识符由数字（0<del>9）和字母（A</del>Z 和 a~z）、美元符号（$）、下划线（_）以及 Unicode 字符集中符号大于 0xC0 的所有符号组合构成（各符号之间没有空格）。</li>\n<li>标识符的第一个符号为字母、下划线和美元符号，后面可以是任何字母、数字、美元符号或下划线。</li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">合法标识符：date、$<span class=\"number\">2011</span>、_date、D_$date 等。</span><br><span class=\"line\">不合法的标识符：<span class=\"number\">123</span>.com、<span class=\"number\">2</span>com、<span class=\"keyword\">for</span>、<span class=\"keyword\">if</span> 等。</span><br></pre></td></tr></table></figure><h2 id=\"命名法\">命名法<a href=\"#命名法\" title=\"命名法\"></a></h2><h3 id=\"java总体命名规范\">Java总体命名规范<a href=\"#java总体命名规范\" title=\"Java总体命名规范\"></a></h3><p>1、项目名全部小写.<br>2、包名全部小写.<br>3、<strong>类名首字母大写</strong>,其余组成词首字母依次大写.<br>4、变量名,方法名首字母小写,如果名称由多个单词组成,<strong>除首字母外的每个单词的首字母都要大写</strong>.<br>5、<strong>常量名全部大写.</strong><br>6、所有命名规则必须遵循以下规则 :</p>\n<ul><li>名称只能由字母、数字、下划线、$符号组成.</li>\n<li>不能以数字开头.</li>\n<li>名称不能使用Java中的关键字.</li>\n<li>坚决不允许出现中文及拼音命名.</li>\n</ul><h3 id=\"java包名命名规范\">Java包名命名规范<a href=\"#java包名命名规范\" title=\"Java包名命名规范\"></a></h3><p>  <font color=\"red\">Java的包名由小写单词组成</font>,包的路径符合所开发的系统模块的定义,以便通过包名可得知其属于哪个模块,从而方便到对应包里找相应的实现类.</p>\n<h4 id=\"常规包名\">常规包名<a href=\"#常规包名\" title=\"常规包名\"></a></h4><p>为了保障每个Java Package命名的唯一性,在Java编程规范中要求开发人员在自己定义的包名前加上唯一的前缀.由于互联网上的域名称是不会重复的,所以多数开发人员采用自己公司在互联网上的域名称作为自己程序包的唯一前缀.例如 : com.sun.swt…<br>1.公司项目<br>  <code>com</code> : 公司项目,copyright由项目发起的公司所有.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">包名 : com.公司名.项目名.模块名..</span><br></pre></td></tr></table></figure><p>2.团队项目<br>  <code>team</code> : 团队项目,指由团队发起,并由该团队开发的项目,copyright属于该团队所有.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">包名 : team.团队名.项目名.模块名..</span><br></pre></td></tr></table></figure><h4 id=\"自定义包名\">自定义包名<a href=\"#自定义包名\" title=\"自定义包名\"></a></h4><p>一般公司命名为com.公司名.项目名.模块名….那我们个人的项目又怎么命名呢?</p>\n<p>个人的英语单词有individual、personal、private、one-man,进一步对以上四个单词词意进行分析并在保证了唯一性,继而使用每个单词的前4个字母作为前缀,与com也做了区分.示例如下所示:</p>\n<p>1.<code>indi</code> : 个体项目,指个人发起,但非自己独自完成的项目,可公开或私有项目,copyright主要属于发起者.  </p>\n<ul><li>包名 : indi.发起者名.项目名.模块名..</li>\n</ul><p>2.<code>pers</code> : 个人项目,指个人发起,独自完成,可分享的项目,copyright主要属于个人.</p>\n<ul><li>包名 : pers.个人名.项目名.模块名..</li>\n</ul><p>3.<code>priv</code> : 私有项目,指个人发起,独自完成,非公开的私人使用的项目,copyright属于个人.</p>\n<ul><li>包名 : priv.个人名.项目名.模块名..</li>\n</ul><p>4.<code>onem</code> : 与indi相同，推荐使用indi.</p>\n<h2 id=\"数据类型\">数据类型<a href=\"#数据类型\" title=\"数据类型\"></a></h2><p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/202111151355640.png\" class=\"φcy\" alt=\"QQ截图20211115135410\"></p>\n<h3 id=\"基本类型\">基本类型<a href=\"#基本类型\" title=\"基本类型\"></a></h3><h4 id=\"整型\">整型<a href=\"#整型\" title=\"整型\"></a></h4><blockquote>\n<p><mark><strong>一般地整型变量默认为 int 类型；</strong></mark></p>\n</blockquote>\n<p><strong>byte：</strong></p>\n<ul><li>byte 数据类型是8位、有符号的，以二进制补码表示的整数；</li>\n<li>最小值是 <strong>-128（-2^7）</strong>；</li>\n<li>最大值是 <strong>127（2^7-1）</strong>；</li>\n<li>默认值是 <strong>0</strong>；</li>\n<li>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；</li>\n<li>例子：byte a = 100，byte b = -50。</li>\n</ul><p><strong>short：</strong></p>\n<ul><li>short 数据类型是 16 位、有符号的以二进制补码表示的整数</li>\n<li>最小值是 <strong>-32768（-2^15）</strong>；</li>\n<li>最大值是 <strong>32767（2^15 - 1）</strong>；</li>\n<li>Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；</li>\n<li>默认值是 <strong>0</strong>；</li>\n<li>例子：short s = 1000，short r = -20000。</li>\n</ul><p><strong>int：</strong></p>\n<ul><li>int 数据类型是32位、有符号的以二进制补码表示的整数；</li>\n<li>最小值是 <strong>-2,147,483,648（-2^31）</strong>；</li>\n<li>最大值是 <strong>2,147,483,647（2^31 - 1）</strong>；</li>\n<li><mark><strong>一般地整型变量默认为 int 类型；</strong></mark></li>\n<li>默认值是 <strong>0</strong> ；</li>\n<li>例子：int a = 100000, int b = -200000。</li>\n</ul><p><strong>long：</strong></p>\n<ul><li>long 数据类型是 64 位、有符号的以二进制补码表示的整数；</li>\n<li>最小值是 <strong>-9,223,372,036,854,775,808（-2^63）</strong>；</li>\n<li>最大值是 <strong>9,223,372,036,854,775,807（2^63 -1）</strong>；</li>\n<li>这种类型主要使用在需要比较大整数的系统上；</li>\n<li><mark>默认值是 0<strong>L</strong>；</mark></li>\n<li>例子： long a = 100000L，Long b = -200000L。<br>“L”理论上不分大小写，但是若写成”l”容易与数字”1”混淆，不容易分辩。所以最好大写。</li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//系统会自动把56当成byte类型处理</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span> a = <span class=\"number\">56</span>;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        下面代码是错误的，系统不会把99999999999999当成long类型处理</span></span><br><span class=\"line\"><span class=\"comment\">        所以超出int的表数范围，从而引起错误</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"comment\">//long bigValue = 99999999999999;</span></span><br><span class=\"line\">        <span class=\"comment\">//下面代码是正确的，在巨大的整数值后面使用L后缀，强制使用long类型</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> bigValue2= <span class=\"number\">9223372036854775807L</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote>\n<p>可以把一个较小的整数值（在int类型的表数范围以内）直接赋给一个long类型的变量，这并不是因为java会把这个较小的整数值当成long类型来处理，<strong>Java依然把这个整数值当成int类型来处理</strong>，只是因为int类型的值会自动类型转换到long类型</p>\n</blockquote>\n<p>二进制： <code>0b</code> <code>0B</code></p>\n<p>八进制：<code>0</code></p>\n<p>十六进制：<code>0x</code> <code>0X</code> </p>\n<blockquote>\n<p>负数在计算机里是以补码的形式存在</p>\n</blockquote>\n<p>所有数字在计算机底层都是以<strong>二进制</strong>形式存在的，原码是直接将一个数值换算成二进制数。但<mark><strong>计算机以补码的形式保存所有的整数</strong></mark>。补码的计算规则：<strong>正数的补码和原码完全相同</strong>，<strong>负数的补码是其反码加1</strong>；反码是对原码按位取反，<strong>只是最高位（符号位）保持不变</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//定义两个8位的二进制整数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> binVal1 = <span class=\"number\">0b11010100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span> binVal2 = <span class=\"number\">0B01101001</span>;</span><br><span class=\"line\">        <span class=\"comment\">//定义一个32位的二进制整数，最高位是符号位</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> binVal3 = <span class=\"number\">0B10000000000000000000000000000011</span>;</span><br><span class=\"line\">        System.out.println(binVal1); <span class=\"comment\">//输出212</span></span><br><span class=\"line\">        System.out.println(binVal2); <span class=\"comment\">//输出105</span></span><br><span class=\"line\">        System.out.println(binVal3); <span class=\"comment\">//输出-2147483645</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/20220106162541.png\" alt=\"二进制整数转换成十进制数\" style=\"zoom: 50%;\" /><p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/20220106165233.png\" class=\"φcy\" alt=\"QQ截图20220106165216 (1)\"></p>\n<h4 id=\"字符型\">字符型<a href=\"#字符型\" title=\"字符型\"></a></h4><p>2字节 16位 </p>\n<p><strong>三种表现形式</strong></p>\n<ul><li>直接通过单个字符来指定字符型值， <code>&#39;A&#39;</code>  <code>&#39;0&#39;</code> <code>&#39;9&#39;</code></li>\n<li>通过转义字符表示特殊字符型值， <code>\\n</code> <code>\\t</code></li>\n<li>直接使用 Unicode 值来表示字符型值， <code>\\uXXXX</code> XXXX代表一个十六进制的整数</li>\n</ul><h5 id=\"char-int-转换\">char int 转换<a href=\"#char-int-转换\" title=\"char int 转换\"></a></h5><p>（1）int类型转char类型，将数字加一个‘0’，并强制类型转换为char即可。</p>\n<p>（2）char类型装int类型，将字符减一个‘0’即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//int类型转char类型</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> number = <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> cNumber= (<span class=\"keyword\">char</span>) (number+<span class=\"string\">'0'</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Number \"</span>+number+<span class=\"string\">\" to char is:\"</span>+cNumber);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//char类型转int类型</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> cNumber2=<span class=\"string\">'3'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> number2=cNumber2-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Char \"</span>+cNumber2+<span class=\"string\">\" to number is:\"</span>+number2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"浮点型\">浮点型<a href=\"#浮点型\" title=\"浮点型\"></a></h4><blockquote>\n<p><strong><mark>浮点数的默认类型为 double 类型；</mark></strong></p>\n</blockquote>\n<p><strong>表示形式</strong></p>\n<ul><li>十进制数 ： 浮点数必须包含一个小数点，否则会被当成int类型处理</li>\n<li>科学计数法 ： 5.12e2（即5.12 x 10²）5.12E2</li>\n</ul><blockquote>\n<p> <strong><mark>0.0除以0.0或对一个负数开方将得到一个非数 NaN</mark></strong> 。 正无穷大数值都是相等的，负无穷大数值都是相等的，<strong>NaN不与任何数值相等</strong>，甚至和NaN都不相等</p>\n<p><strong><mark>只有浮点数除以0才可以得到正无穷大或负无穷大</mark></strong>，因为Java语言会自动把和浮点数运算的0（整数）当成0.0（浮点数）处理。如果一个整数值除以0，则会抛出一个异常：<code>ArithmeticException:/ by zero</code>(除以零异常)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FloatTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> af = <span class=\"number\">5.2345556f</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面将看到af的值已经发生了改变</span></span><br><span class=\"line\">\t\tSystem.out.println(af);</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> a = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> c = Double.NEGATIVE_INFINITY;</span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> d = Float.NEGATIVE_INFINITY;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 看到float和double的负无穷大是相等的。</span></span><br><span class=\"line\">\t\tSystem.out.println(c == d);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 0.0除以0.0将出现非数</span></span><br><span class=\"line\">\t\tSystem.out.println(a / a);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 两个非数之间是不相等的</span></span><br><span class=\"line\">\t\tSystem.out.println(a / a == Float.NaN);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 所有正无穷大都是相等的</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">6.0</span> / <span class=\"number\">0</span> == <span class=\"number\">555.0</span>/<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 负数除以0.0得到负无穷大</span></span><br><span class=\"line\">\t\tSystem.out.println(-<span class=\"number\">8</span> / a);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面代码将抛出除以0的异常</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(0 / 0);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong>float：</strong></p>\n<ul><li>float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；</li>\n<li>float 在储存大型浮点数组的时候可节省内存空间；</li>\n<li><mark>默认值是 <strong>0.0f</strong>；</mark></li>\n<li>浮点数不能用来表示精确的值，如货币；</li>\n<li>例子：float f1 = 234.5f。</li>\n</ul><p><strong>double：</strong></p>\n<ul><li><p>double 数据类型是双精度、64 位、符合 IEEE 754 标准的浮点数；</p>\n</li>\n<li><p>浮点数的默认类型为 double 类型；</p>\n</li>\n<li><p>double类型同样不能表示精确的值，如货币；</p>\n</li>\n<li><p><mark>默认值是 <strong>0.0d</strong>；</mark></p>\n</li>\n<li><p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double   d1  &#x3D; 7D ;</span><br><span class=\"line\">double   d2  &#x3D; 7.; </span><br><span class=\"line\">double   d3  &#x3D;  8.0; </span><br><span class=\"line\">double   d4  &#x3D;  8.D; </span><br><span class=\"line\">double   d5  &#x3D;  12.9867;</span><br></pre></td></tr></table></figure><p>7 是一个 int 字面量，而 7D，7. 和 8.0 是 double 字面量。</p>\n</li>\n</ul><h4 id=\"布尔型\">布尔型<a href=\"#布尔型\" title=\"布尔型\"></a></h4><ul><li>boolean数据类型表示一位的信息；</li>\n<li>只有两个取值：true 和 false；</li>\n<li>这种类型只作为一种标志来记录 true/false 情况；</li>\n<li><mark>默认值是 <strong>false</strong>；</mark></li>\n<li>例子：boolean one = true。</li>\n</ul><h4 id=\"使用var定义变量\">使用var定义变量<a href=\"#使用var定义变量\" title=\"使用var定义变量\"></a></h4><p>使用var定义局部变量时，必须在定义局部变量的同时指定初始值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerValTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"number\">20</span>; <span class=\"comment\">// 被赋值20，因此a的类型是int</span></span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        <span class=\"comment\">// a = 1.6; 这行代码会报错，不兼容的类型</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"number\">3.4</span>; <span class=\"comment\">// 被赋值为3.4 类型是float</span></span><br><span class=\"line\">        System.out.println(b);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> c = (<span class=\"keyword\">byte</span>) <span class=\"number\">13</span>; <span class=\"comment\">//c的类型是byte</span></span><br><span class=\"line\">        System.out.println(c);</span><br><span class=\"line\">        <span class=\"comment\">// c=a ; // 这行会报错 不兼容的类型</span></span><br><span class=\"line\">        <span class=\"comment\">// var d; //无法判断d的类型</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"引用类型\">引用类型<a href=\"#引用类型\" title=\"引用类型\"></a></h3><h4 id=\"空类型\">空类型<a href=\"#空类型\" title=\"空类型\"></a></h4><p>空引用 <code>null</code> 只能被转换成引用类型 ， 不能转换成基本类型，因此不要把一个 <code>null</code> 值赋给基本数据类型</p>\n<h4 id=\"string\">String<a href=\"#string\" title=\"String\"></a></h4><ul><li>String类型的直接量不能赋给其他类型的变量，null类型的直接量可以直接赋给任何<strong>引用类型</strong>的变量</li>\n<li><strong>Java通常使用常量池来缓存字符串直接量</strong></li>\n<li>由于String类是一个典型的不可变类，因此<strong>String对象创建出来就不可能被改变</strong>，因此无需担心共享String对象对导致混乱</li>\n<li><strong>常量池</strong>指的是在编译期被确定，并被保存在已编译的 <code>.class</code> 文件中的一些数据。它包括关于类、方法、接口中的常量，也包括字符串直接量</li>\n</ul><h4 id=\"数组\">数组<a href=\"#数组\" title=\"数组\"></a></h4><p>数组也是一种引用类型。int是基本类型， <code>int[]</code> （一种定义数组的方式） 就是引用类型</p>\n<h3 id=\"基本类型的类型转换\">基本类型的类型转换<a href=\"#基本类型的类型转换\" title=\"基本类型的类型转换\"></a></h3><h4 id=\"自动类型转化\">自动类型转化<a href=\"#自动类型转化\" title=\"自动类型转化\"></a></h4><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/202111151355640.png\" alt=\"QQ截图20211115135410\" style=\"zoom: 80%;\" /><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutoConversion</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a  = <span class=\"number\">6</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// int可以自动转换为float类型</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> f = a;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面将输出6.0</span></span><br><span class=\"line\">\t\tSystem.out.println(f);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 定义一个byte类型的整数变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span> b = <span class=\"number\">9</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面代码将出错，byte型不能自动类型转换为char型</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// char c = b;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面是byte型变量可以自动类型转换为double型</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> d = b;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面将输出9.0</span></span><br><span class=\"line\">\t\tSystem.out.println(d);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote>\n<p><strong>任何基本类型的值和字符串值进行连接运算时，基本类型的值都将自动转换为字符串类型</strong>，虽然字符串类型不是基本类型，而是引用类型</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimitiveAndString</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面代码是错的，因为5是一个整数，不能直接赋给一个字符串</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// String str1 = 5;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 一个基本类型值和字符串进行连接运算时，基本类型值自动转换为字符串</span></span><br><span class=\"line\">\t\tString str2 = <span class=\"number\">3.5f</span> + <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面输出3.5</span></span><br><span class=\"line\">\t\tSystem.out.println(str2);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面语句输出7Hello!</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">3</span> + <span class=\"number\">4</span> + <span class=\"string\">\"Hello！\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面语句输出Hello!34，因为Hello! + 3会把3当成字符串处理，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 而后再把4当成字符串处理</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Hello！\"</span> + <span class=\"number\">3</span> + <span class=\"number\">4</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"强制类型转换\">强制类型转换<a href=\"#强制类型转换\" title=\"强制类型转换\"></a></h4><p><code>(targetType)value</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NarrowConversion</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> iValue = <span class=\"number\">233</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 强制把一个int类型的值转换为byte类型的值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span> bValue = (<span class=\"keyword\">byte</span>)iValue;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将输出-23</span></span><br><span class=\"line\">\t\tSystem.out.println(bValue);</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> dValue = <span class=\"number\">3.98</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 强制把一个double类型的值转换为int</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> tol = (<span class=\"keyword\">int</span>)dValue;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将输出3</span></span><br><span class=\"line\">\t\tSystem.out.println(tol);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/20220106201649.png\" alt=\"QQ截图20220106201630 (1)\" style=\"zoom: 80%;\" /><blockquote>\n<p>临时生成的验证字符串 原理</p>\n</blockquote>\n<p>可以先随机生成一个在指定范围内的int数字（如果希望生成小写字母，就在97~122之间），然后将其强制类型转换成char类型，再将多次生成的字符串连缀起来即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomStr</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 定义一个空字符串</span></span><br><span class=\"line\">\t\tString result = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 进行6次循环</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">6</span> ; i ++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 生成一个97～122的int型的整数</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> intVal = (<span class=\"keyword\">int</span>)(Math.random() * <span class=\"number\">26</span> + <span class=\"number\">97</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将intValue强制转换为char后连接到result后面</span></span><br><span class=\"line\">\t\t\tresult = result + (<span class=\"keyword\">char</span>)intVal;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 输出随机字符串</span></span><br><span class=\"line\">\t\tSystem.out.println(result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//直接把5.6赋值给float类型变量将出现错误，因为5.6默认是double类型</span></span><br><span class=\"line\"><span class=\"keyword\">float</span> a = <span class=\"number\">5.6</span>;</span><br><span class=\"line\"><span class=\"keyword\">float</span> a = (<span class=\"keyword\">float</span>)<span class=\"number\">5.6</span>;</span><br></pre></td></tr></table></figure><blockquote>\n<p>通常情况下，字符串不能直接转换为基本类型，但<strong><font color=\"red\">通过基本类型对应的包装类则可以实现把字符串转换成基本类型</font></strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String a = <span class=\"string\">\"45\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//使用Integer的方法将一个字符串转换成int类型</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> iValue = Integer.parseInt(a);</span><br><span class=\"line\">System.out.println(iValue);</span><br></pre></td></tr></table></figure><h3 id=\"表达式类型的自动提升\">表达式类型的自动提升<a href=\"#表达式类型的自动提升\" title=\"表达式类型的自动提升\"></a></h3><blockquote>\n<p><strong><font color=\"red\">整个算术表达式的数据类型自动提升到与表达式中最高等级操作数相同的类型</font></strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutoPromote</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 定义一个short类型变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">short</span> sValue = <span class=\"number\">5</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面代码将出错：表达式中的sValue将自动提升到int类型，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 则右边的表达式类型为int，将一个int类型赋给short类型的变量将发生错误。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// sValue = sValue - 2;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span> b = <span class=\"number\">40</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">23</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> d = .<span class=\"number\">314</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 右边表达式中在最高等级操作数为d（double型）</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 则右边表达式的类型为double型,故赋给一个double型变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> result = b + c + i * d;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将输出144.222</span></span><br><span class=\"line\">\t\tSystem.out.println(result);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> val = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 右边表达式中2个操作数都是int，故右边表达式的类型为int</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 因此，虽然23/3不能除尽，依然得到一个int整数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> intResult = <span class=\"number\">23</span> / val;</span><br><span class=\"line\">\t\tSystem.out.println(intResult); <span class=\"comment\">// 将输出7</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 输出字符串Hello!a7</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Hello!\"</span> + <span class=\"string\">'a'</span> + <span class=\"number\">7</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 输出字符串104Hello!</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">'a'</span> + <span class=\"number\">7</span> + <span class=\"string\">\"Hello!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"运算符\">运算符<a href=\"#运算符\" title=\"运算符\"></a></h2><h3>/<a href=\"#\" title=\"/\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DivTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> a = <span class=\"number\">5.2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> b = <span class=\"number\">3.1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> div = a / b;</span><br><span class=\"line\">\t\t<span class=\"comment\">// div的值将是1.6774193548387097</span></span><br><span class=\"line\">\t\tSystem.out.println(div);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 输出正无穷大：Infinity</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"5除以0.0的结果是:\"</span> + <span class=\"number\">5</span> / <span class=\"number\">0.0</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 输出负无穷大：-Infinity</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"-5除以0.0的结果是:\"</span> + - <span class=\"number\">5</span> / <span class=\"number\">0.0</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面代码将出现异常</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// java.lang.ArithmeticException: / by zero</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"-5除以0的结果是::\"</span> + -<span class=\"number\">5</span> / <span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"-1\">%<a href=\"#-1\" title=\"%\"></a></h3><p>如果求余运算的两个操作数中有一个或者两个都是浮点数，则允许<strong><font color=\"red\">第二个操作数是0或0.0，求余运算的结果是非数:NaN</font></strong> 。</p>\n<p><strong><font color=\"red\">0或0.0对零以外的任何数求余都将得到0或0.0</font></strong>。看如下程序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ModTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> a = <span class=\"number\">5.2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> b = <span class=\"number\">3.1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> mod = a % b;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(mod); <span class=\"comment\">// mod的值为2.1</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"5对0.0求余的结果是:\"</span> + <span class=\"number\">5</span> % <span class=\"number\">0.0</span>); <span class=\"comment\">// 输出非数:NaN</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"-5.0对0求余的结果是:\"</span> + -<span class=\"number\">5.0</span> % <span class=\"number\">0</span>); <span class=\"comment\">// 输出非数:NaN</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"0对5.0求余的结果是:\"</span> + <span class=\"number\">0</span> % <span class=\"number\">5.0</span>); <span class=\"comment\">// 输出0.0</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"0对0.0求余的结果是:\"</span> + <span class=\"number\">0</span> % <span class=\"number\">0.0</span>); <span class=\"comment\">// 输出非数:NaN</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面代码将出现异常：java.lang.ArithmeticException: / by zero</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"-5对0求余的结果是:\"</span> + -<span class=\"number\">5</span> % <span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote>\n<p>提供其他更复杂的运算符，如果需要完成乘方、开方等运算，则可借助于<code>java.lang.Math</code>类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MathTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> a = <span class=\"number\">3.2</span>; <span class=\"comment\">// 定义变量a为3.2</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 求a的5次方，并将计算结果赋为b。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> b = Math.pow(a , <span class=\"number\">5</span>);</span><br><span class=\"line\">\t\tSystem.out.println(b); <span class=\"comment\">// 输出b的值。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 求a的平方根，并将结果赋给c</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> c = Math.sqrt(a);</span><br><span class=\"line\">\t\tSystem.out.println(c); <span class=\"comment\">// 输出c的值。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 计算随机数,返回一个0～1之间的伪随机数。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> d = Math.random();</span><br><span class=\"line\">\t\tSystem.out.println(d); <span class=\"comment\">// 输出随机数d的值</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 求1.57的sin函数值：1.57被当成弧度数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> e = Math.sin(<span class=\"number\">1.57</span>);</span><br><span class=\"line\">\t\tSystem.out.println(e); <span class=\"comment\">// 输出接近1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"位运算符\">位运算符<a href=\"#位运算符\" title=\"位运算符\"></a></h3><ul><li><code>&amp;</code>: 按位与。当两位同时为1时才返回1。</li>\n<li><code>|</code>: 按位或。只要有一位为1即可返回1。</li>\n<li><code>~</code>: 按位非。单目运算符，将操作数的每个位（包括符号位）全部取反。</li>\n<li><code>^</code>: 按位异或。当两位相同时返回0，不同时返回1。</li>\n<li><code>&lt;&lt;</code>: 左移运算符。</li>\n<li><code>&gt;&gt;</code>: 右移运算符。<ul><li>把第一个操作数的二进制码右移指定位数后，左边空出来的位<strong><font color=\"red\">以原来的符号位填充</font></strong>，即如果第一个操作数原来是正数，则左边补0; 如果第一个操作数是负数，则左边补1。</li>\n</ul></li>\n<li><code>&gt;&gt;&gt;</code>: 无符号右移运算符 <ul><li>它把第一个操作数的二进制码右移指定位数后，左边空出来的位<strong><font color=\"red\">总是以0填充</font></strong>。</li>\n</ul></li>\n</ul><p><strong>进行移位运算时还要遵循如下规则。</strong></p>\n<ol><li>对于低于int类型（如 byte、short 和 char)的操作数总是先<strong>自动类型转换为int类型后再移位</strong>。</li>\n<li>对于int类型的整数移位a&gt;&gt;b，当b&gt;32时，系统<strong>先用b对32求余(因为int类型只有32位)</strong>，得到的结果才是真正移位的位数。例如，a&gt;&gt;33和 a&gt;&gt;1的结果完全一样，而a&gt;&gt;32的结果和a相同。</li>\n<li>对于long类型的整数移位 a&gt;&gt;b，当b&gt;64时，总是<strong>先用b对64求余(因为long类型是64位)</strong>，得到的结果才是真正移位的位数。</li>\n</ol><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitOperatorTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(2.5 &amp; 3.0);</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">5</span> &amp; <span class=\"number\">9</span>); <span class=\"comment\">// 将输出1</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">5</span> | <span class=\"number\">9</span>); <span class=\"comment\">// 将输出13</span></span><br><span class=\"line\">\t\tSystem.out.println(~-<span class=\"number\">5</span>); <span class=\"comment\">// 将输出4</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">5</span> ^ <span class=\"number\">9</span>); <span class=\"comment\">// 将输出12</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">5</span> &lt;&lt; <span class=\"number\">2</span>); <span class=\"comment\">// 输出20</span></span><br><span class=\"line\">\t\tSystem.out.println(-<span class=\"number\">5</span> &lt;&lt; <span class=\"number\">2</span>); <span class=\"comment\">// 输出-20</span></span><br><span class=\"line\">\t\tSystem.out.println(-<span class=\"number\">5</span> &gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">// 输出-2</span></span><br><span class=\"line\">\t\tSystem.out.println(-<span class=\"number\">5</span> &gt;&gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">// 输出1073741822</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/20220106222212.png\" alt=\"QQ截图20220106222131 (1)\" style=\"zoom: 80%;\" /><h3 id=\"扩展后的赋值运算符\">扩展后的赋值运算符<a href=\"#扩展后的赋值运算符\" title=\"扩展后的赋值运算符\"></a></h3><ul><li><code>+-</code>:对于<code>x+=y</code>，即对应于<code>x=x+y</code>。</li>\n<li><code>-=</code>:对于<code>x-=y</code>，即对应于<code>x=X-y</code>。</li>\n<li><code>*=</code>:对于<code>x*=y</code>，即对应于<code>x=x * y</code>。</li>\n<li><code>/=</code>:对于<code>x/=y</code>，即对应于<code>x=x / y</code>。</li>\n<li><code>%=</code>:对于<code>x%=y</code>，即对应于<code>x=x % y</code></li>\n<li><code>&amp;=</code>:对于<code>x&amp;=y</code>，即对应于<code>x=x &amp; y</code>。</li>\n<li><code>|=</code>:对于<code>x|=y</code>，即对应于<code>x=x | y</code>。</li>\n<li><code>^=</code>:对于<code>x^=y</code>，即对应于<code>x=x^y</code>。</li>\n<li><code>&lt;&lt;=</code>:对于<code>x&lt;&lt;=y</code>，即对应于<code>x=x &lt;&lt;y</code>。</li>\n<li><code>&gt;&gt;=</code>:对于<code>x &gt;&gt;=y</code>，即对应于<code>x=x &gt;&gt;y</code>。</li>\n<li><code>&gt;&gt;&gt;=</code>:对于<code>x &gt;&gt;&gt;=y</code>，即对应于<code>x=x &gt;&gt;&gt; y</code>。</li>\n</ul><blockquote>\n<p><strong>只要能使用这种扩展后的赋值运算符,通常都推荐使用它们。因为这种运算符不仅具有更好的性能,而且程序会更加健壮。</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnhanceAssignTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 定义一个byte类型的变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面语句出错，因为5默认是int类型，a + 5就是int类型。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 把int类型赋给byte类型的变量，所以出错</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// a = a + 5;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 定义一个byte类型的变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span> b = <span class=\"number\">5</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面语句不会出现错误</span></span><br><span class=\"line\">\t\tb += <span class=\"number\">5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"比较运算符\">比较运算符<a href=\"#比较运算符\" title=\"比较运算符\"></a></h3><p><code>==</code>： 只要他们的值相等，也都将返回true</p>\n<blockquote>\n<p>基本类型的变量、值不能和引用类型的变量、值使用<code>==</code>进行比较;</p>\n<p> boolean类型的变量、值不能与其他任意类型的变量、值使用<code>==</code>进行比较;</p>\n<p>如果两个引用类型之间没有<strong>父子继承关系</strong>，那么它们的变量也不能使用<code>==</code>进行比较。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComparableOperatorTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"5是否大于 4.0：\"</span> + (<span class=\"number\">5</span> &gt; <span class=\"number\">4.0</span>)); <span class=\"comment\">// 输出true</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"5和5.0是否相等：\"</span> + (<span class=\"number\">5</span> == <span class=\"number\">5.0</span>)); <span class=\"comment\">// 输出true</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"97和'a'是否相等：\"</span> + (<span class=\"number\">97</span> == <span class=\"string\">'a'</span>)); <span class=\"comment\">// 输出true</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"true和false是否相等：\"</span> + (<span class=\"keyword\">true</span> == <span class=\"keyword\">false</span>)); <span class=\"comment\">// 输出false</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建2个ComparableOperatorTest对象，分别赋给t1和t2两个引用</span></span><br><span class=\"line\">\t\tComparableOperatorTest t1 = <span class=\"keyword\">new</span> ComparableOperatorTest();</span><br><span class=\"line\">\t\tComparableOperatorTest t2 = <span class=\"keyword\">new</span> ComparableOperatorTest();</span><br><span class=\"line\">\t\t<span class=\"comment\">// t1和t2是同一个类的两个实例的引用，所以可以比较，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 但t1和t2引用不同的对象，所以返回false</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"t1是否等于t2：\"</span> + (t1 == t2));</span><br><span class=\"line\">\t\t<span class=\"comment\">// 直接将t1的值赋给t3，即让t3指向t1指向的对象</span></span><br><span class=\"line\">\t\tComparableOperatorTest t3 = t1;</span><br><span class=\"line\">\t\t<span class=\"comment\">// t1和t3指向同一个对象，所以返回true</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"t1是否等于t3：\"</span> + (t1 == t3));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"逻辑运算符\">逻辑运算符<a href=\"#逻辑运算符\" title=\"逻辑运算符\"></a></h3><ul><li><code>&amp;&amp;</code>: 与，前后两个操作数必须都是true才返回true，否则返回 false.</li>\n<li><code>&amp;</code>: 不短路与，作用与&amp;&amp;相同，但不会短路。</li>\n<li><code>||</code>: 或，只要两个操作数中有一个是true，就可以返回true，否则返回 false。<ul><li><strong>如果第一个操作数返回true，将不再对第二个操作数求值，直接返回true</strong></li>\n</ul></li>\n<li><code>|</code>: 不短路或，作用与||相同，但不会短路。</li>\n<li><code>!</code>: 非，只需要一个操作数，如果操作数为true，则返回false;如果操作数为 false，则返回 true</li>\n<li><code>^</code>: 异或，当两个操作数不同时才返回true，如果两个操作数相同则返回 false。</li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogicOperatorTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 直接对false求非运算，将返回true</span></span><br><span class=\"line\">\t\tSystem.out.println(!<span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 5&gt;3返回true，'6'转换为整数54，'6'&gt;10返回true，求与后返回true</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">5</span> &gt; <span class=\"number\">3</span> &amp;&amp; <span class=\"string\">'6'</span> &gt; <span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 4&gt;=5返回false，'c'&gt;'a'返回true。求或后返回true</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">4</span> &gt;= <span class=\"number\">5</span> || <span class=\"string\">'c'</span> &gt; <span class=\"string\">'a'</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 4&gt;=5返回false，'c'&gt;'a'返回true。两个不同的操作数求异或返回true</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">4</span> &gt;= <span class=\"number\">5</span> ^ <span class=\"string\">'c'</span> &gt; <span class=\"string\">'a'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 定义变量a,b，并为两个变量赋值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 对a &gt; 4和b++ &gt; 10求或运算</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a &gt; <span class=\"number\">4</span> | b++ &gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 输出a的值是5，b的值是11。</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"a的值是:\"</span> + a + <span class=\"string\">\"，b的值是:\"</span> + b);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 定义变量c,d，并为两个变量赋值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> c = <span class=\"number\">5</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> d = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// c &gt; 4 || d++ &gt; 10求或运算</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (c &gt; <span class=\"number\">4</span> || d++ &gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 输出c的值是5，d的值是10。</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"c的值是:\"</span> + c + <span class=\"string\">\"，d的值是:\"</span> + d);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"三目运算符\">三目运算符<a href=\"#三目运算符\" title=\"三目运算符\"></a></h3><p><strong><font color=\"red\">三目运算符和 if else写法的区别在于</font></strong>: if后的代码块可以有多个语句，但<strong>三目运算符是不支持多个语句的</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(expression)? <span class=\"keyword\">if</span>-<span class=\"keyword\">true</span>-statement : <span class=\"keyword\">if</span>-<span class=\"keyword\">false</span>-statement;</span><br></pre></td></tr></table></figure><h2 id=\"idea\">idea<a href=\"#idea\" title=\"idea\"></a></h2><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/202111151442449.png\" alt=\"QQ截图20211115144141\" style=\"zoom:50%;\" /><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">快速生成main()方法：psvm</span><br><span class=\"line\">快速生成输出语句：sout</span><br><span class=\"line\">内容提示 代码补全：Ctrl+Alt+Space</span><br><span class=\"line\">格式化：Ctrl+Alt+L</span><br><span class=\"line\">快速设置左侧变量：Ctrl+Alt+V</span><br><span class=\"line\">生成代码：command + n</span><br></pre></td></tr></table></figure><h1 id=\"流程控制与数组\">流程控制与数组<a href=\"#流程控制与数组\" title=\"流程控制与数组\"></a></h1><h2 id=\"顺序控制\">顺序控制<a href=\"#顺序控制\" title=\"顺序控制\"></a></h2><h2 id=\"if\">if<a href=\"#if\" title=\"if\"></a></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式 1的值为true执行代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式 2的值为true执行代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式 3的值为true执行代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果以上布尔表达式都不为true执行代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"switch\">switch<a href=\"#switch\" title=\"switch\"></a></h2><blockquote>\n<p><strong>使用switch语句时,有两个值得注意的地方:</strong></p>\n<p>第一个地方是switch语句后的<strong>expression表达式的数据类型只能是byte、short、char、int 四种<font color=\"red\">整数类型</font>，String (从Java 7开始支持）和枚举类型</strong>;</p>\n<p>第二个地方是如果省略了case后代码块的break;，将引入一个陷阱。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (expression) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> value: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 语句</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>; <span class=\"comment\">// 可选</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> value: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 语句</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>; <span class=\"comment\">// 可选</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"comment\">// 可选</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 语句</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><blockquote>\n<p> 和if语句不同的是，switch语句中各case标签后代码块的开始点和结束点非常清晰，因此完全<strong>可以省略case后代码块的花括号</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwitchTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 声明变量score，并为其赋值为'C'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> score = <span class=\"string\">'C'</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行swicth分支语句</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (score)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'A'</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"优秀\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'B'</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"良好\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'C'</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"中\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'D'</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"及格\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'F'</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"不及格\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"成绩输入错误\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Java 11编译器做了一些改进，如果开发者忘记了case块后面的 break语句，Java 11编译器会生成警告:<code>“[falthrough]可能无法实现 case”</code>。这个警告以前需要为javac指定<code>-X:fallthrough</code>选项才能显示出来。</p>\n<p>从Java 7开始增强了switch语句的功能，<strong>允许switch语句的控制表达式是<code>java.lang.String</code>类型的变量或表达式</strong>——只能是<code>java.lang.String</code>类型,不能是<code>StringBuffer</code>或<code>StringBuilder</code>这两种字符串类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringSwitchTest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 声明变量season</span></span><br><span class=\"line\">\t\tString season = <span class=\"string\">\"夏天\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行swicth分支语句</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (season)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"春天\"</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"春暖花开.\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"夏天\"</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"夏日炎炎.\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"秋天\"</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"秋高气爽.\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"冬天\"</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"冬雪皑皑.\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"季节输入错误\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"while---do-while\">while - do while<a href=\"#while---do-while\" title=\"while - do while\"></a></h2><blockquote>\n<p>如果省略了循环体的花括号，那么while循环条件仅控制到紧跟该循环条件的第一个分号处。</p>\n</blockquote>\n<p><strong>do while循环与while循环的区别在于:</strong> <strong>while循环是先判断循环条件</strong>,如果条件为真则执行循环体;而<strong>do while循环则先执行循环体</strong>，然后才判断循环条件，如果循环条件为真，则执行下一次循环，否则终止循环。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环的初始化条件</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">// 当count小于10时，执行循环体</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (count &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    System.out.println(count);</span><br><span class=\"line\">    <span class=\"comment\">// 迭代语句</span></span><br><span class=\"line\">    count++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"循环结束!\"</span>);</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">// while后紧跟一个分号，表明循环体是一个分号（空语句）</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (count &lt; <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"comment\">// 下面的代码块与while循环已经没有任何关系</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"------\"</span> + count);</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\"><span class=\"comment\">// 定义变量count</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 执行do while循环</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(count);</span><br><span class=\"line\">    <span class=\"comment\">// 循环迭代语句</span></span><br><span class=\"line\">    count++;</span><br><span class=\"line\">    <span class=\"comment\">// 循环条件紧跟while关键字</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span> (count &lt; <span class=\"number\">10</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"循环结束!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义变量count2</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> count2 = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"comment\">// 执行do while循环</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\">// 这行代码把循环体和迭代部分合并成了一行代码</span></span><br><span class=\"line\">    System.out.println(count2++);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (count2 &lt; <span class=\"number\">10</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"循环结束!\"</span>);</span><br></pre></td></tr></table></figure><h2 id=\"for\">for<a href=\"#for\" title=\"for\"></a></h2><p><strong>for循环和while、do while循环不一样</strong>:由于while、do while循环的循环迭代语句紧跟着循环体，因此如果循环体不能完全执行，<strong>如使用continue语句来结束本次循环，则循环迭代语句不会被执行</strong>。但for 循环的循环迭代语句并没有与循环体放在一起，因此不管是否使用continue语句来结束本次循环，循环迭代语句一样会获得执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环的初始化条件,循环条件，循环迭代语句都在下面一行</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> count = <span class=\"number\">0</span> ; count &lt; <span class=\"number\">10</span> ; count++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(count);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"循环结束!\"</span>);</span><br></pre></td></tr></table></figure><blockquote>\n<p>建议<strong>不要在循环体内修改循环变量(也叫循环计数器)的值</strong>，否则会增加程序出错的可能性。万一程序真的需要访问、修改循环变量的值，建议重新定义一个临时变量，先将循环变量的值赋给临时变量，然后对临时变量的值进行修改。</p>\n</blockquote>\n<h2 id=\"break---continue\">break - continue<a href=\"#break---continue\" title=\"break - continue\"></a></h2><p>break语句不仅可以结束其所在的循环，还可以直接结束其外层循环。此时需要在 break后紧跟-个标签，这个标签用于标识一个外层循环。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BreakTest2</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 外层循环，outer作为标识符</span></span><br><span class=\"line\">\t\touter:</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">5</span> ; i++ )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 内层循环</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span> ; j++ )</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"i的值为:\"</span> + i + <span class=\"string\">\"  j的值为:\"</span> + j);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (j == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 跳出outer标签所标识的循环。</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span> outer;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------- 结果 ----------------------------</span><br><span class=\"line\">i的值为:<span class=\"number\">0</span>  j的值为: <span class=\"number\">0</span></span><br><span class=\"line\">i的值为:<span class=\"number\">0</span>  j的值为: <span class=\"number\">1</span></span><br></pre></td></tr></table></figure><p>程序从外层循环进入内层循环后，当j等于1时，程序遇到一个<code>break outer;</code>语句，这行代码将会导致结束<code>outer</code>标签指定的循环，不是结束break所在的循环，而是<strong>结束break循环的外层循环</strong>。所以看到上面的运行结果。</p>\n<blockquote>\n<p>通常紧跟 break之后的标签，必须在 break所在循环的外层循环之前定义才有意义。</p>\n</blockquote>\n<p>与break类似的是，continue后也可以紧跟一个标签，用于<strong>直接跳过标签所标识循环的当次循环的剩下语句，重新开始下一次循环</strong>。例如下面代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 外层循环</span></span><br><span class=\"line\">outer:</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">5</span> ; i++ )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 内层循环</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span> ; j++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"i的值为:\"</span> + i + <span class=\"string\">\"  j的值为:\"</span> + j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 忽略outer标签所指定的循环中本次循环所剩下语句。</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span> outer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>运行上面程序可以看到，循环变量j的值将无法超过1，因为每当j等于1时，<code>continue outer;</code>语句就结束了外层循环的当次循环，直接开始下一次循环，内层循环没有机会执行完成。</p>\n<p>return 关键字并不是专门用于结束循环的，return的功能是结束一个方法。当一个方法执行到一个return 语句时(return关键字后还可以跟变量、常量和表达式，这将在方法介绍中有更详细的解释)，这个方法将被结束。</p>\n<p>Java程序中大部分循环都被放在方法中执行，例如前面介绍的所有循环示范程序。一旦在循环体内执行到一个return语句，return 语句就会结束该方法，循环自然也随之结束。例如下面程序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个简单的for循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span> ; i++ )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"i的值是\"</span> + i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"return后的输出语句\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"数组-1\">数组<a href=\"#数组-1\" title=\"数组\"></a></h2><p>一个数组里<strong>只能存储一种数据类型的数据</strong>，而不能存储多种数据类型的数据。</p>\n<blockquote>\n<p>因为Java 语言是面向对象的语言，而类与类之间可以支持继承关系，这样<strong>可能产生一个数组里可以存放多种数据类型的假象</strong>。例如有一个水果数组，要求每个数组元素都是水果，实际上数组元素既可以是苹果，也可以是香蕉（苹果、香蕉都继承了水果，都是一种特殊的水果)，但这个数组的数组元素的类型还是唯一的，只能是水果类型。</p>\n</blockquote>\n<p>一旦数组的初始化完成，数组在内存中所占的空间将被固定下来，因此<strong>数组的长度将不可改变。</strong>即使把某个数组元素的数据清空，但它<strong>所占的空间依然被保留</strong>，依然属于该数组，数组的长度依然不变。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型[] 变量名;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] arr;\t<span class=\"comment\">//定义了一个int类型数组，数组名是arr 推荐！！！！</span></span><br><span class=\"line\"></span><br><span class=\"line\">数据类型 变量名[];</span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[];\t<span class=\"comment\">//定义了一个int类型的变量，变量名是arr数组</span></span><br></pre></td></tr></table></figure><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/202111151526782.png\" alt=\"QQ截图20211115152611\" style=\"zoom:67%;\" /><h3 id=\"初始化\">初始化<a href=\"#初始化\" title=\"初始化\"></a></h3><p>一旦为数组的每个数组元素分配了内存空间，每个内存空间里存储的内容就是该数组元素的值，<strong>即使这个内存空间存储的内容是空，这个空也是一个值（ null )</strong>。不管以哪种方式来初始化数组，<strong>只要为数组元素分配了内存空间，数组元素就具有了初始值</strong>。</p>\n<ul><li><strong>静态初始化</strong>:初始化时由程序员显式指定每个数组元素的初始值，由系统决定数组长度。</li>\n<li><strong>动态初始化</strong>:初始化时程序员只指定数组长度，由系统为数组元素分配初始值。</li>\n</ul><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>基本类型</th><th>初始值</th></tr>\n</thead><tbody><tr>\n<td>byte  short  int  long</td><td>0</td></tr>\n<tr>\n<td>float double</td><td>0.0</td></tr>\n<tr>\n<td>char</td><td><code>\\u0000</code></td></tr>\n<tr>\n<td>boolean</td><td>false</td></tr>\n<tr>\n<td>引用类型（类、接口、数组）</td><td>null</td></tr>\n</tbody></table></div></div><blockquote>\n<p><strong><font color=\"red\">不要同时使用静态初始化和动态初始化，也就是说，不要在进行数组初始化时，既指定数组的长度，也为每个数组元素分配初始值。</font></strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;; <span class=\"comment\">//静态初始化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;; <span class=\"comment\">//静态初始化 简化写法</span></span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] prices = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>];<span class=\"comment\">//动态初始化</span></span><br><span class=\"line\">Object[] books = <span class=\"keyword\">new</span> String[<span class=\"number\">4</span>];</span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">使用静态初始化简化语法执行初始化 数组不能使用<span class=\"keyword\">var</span>定义数组变量</span><br><span class=\"line\"><span class=\"keyword\">var</span> names = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"yeeku\"</span>,<span class=\"string\">\"none\"</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> weightArr = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[<span class=\"number\">4</span>];</span><br></pre></td></tr></table></figure><h3 id=\"获取数组长度\">获取数组长度<a href=\"#获取数组长度\" title=\"获取数组长度\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组名.length</span><br><span class=\"line\">arr.length</span><br></pre></td></tr></table></figure><h3 id=\"foreach循环\">foreach循环<a href=\"#foreach循环\" title=\"foreach循环\"></a></h3><p>使用 foreach循环遍历数组和集合元素时，无须获得数组和集合长度，<strong>无须根据索引来访问数组元素和集合元素</strong>，foreach循环<strong>自动遍历数组和集合的每个元素</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] books = &#123;<span class=\"string\">\"轻量级Java EE企业应用实战\"</span> ,</span><br><span class=\"line\">\t\t<span class=\"string\">\"疯狂Java讲义\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"疯狂Android讲义\"</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用foreach循环来遍历数组元素，其中book将会自动迭代每个数组元素</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String book : books)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tbook = <span class=\"string\">\"疯狂Ajax讲义\"</span>;</span><br><span class=\"line\">\t\t\tSystem.out.println(book);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(books[<span class=\"number\">0</span>]);</span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">疯狂Ajax讲义</span><br><span class=\"line\">疯狂Ajax讲义</span><br><span class=\"line\">疯狂Ajax讲义</span><br><span class=\"line\">轻量级Java EE企业应用实战</span><br></pre></td></tr></table></figure><p>在上面语法格式中，<code>String</code>是数组元素或集合元素的类型，或者直接使用var定义，<code>book</code>是一个<strong>形参名</strong>，foreach循环将自动将数组元素、集合元素依次赋给该变量。</p>\n<blockquote>\n<p>使用foreach循环迭代数组元素时，并不能改变数组元素的值，因此不要对foreach的循环变量进行赋值</p>\n</blockquote>\n<p>不难看出，当使用foreach来迭代访问数组元素时，<strong>foreach中的循环变量相当于一个临时变量</strong>，系统会把数组元素依次赋给这个临时变量，而这个临时变量并不是数组元素，它<strong>只是保存了数组元素的值</strong>。因此，<strong>如果希望改变数组元素的值，则不能使用这种foreach循环</strong>。</p>\n<h3 id=\"多维数组\">多维数组<a href=\"#多维数组\" title=\"多维数组\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个二维数组</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[][] a;</span><br><span class=\"line\"><span class=\"comment\">// 把a当成一维数组进行初始化，初始化a是一个长度为4的数组</span></span><br><span class=\"line\"><span class=\"comment\">// a数组的数组元素又是引用类型</span></span><br><span class=\"line\">a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">4</span>][];</span><br><span class=\"line\"><span class=\"comment\">// 把a数组当成一维数组，遍历a数组的每个数组元素</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> , len = a.length; i &lt; len ; i++ )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(a[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 初始化a数组的第一个元素</span></span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"comment\">// 访问a数组的第一个元素所指数组的第二个元素</span></span><br><span class=\"line\">a[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"comment\">// a数组的第一个元素是一个一维数组，遍历这个一维数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> , len = a[<span class=\"number\">0</span>].length ; i &lt; len ; i ++ )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(a[<span class=\"number\">0</span>][i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">------------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"comment\">// 同时初始化二维数组的2个维数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[][] b = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用静态初始化的语法来初始化一个二维数组</span></span><br><span class=\"line\">String[][] str1 = <span class=\"keyword\">new</span> String[][]&#123;<span class=\"keyword\">new</span> String[<span class=\"number\">3</span>], <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"hello\"</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 使用简化的静态初始化语法来初始化二维数组</span></span><br><span class=\"line\">String[][] str2 = &#123;<span class=\"keyword\">new</span> String[<span class=\"number\">3</span>], <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"hello\"</span>&#125;&#125;;</span><br><span class=\"line\">System.out.println(str1[<span class=\"number\">1</span>][<span class=\"number\">0</span>]);</span><br><span class=\"line\">System.out.println(str2[<span class=\"number\">1</span>][<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure><h3 id=\"操作数组的工具类：arrays\">操作数组的工具类：Arrays<a href=\"#操作数组的工具类：arrays\" title=\"操作数组的工具类：Arrays\"></a></h3><blockquote>\n<p>Arrays类处于 <code>java.util</code>包下，为了在程序中使用 Arrays类，必须在程序中导入<code>java.util.Arrays</code>类。</p>\n</blockquote>\n<ul><li><code>int binarySearch(type[] a, type key)</code>:使用<strong>二分法查询key元素值在a数组中出现的索引</strong>;如果a数组不包含 key元素值，则返回负数。调用该方法时<strong>要求数组中元素已经按升序排列</strong>，这样才能得到正确结果。</li>\n<li><code>int binarySearch(type[] a, int fromIndex, int toIndex, type key)</code>:这个方法与前一个方法类似，但它只搜索a数组中 fromIndex到 toIndex索引的元素。调用该方法时<strong>要求数组中元素已经按升序排列</strong>，这样才能得到正确结果。</li>\n<li><code>type[]copyOf(type[] original, int length)</code>:这个方法将会<strong>把 original数组复制成一个新数组</strong>，其中length是新数组的长度。如果 length小于original数组的长度,则新数组就是原数组的前面length个元素;如果length大于original 数组的长度，则新数组的前面元素就是原数组的所有元素，后面补充0（数值类型)、false（布尔类型）或者null（引用类型)。</li>\n<li><code>type[]copyOfRange(type[]original, int from, int to)</code>:这个方法与前面方法相似，但这个方法<strong>只复制original 数组的from索引到to索引的元素</strong>。</li>\n<li><code>boolean equals(type[] a, type]a2)</code>:如果a数组和a2数组的长度相等，而且 a数组和a2数组的数组元素也一一相同，该方法将返回true。<strong>比较相同</strong></li>\n<li><code>void fill(type[] a, type val)</code>:该方法将会<strong>把a数组的所有元素都赋值为val</strong>。</li>\n<li><code>void fill(type[] a, int fromIndex, int toIndex, type val)</code>:该方法与前一个方法的作用相同，区别只是该方法仅仅<strong>将a数组的fromIndex到 toIndex索引的数组元素赋值为val</strong>。</li>\n<li><code>void sort(type[]a)</code>:该方法<strong>对a数组的数组元素进行排序</strong>。</li>\n<li><code>void sort(type[]a，int fromIndex，int toIndex)</code>:该方法与前一个方法相似，区别是该方法仅仅<strong>对fromIndex到toIndex索引的元素进行排序</strong>。</li>\n<li><code>String toString(type[] a)</code>:该方法<strong>将一个数组转换成一个字符串</strong>。该方法按顺序把多个数组元素连缀在一起,多个数组元素使用英文逗号(,）和空格隔开。</li>\n</ul><blockquote>\n<p>Java8 增强了Arrays 类的功能</p>\n</blockquote>\n<ul><li><code>void parallelPrefix(xxx[]array，XxxBinaryOperator op)</code>:该方法<strong>使用op参数指定的计算公式计算得到的结果作为新的数组元素</strong>。op计算公式包括left、right两个形参，其中 left 代表新数组中前一个索引处的元素, right代表array数组中当前索引处的元素。新数组的第一个元素无须计算，直接等于array数组的第一个元素。</li>\n<li><code>void parallelPrefix(xxx[] array, int fromIndex, int toIndex,XxxBinaryOperator op)</code>:该方法与上一个方法相似，区别是该方法仅重新计算fromIndex到 toIndex索引的元素。</li>\n<li><code>void setAll(xxx[]array, IntToXxxFunction generator)</code>:该方法<strong>使用指定的生成器( generator)为所有数组元素设置值</strong>，该生成器控制数组元素的值的生成算法。</li>\n<li><code>void parallelSetAll(xxx[ array, IntToXxxFunction generator)</code>:该方法的功能与上一个方法相同，只是该方法<strong>增加了并行能力</strong>，可以利用多CPU 并行来提高性能。</li>\n<li><code>void parallelSort(xxx[] a)</code>:该方法的功能与Arrays类以前就有的 sort()方法相似，只是该方法增加了并行能力,可以利用多 CPU 并行来提高性能。</li>\n<li><code>void parallelSort(xxx[] a, int fromIndex, int toIndex)</code>:该方法与上一个方法相似，区别是该方法仅<strong>对fromlndex到toIndex索引的元素进行排序</strong>。</li>\n<li><code>Spliterator.OfXxx spliterator(xxx[] array)</code>:将该数组的所有元素转换成对应的Spliterator对象。</li>\n<li><code>Spliterator.OfXxx spliterator(xxx[] array, int startInclusive, int endExclusive)</code>:该方法与上一个方法相似，区别是该方法仅转换startInclusive到 endExclusive索引的元素。</li>\n<li><code>XxxStream stream(xxx[]array)</code>:该方法将数组转换为Stream，Stream是Java 8新增的流式编程的API。</li>\n<li><code>XxxStream stream(xxx[] array, int startInclusive, int endExclusive)</code>:该方法与上一个方法相似，区别是该方法仅将fromIndex到tolndex索引的元素转换为Streamo</li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个a数组</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 定义一个a2数组</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] a2 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// a数组和a2数组的长度相等，每个元素依次相等，将输出true</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"a数组和a2数组是否相等：\"</span>+ Arrays.equals(a, a2));</span><br><span class=\"line\"><span class=\"comment\">// 通过复制a数组，生成一个新的b数组</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] b = Arrays.copyOf(a, <span class=\"number\">6</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"a数组和b数组是否相等：\"</span> + Arrays.equals(a, b));</span><br><span class=\"line\"><span class=\"comment\">// 输出b数组的元素，将输出[3, 4, 5, 6, 0, 0]</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"b数组的元素为：\"</span> + Arrays.toString(b));</span><br><span class=\"line\"><span class=\"comment\">// 将b数组的第3个元素（包括）到第5个元素（不包括）赋为1</span></span><br><span class=\"line\">Arrays.fill(b, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// 输出b数组的元素，将输出[3, 4, 1, 1, 0, 0]</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"b数组的元素为：\"</span> + Arrays.toString(b));</span><br><span class=\"line\"><span class=\"comment\">// 对b数组进行排序</span></span><br><span class=\"line\">Arrays.sort(b);</span><br><span class=\"line\"><span class=\"comment\">// 输出b数组的元素，将输出[0, 0, 1, 1, 3, 4]</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"b数组的元素为：\"</span> + Arrays.toString(b));</span><br></pre></td></tr></table></figure><h3 id=\"原理\">原理<a href=\"#原理\" title=\"原理\"></a></h3><p>数组引用变量只是一个引用，这个引用变量可以指向任何有效的内存，只有当该引用指向有效内存后，才可通过该数组变量来访问数组元素。</p>\n<p>实际的数组<strong>对象被存储在堆( heap)内存中</strong>;如果引用该数组对象的数组引用变量是一个局部变量,那么它被<strong>存储在栈（ stack）内存中</strong>。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/20220109213729.png\" alt=\"QQ截图20220109213430 (1)\" style=\"zoom:67%;\" /><blockquote>\n<p> 为什么会有栈内存和堆内存？</p>\n</blockquote>\n<p>答:当一个方法执行时，<strong>每个方法都会建立自己的内存栈</strong>，在这个方法内定义的变量将会逐个放入这块栈内存里，<strong>随着方法的执行结束，这个方法的内存栈也将自然销毁</strong>。因此，所有在方法中定义的局部变量都是放在栈内存中的;在程序中创建一个对象时，这个<strong>对象将被保存到运行时数据区中</strong>，以便反复利用（因为对象的创建成本通常较大)，这个运行时数据区就是堆内存。堆内存中的对象不会随方法的结束而销毁，即使方法结束后，这个对象还可能被另一个引用变量所引用(在方法的参数传递时很常见)，则这个对象依然不会被销毁。只有当一个对象没有任何引用变量引用它时，系统的垃圾回收器才会在合适的时候回收它。</p>\n<p>只要类型相互兼容，就可以<strong>让一个数组变量指向另一个实际的数组</strong>，这种操作会让人产生数组的长度可变的错觉。如下代码所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义并初始化数组，使用静态初始化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] a = &#123;<span class=\"number\">5</span>, <span class=\"number\">7</span> , <span class=\"number\">20</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 定义并初始化数组，使用动态初始化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"comment\">// 输出b数组的长度</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"b数组的长度为：\"</span> + b.length);</span><br><span class=\"line\"><span class=\"comment\">// 循环输出a数组的元素</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ,len = a.length; i &lt; len ; i++ )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(a[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 循环输出b数组的元素</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> , len = b.length; i &lt; len ; i++ )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(b[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 因为a是int[]类型，b也是int[]类型，所以可以将a的值赋给b。</span></span><br><span class=\"line\"><span class=\"comment\">// 也就是让b引用指向a引用指向的数组</span></span><br><span class=\"line\">b = a;</span><br><span class=\"line\"><span class=\"comment\">// 再次输出b数组的长度</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"b数组的长度为：\"</span> + b.length);</span><br></pre></td></tr></table></figure><h3 id=\"应用举例\">应用举例<a href=\"#应用举例\" title=\"应用举例\"></a></h3><blockquote>\n<p> 将一个浮点数转换成人民币读法字符串</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 网站: &lt;a href=\"http://www.crazyit.org\"&gt;疯狂Java联盟&lt;/a&gt;&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (C), 2001-2018, Yeeku.H.Lee&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * This program is protected by copyright laws.&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Program Name:&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Date:&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Yeeku.H.Lee kongyeeku@163.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Num2Rmb</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String[] hanArr = &#123;<span class=\"string\">\"零\"</span> , <span class=\"string\">\"壹\"</span> , <span class=\"string\">\"贰\"</span> , <span class=\"string\">\"叁\"</span> , <span class=\"string\">\"肆\"</span> ,</span><br><span class=\"line\">\t\t<span class=\"string\">\"伍\"</span> , <span class=\"string\">\"陆\"</span> , <span class=\"string\">\"柒\"</span> , <span class=\"string\">\"捌\"</span> , <span class=\"string\">\"玖\"</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String[] unitArr = &#123;<span class=\"string\">\"十\"</span> , <span class=\"string\">\"百\"</span> , <span class=\"string\">\"千\"</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 把一个浮点数分解成整数部分和小数部分字符串</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> num 需要被分解的浮点数</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 分解出来的整数部分和小数部分。第一个数组元素是整数部分，第二个数组元素是小数部分。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String[] divide(<span class=\"keyword\">double</span> num)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将一个浮点数强制类型转换为long，即得到它的整数部分</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> zheng = (<span class=\"keyword\">long</span>)num;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 浮点数减去整数部分，得到小数部分，小数部分乘以100后再取整得到2位小数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> xiao = Math.round((num - zheng) * <span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面用了2种方法把整数转换为字符串</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[]&#123;zheng + <span class=\"string\">\"\"</span>, String.valueOf(xiao)&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 把一个四位的数字字符串变成汉字字符串</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> numStr 需要被转换的四位的数字字符串</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 四位的数字字符串被转换成的汉字字符串。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">toHanStr</span><span class=\"params\">(String numStr)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tString result = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> numLen = numStr.length();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 依次遍历数字字符串的每一位数字</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; numLen ; i++ )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把char型数字转换成的int型数字，因为它们的ASCII码值恰好相差48</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 因此把char型数字减去48得到int型数字，例如'4'被转换成4。</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> num = numStr.charAt(i) - <span class=\"number\">48</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果不是最后一位数字，而且数字不是零，则需要添加单位（千、百、十）</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( i != numLen - <span class=\"number\">1</span> &amp;&amp; num != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tresult += hanArr[num] + unitArr[numLen - <span class=\"number\">2</span> - i];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 否则不要添加单位</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tresult += hanArr[num];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">\t\tNum2Rmb nr = <span class=\"keyword\">new</span> Num2Rmb();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 测试把一个浮点数分解成整数部分和小数部分</span></span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(nr.divide(<span class=\"number\">236711125.123</span>)));</span><br><span class=\"line\">\t\t<span class=\"comment\">// 测试把一个四位的数字字符串变成汉字字符串</span></span><br><span class=\"line\">\t\tSystem.out.println(nr.toHanStr(<span class=\"string\">\"609\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"面向对象\">面向对象<a href=\"#面向对象\" title=\"面向对象\"></a></h1><h2 id=\"类-class\">类 class<a href=\"#类-class\" title=\"类 class\"></a></h2><p><font color=\"red\"><strong>如果定义了一个<code>public</code>类，则该源文件的主文件名必须与该<code>public</code>类的类名相同</strong></font></p>\n<p><font color=\"red\"><strong>类object是类层次结构的根。每个类都有objpct作为超类。所有对象 (包括数组)都实现了这个类的方法。</strong></font></p>\n<p><strong>object要么是其他类的父类 ，要么是其他类（有继承关系的类）的超类</strong></p>\n<p><strong>标准类制作(构造器、成员变量、方法)</strong></p>\n<ul><li>成员变量 <code>private</code>修饰  <strong>用来封装</strong></li>\n<li>构造方法 （有参、无参）</li>\n<li>成员方法 <strong><code>public</code>修饰</strong><ul><li>为成员变量提供 <code>setXX()</code> <code>getXX()</code> </li>\n<li>提供一个显示对象信息的<code>show()</code></li>\n</ul></li>\n</ul><p>类里各成员之间的定义顺序没有任何影响，各成员之间可以相互调用，但需要指出的是，<strong>static修饰的成员不能访问没有static修饰的成员。</strong></p>\n<p>Java语言提供了一个功能:<strong>如果程序员没有为一个类编写构造器，则系统会为该类提供一个默认的构造器。一旦程序员为一个类提供了构造器，系统将不再为该类提供构造器。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 <span class=\"class\"><span class=\"keyword\">class</span> 类名 </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//成员变量 （属性）</span></span><br><span class=\"line\">    数据类型 变量<span class=\"number\">1</span>;</span><br><span class=\"line\">    ····</span><br><span class=\"line\">    <span class=\"comment\">//成员方法（行为）</span></span><br><span class=\"line\">   \t方法<span class=\"number\">1</span>;</span><br><span class=\"line\">    方法<span class=\"number\">2</span>;</span><br><span class=\"line\">    ····</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"变量\">变量<a href=\"#变量\" title=\"变量\"></a></h3><ul><li><strong>成员变量</strong>：类中，方法外的变量</li>\n<li><strong>局部变量</strong>：方法内 </li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">    String name;    <span class=\"comment\">//成员变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;    <span class=\"comment\">//局部变量</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"好好学习\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doHomework</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"多做练习\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;  <span class=\"comment\">//局部变量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;    <span class=\"comment\">//成员变量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"成员变量\">成员变量<a href=\"#成员变量\" title=\"成员变量\"></a></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[修饰符] 类型 成员变量名 [= 默认值]</span><br></pre></td></tr></table></figure><ul><li><strong>修饰符</strong>:修饰符可以省略,也可以是<code>public</code>、 <code>protected</code> ,<code>private</code> 、<code>static</code>、 <code>final</code>,前三个最多只能出现其中之一，可以与<code>static</code>、<code>final</code>组合起来修饰成员变量。</li>\n<li><strong>类型</strong>:类型可以是Java语言允许的任何数据类型，包括<strong>基本类型</strong>和现在介绍的<strong>引用类型。</strong></li>\n<li><strong>成员变量名</strong>:成员变量名只要是一个<strong>合法的标识符即可</strong>，<strong>第一个单词首字母小写，后面每个单词首字母大写</strong></li>\n<li><strong>默认值</strong>:定义成员变量还可以指定一个可选的默认值。</li>\n</ul><blockquote>\n<p> 成员变量由英文单词field意译而来，早期有些书籍将成员变量称为属性。但实际上在Java世界里属性（由 property翻译而来）指的是一组setter方法和getter方法。</p>\n<p>比如说某个类有age属性，意味着该类包含<code>setAge()</code>和<code>getAge()</code>两个方法。另外，也有些资料、书籍将field翻译为字段、域。</p>\n</blockquote>\n<h4 id=\"局部变量\">局部变量<a href=\"#局部变量\" title=\"局部变量\"></a></h4><h3 id=\"方法\">方法<a href=\"#方法\" title=\"方法\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[修饰符] 方法返回值类型 方法名(类型列表)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t方法体;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> 数据;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong>static修饰的成员表明它属于这个类本身,而不属于该类的单个实例</strong>,通常把 static修饰的成员变量和方法也称为<strong>类变量、类方法</strong>。</p>\n<p>不使用static修饰的普通方法,成员变量则属于该类的单个实例,而不属于该类。因为通常把不使用static修饰的成员变量和方法也称为<strong>实例变量、实例方法</strong>。<br>有时也把 static修饰的成员变量和方法称为<strong>静态变量和静态方法</strong>，把不使用static修饰的成员变量和方法称为<strong>非静态变量和非静态方法</strong>。<strong><font color=\"red\">静态成员不能直接访问非静态成员</font></strong>。</p>\n<blockquote>\n<p>虽然绝大部分资料都喜欢把static称为<strong>静态</strong>，但实际上这种说法很模糊，完全无法说明static的真正作用。static的真正作用就是用于区分<strong>成员变量、方法、内部类、初始化块</strong>(本书后面会介绍后两种成员）这四种成员到底属于类本身还是属于实例。在类中定义的成员，static相当于一个标志，<strong>有static修饰的成员属于类本身，没有static修饰的成员属于该类的实例</strong>。</p>\n</blockquote>\n<ul><li><strong>形参</strong>：方法中定义的参数，<code>int number</code></li>\n<li><strong>实参</strong>：方法中调用的参数，<code>10</code>、<code>number</code></li>\n</ul><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/202111151924015.png\" alt=\"QQ截图20211115192341\" style=\"zoom: 80%;\" /><h4 id=\"方法重载\">方法重载<a href=\"#方法重载\" title=\"方法重载\"></a></h4><ul><li>多个方法在同一个类中</li>\n<li>多个方法具有相同的方法名</li>\n<li>多个方法的参数不相同，类型不相或者数量不同</li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> height;</span><br><span class=\"line\">    MyClass() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"无参数构造函数\"</span>);</span><br><span class=\"line\">        height = <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MyClass(<span class=\"keyword\">int</span> i) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"房子高度为 \"</span> + i + <span class=\"string\">\" 米\"</span>);</span><br><span class=\"line\">        height = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">info</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"房子高度为 \"</span> + height + <span class=\"string\">\" 米\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">info</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s + <span class=\"string\">\": 房子高度为 \"</span> + height + <span class=\"string\">\" 米\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><mark><strong>形参的改变 不影响外部实参的值</strong></mark></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">number</span><span class=\"params\">(<span class=\"keyword\">int</span> number)</span> </span>&#123;</span><br><span class=\"line\">        number = <span class=\"number\">200</span>; <span class=\"comment\">//形参的改变 不影响外部实参的值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> number = <span class=\"number\">100</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"调用函数前\"</span> + number);</span><br><span class=\"line\">        number(number);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"调用函数后\"</span> + number);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出：</span><br><span class=\"line\">100</span><br><span class=\"line\">100</span><br></pre></td></tr></table></figure><h4 id=\"构造方法构造器\">构造方法(构造器)<a href=\"#构造方法构造器\" title=\"构造方法(构造器)\"></a></h4><ul><li>如果没有定义构造方法，系统默认给出构造方法</li>\n<li><strong>如果定义了构造方法，系统不再提供无参构造方法</strong></li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> 类名 </span>&#123;</span><br><span class=\"line\">    修饰符 类名() &#123;&#125;\t<span class=\"comment\">//无参构造方法</span></span><br><span class=\"line\">    修饰符 类名(参数<span class=\"number\">1</span>) &#123;&#125;\t<span class=\"comment\">//有参构造方法</span></span><br><span class=\"line\">    修饰符 类名(参数<span class=\"number\">1</span>,参数<span class=\"number\">2</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"构造器\">构造器<a href=\"#构造器\" title=\"构造器\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[修饰符] 构造器名(形参列表)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t执行体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>修饰符：可省略，也可以是 <code>public</code> <code>protected</code> <code>private</code> </li>\n<li>构造器名：<strong>构造器名必须和类名相同</strong></li>\n</ul><p>构造器<strong>不能定义返回值类型</strong>，也不能使用<code>void</code>声明构造器没有返回值</p>\n<blockquote>\n<p> 不要在构造器里显式使用return来返回当前类的对象，因为构造器的返回值是隐式的。</p>\n</blockquote>\n<h3 id=\"对象\">对象<a href=\"#对象\" title=\"对象\"></a></h3><p>创建对象的根本途径是构造器，通过new关键字来调用某个类的构造器即可创建这个类的实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br></pre></td></tr></table></figure><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用Person类定义一个Person类型的变量</span></span><br><span class=\"line\">Person p;</span><br><span class=\"line\"><span class=\"comment\">//通过new关键字调用Person类的构造器，返回一个Person实例</span></span><br><span class=\"line\"><span class=\"comment\">//将该Person实例赋给p变量</span></span><br><span class=\"line\">p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"comment\">//使用成员变量</span></span><br><span class=\"line\">p.brand</span><br><span class=\"line\"><span class=\"comment\">//使用成员方法</span></span><br><span class=\"line\">p.call();</span><br></pre></td></tr></table></figure><ul><li>static修饰的方法和成员变量，既可通过<strong>类来调用</strong>，也可通过<strong>实例来调用</strong>;</li>\n<li>没有使用static修饰的普通方法和成员变量，<strong>只可通过实例来调用</strong>。</li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 访问p的name实例变量，直接为该变量赋值。</span></span><br><span class=\"line\">p.name = <span class=\"string\">\"李刚\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 调用p的say方法，声明say()方法时定义了一个形参，</span></span><br><span class=\"line\"><span class=\"comment\">// 调用该方法必须为形参指定一个值</span></span><br><span class=\"line\">p.say(<span class=\"string\">\"Java语言很简单，学习很容易！\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 直接输出p的name实例变量，将输出 李刚</span></span><br><span class=\"line\">System.out.println(p.name);</span><br></pre></td></tr></table></figure><ul><li><code>System.out.print(s1)</code>为<code>001</code></li>\n</ul><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/202111152021678.png\" alt=\"QQ截图20211115202034\" style=\"zoom:67%;\" /><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/202111152015749.png\" alt=\"QQ截图20211115201508\" style=\"zoom:67%;\" /><h2 id=\"封装-private\">封装 private<a href=\"#封装-private\" title=\"封装 private\"></a></h2><ul><li>是一个权限修饰符</li>\n<li>可以修饰成员(成员变量和成员方法)</li>\n<li>作用是保护成员不被别的类使用，被private修饰的成员<strong>只在本类中才能访问</strong></li>\n</ul><blockquote>\n<p> <strong><font color=\"red\">封装通过setXXX()，getXXX() 调用</font></strong></p>\n</blockquote>\n<p>Student.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//成员变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//get/set方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String n)</span></span>&#123;</span><br><span class=\"line\">        name = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    public String getName()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        return name;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">        age = a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    public int getAge()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        return age;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(name+<span class=\"string\">\" ，\"</span>+age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Student_test.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student_test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建对象</span></span><br><span class=\"line\">        Student s = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用set方法给成员变量赋值</span></span><br><span class=\"line\">        s.setName(<span class=\"string\">\"林青霞\"</span>);</span><br><span class=\"line\">        s.setAge((<span class=\"number\">22</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        s.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">------------------------------------------------------</span><br><span class=\"line\"> 林青霞 ，<span class=\"number\">22</span></span><br></pre></td></tr></table></figure><h3 id=\"this\">this<a href=\"#this\" title=\"this\"></a></h3><p>修饰的变量代指<strong>成员变量</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> String name;\t<span class=\"comment\">//成员变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name; <span class=\"comment\">//this.name 成员变量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"api\">API<a href=\"#api\" title=\"API\"></a></h2><h3 id=\"dash-for-mac\">Dash for Mac<a href=\"#dash-for-mac\" title=\"Dash for Mac\"></a></h3><img src=\"https://cdn.macwk.com/public/uploads/_/originals/dash-2.png\" alt=\"img\" style=\"zoom:50%;\" /><blockquote>\n<p>一款功能强大的API文档浏览器和代码片段管理器，内置了丰富的API文档，多达150多种，可以在线下载各种开发API和文档资料，可以让您集中管理API文档，包括离线下载、搜索、查阅，包括各种主流的编程语言和框架，如Cocos2D, Cocos3D, Corona, CSS, HTML, Java, Objective-C, JavaScript, jQuery, Vue,React等, 不需要在到处下载 API 文档，Dash 已经自动集成了，并支持集成到Webstrom、Xcode、Alfred等软件中，非常的强大！开发者必备的API文档参考工具。</p>\n</blockquote>\n<h2 id=\"数据输入\">数据输入<a href=\"#数据输入\" title=\"数据输入\"></a></h2><ol><li><p>导包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Scanner;</span><br></pre></td></tr></table></figure></li>\n<li><p>创建对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scanner sc &#x3D; new Scanner(System.in);</span><br></pre></td></tr></table></figure></li>\n<li><p>接受数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i &#x3D; sc.nextInt();</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float i &#x3D; sc.nextFloat();</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double x &#x3D; sc.nextDouble();</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String i &#x3D; sc.nextLine();</span><br></pre></td></tr></table></figure></li>\n</ol><h3 id=\"next-与-nextline-区别\">next() 与 nextLine() 区别<a href=\"#next-与-nextline-区别\" title=\"next() 与 nextLine() 区别\"></a></h3><p><code>next()</code>:</p>\n<ul><li>1、一定要读取到有效字符后才可以结束输入。</li>\n<li>2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li>\n<li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li>\n<li>next() 不能得到带有空格的字符串。</li>\n</ul><p><code>nextLine()</code>：</p>\n<ul><li>1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li>\n<li>2、可以获得空白。</li>\n</ul><h2 id=\"输出\">输出<a href=\"#输出\" title=\"输出\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println();&#x2F;&#x2F;输出内容换行</span><br><span class=\"line\">System.out.print(); &#x2F;&#x2F;输出内容不换行</span><br></pre></td></tr></table></figure><h2 id=\"random随机数\">Random随机数<a href=\"#random随机数\" title=\"Random随机数\"></a></h2><ol><li><p>导包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Random</span><br></pre></td></tr></table></figure></li>\n<li><p>创建对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random r &#x3D; new Random();</span><br></pre></td></tr></table></figure></li>\n<li><p>获取随机数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int number &#x3D; r.nextInt(10); &#x2F;&#x2F;取数据范围[0，10）</span><br></pre></td></tr></table></figure></li>\n</ol><h1 id=\"字符串\">字符串<a href=\"#字符串\" title=\"字符串\"></a></h1><h2 id=\"string-1\">String<a href=\"#string-1\" title=\"String\"></a></h2><ul><li>值创建后不能修改</li>\n<li>可被共享</li>\n<li>效果相当于<strong>字符数组</strong><code>char[]</code>，底层原理是<strong>字节数组</strong><code>byte[]</code></li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] bys = &#123;<span class=\"number\">97</span>,<span class=\"number\">98</span>,<span class=\"number\">99</span>&#125;;</span><br><span class=\"line\">String s3 = <span class=\"keyword\">new</span> String(bys);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"s3:\"</span>+s3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//s3:abc</span></span><br></pre></td></tr></table></figure><h3 id=\"string构造方法\">String构造方法<a href=\"#string构造方法\" title=\"String构造方法\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span>[] chs = &#123;<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] bys = &#123;<span class=\"number\">97</span>,<span class=\"number\">98</span>,<span class=\"number\">99</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">()</span></span>;\t<span class=\"comment\">//创建一个空白字符串，不包含任何内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">char</span>[] chs)</span></span>;\t<span class=\"comment\">//abc\t根据字符数组内容 创建对象 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bys)</span></span>;\t<span class=\"comment\">//abc\t</span></span><br><span class=\"line\">String s = <span class=\"string\">\"abc\"</span>;\t\t\t<span class=\"comment\">//abc\t直接赋值的方式创建字符串对象</span></span><br><span class=\"line\">-------------------------------------------------------------</span><br><span class=\"line\">String s = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">String n = <span class=\"keyword\">new</span> String();</span><br><span class=\"line\">String n = <span class=\"keyword\">new</span> String(chs);</span><br><span class=\"line\">String n = <span class=\"keyword\">new</span> String(bys);</span><br></pre></td></tr></table></figure><h3 id=\"比较字符串\">比较字符串<a href=\"#比较字符串\" title=\"比较字符串\"></a></h3><ul><li>比较<strong>地址</strong>是否相同</li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span>[] chs =&#123;<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>&#125;;</span><br><span class=\"line\">String s1 = <span class=\"keyword\">new</span> String(chs);\t<span class=\"comment\">//new出来的都是不相同的 </span></span><br><span class=\"line\">String s2 = <span class=\"keyword\">new</span> String(chs);</span><br><span class=\"line\">System.out.println(s1==s2);\t<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure><p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/202201132304719.jpg\" class=\"φcy\" alt=\"QQ20220113-230048@2x\"></p>\n<ul><li>比较<strong>内容</strong>是否相同 <code>.equals</code></li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s3 = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">String s4 = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">System.out.println(s3.equals(s4));</span><br></pre></td></tr></table></figure><blockquote>\n<p>实例：用户登录</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringTest01</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String usename= <span class=\"string\">\"itheima\"</span>;</span><br><span class=\"line\">        String password = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">        Scanner sc= <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>;i&gt;<span class=\"number\">0</span>;i--) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"请输入用户名:\"</span>);</span><br><span class=\"line\">            String name = sc.nextLine();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"请输入密码：\"</span>);</span><br><span class=\"line\">            String pass = sc.nextLine();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (usename.equals(name) &amp;&amp; password.equals(pass)) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"登陆成功\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"您还有\"</span>+i+<span class=\"string\">\"次机会，密码错误\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"遍历字符串\">遍历字符串<a href=\"#遍历字符串\" title=\"遍历字符串\"></a></h3><ul><li><code>public char charAt(int index)</code>:返回索引处的char值，字符串的索引也从0开始</li>\n<li><code>public int length()</code>:返回字符串的长度</li>\n<li><strong>字符串长度</strong>：<code>字符串对象.length()</code> </li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">System.out.print(<span class=\"string\">\"亲输入一个字符串:\"</span>);</span><br><span class=\"line\">String line = sc.nextLine();</span><br><span class=\"line\">System.out.println(line.length());</span><br><span class=\"line\">System.out.println(line.charAt(<span class=\"number\">0</span>));</span><br><span class=\"line\">System.out.println(line.charAt(<span class=\"number\">1</span>));</span><br><span class=\"line\">System.out.println(line.charAt(<span class=\"number\">2</span>));</span><br><span class=\"line\">------------------------------------------------</span><br><span class=\"line\">亲输入一个字符串:asd</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">a</span><br><span class=\"line\">s</span><br><span class=\"line\">d</span><br></pre></td></tr></table></figure><h4 id=\"统计字符出现次数\">统计字符出现次数<a href=\"#统计字符出现次数\" title=\"统计字符出现次数\"></a></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"请输入一个字符串\"</span>);</span><br><span class=\"line\">String line = sc.nextLine();</span><br><span class=\"line\"><span class=\"keyword\">int</span> bigCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> smallCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> numberCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; line.length(); i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = line.charAt(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'A'</span> &amp;&amp; ch &lt;= <span class=\"string\">'Z'</span>) &#123;</span><br><span class=\"line\">        bigCount++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'a'</span> &amp;&amp; ch &lt;= <span class=\"string\">'z'</span>) &#123;</span><br><span class=\"line\">        smallCount++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">        numberCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"大写字母\"</span> + bigCount + <span class=\"string\">'个'</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"小写字母\"</span> + smallCount + <span class=\"string\">'个'</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"数字\"</span> + numberCount + <span class=\"string\">'个'</span>);</span><br></pre></td></tr></table></figure><h3 id=\"字符串拼接\">字符串拼接<a href=\"#字符串拼接\" title=\"字符串拼接\"></a></h3><ul><li>浪费空间</li>\n<li>时间效率低</li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        String s = arryToString(arr);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"s:\"</span> + s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">arryToString</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        String s = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        s += <span class=\"string\">\"[\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == arr.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                s += arr[i];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                s += arr[i];</span><br><span class=\"line\">                s += <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        s += <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"翻转拼接\">翻转拼接<a href=\"#翻转拼接\" title=\"翻转拼接\"></a></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">reverse</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"请输入一个字符串：\"</span>);</span><br><span class=\"line\">        String line = sc.nextLine();</span><br><span class=\"line\">        String s = reverse(line);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"s:\"</span> + s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">reverse</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        String ss = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = s.length() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            ss += s.charAt(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ss;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"stringbuilder\">StringBuilder<a href=\"#stringbuilder\" title=\"StringBuilder\"></a></h2><ul><li><strong>String</strong>:内容是不可变的</li>\n<li><strong>StringBuilder</strong>:内容是可变的</li>\n</ul><h3 id=\"stringbuilder构造方法\">StringBuilder构造方法<a href=\"#stringbuilder构造方法\" title=\"StringBuilder构造方法\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringBuilder</span><span class=\"params\">()</span></span>;\t<span class=\"comment\">//创建一个空白可变字符串对象，不含有任何内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringBuilder</span><span class=\"params\">(String str)</span></span>;\t<span class=\"comment\">//根据字符串的内容，来创建可变字符串对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(); <span class=\"comment\">//创建空的</span></span><br><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"hello\"</span>);</span><br></pre></td></tr></table></figure><h3 id=\"stringbuilder的添加和反转方法\">StringBuilder的添加和反转方法<a href=\"#stringbuilder的添加和反转方法\" title=\"StringBuilder的添加和反转方法\"></a></h3><p><code>public StringBuilder append(任意类型)</code>: 添加数据，并返回对象本身<br><code>public StringBuilder reverse()</code>: 变成相反的字符序列，并返回</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">StringBuilder sb2 = sb.append(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"sb:\"</span>+sb);   <span class=\"comment\">//sb:hello</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"sb2:\"</span>+sb2); <span class=\"comment\">//sb：2hello</span></span><br><span class=\"line\">System.out.println(sb==sb2);   <span class=\"comment\">//true</span></span><br><span class=\"line\">-----------------------------------------</span><br><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">sb.reverse();</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"sb:\"</span>+sb);   <span class=\"comment\">//sb:olleh</span></span><br></pre></td></tr></table></figure><h4 id=\"链式编程\">链式编程<a href=\"#链式编程\" title=\"链式编程\"></a></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sb.append(<span class=\"string\">\"hello\"</span>). append(<span class=\"string\">\"world\"</span>). append(<span class=\"string\">\"java\"</span>).append(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"comment\">//helloworldjava100</span></span><br></pre></td></tr></table></figure><h3 id=\"stringbuilder和string转化\">StringBuilder和String转化<a href=\"#stringbuilder和string转化\" title=\"StringBuilder和String转化\"></a></h3><ul><li><p>StringBuilder转化为String</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>; <span class=\"comment\">//通过 tostring0就可以实现把 String Builder转换为 String</span></span><br><span class=\"line\">-------------------------------------------------------------</span><br><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">String s = sb.toString();</span><br><span class=\"line\">System.out.println(s);</span><br></pre></td></tr></table></figure></li>\n<li><p>String转化为StringBuilder</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">Builder</span><span class=\"params\">(String s)</span></span>; <span class=\"comment\">//通过构造方法就可以实现把 String转换为 String Builder</span></span><br><span class=\"line\">----------------------------------------------------------------</span><br><span class=\"line\">String s = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(s);</span><br><span class=\"line\">System.out.println(sb);</span><br></pre></td></tr></table></figure></li>\n</ul><h3 id=\"字符串拼接【升级版】\">字符串拼接【升级版】<a href=\"#字符串拼接【升级版】\" title=\"字符串拼接【升级版】\"></a></h3><ul><li>节省空间</li>\n<li>时间效率高</li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        String s = arrayToString(arr);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"s:\"</span> + s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">arrayToString</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == arr.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                sb.append(arr[i]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                sb.append(arr[i]).append(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"翻转【升级版】\">翻转【升级版】<a href=\"#翻转【升级版】\" title=\"翻转【升级版】\"></a></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"请输入一个字符串：\"</span>);</span><br><span class=\"line\">        String line = sc.nextLine();</span><br><span class=\"line\">        String s = myreverse(line);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"s:\"</span> + s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">myreverse</span><span class=\"params\">(String line)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(line);</span><br><span class=\"line\">        sb.reverse();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">        <span class=\"comment\">//简写：return new StirngBuilder(line).reverse().toString();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"集合\">集合<a href=\"#集合\" title=\"集合\"></a></h1><p><strong>集合类的特点</strong>:提供一种存储空间<strong>可变的存储模型</strong>，存储的数据容量可以发生改变</p>\n<h2 id=\"arraylistltegt\"><code>ArrayList&lt;E&gt;</code><a href=\"#arraylistltegt\" title=\"ArrayList&lt;E&gt;\"></a></h2><ul><li>可调整大小的数组实现</li>\n<li><code>&lt;E&gt;</code> :是一种特殊的数据类型，<strong>泛型。</strong></li>\n</ul><h3 id=\"构造方法\">构造方法<a href=\"#构造方法\" title=\"构造方法\"></a></h3><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>方法名</th><th>说明</th></tr>\n</thead><tbody><tr>\n<td>public ArrayList()</td><td>创建一个空的集合对象</td></tr>\n<tr>\n<td>public boolean add(E e)</td><td>将指定的元素追加到此集合的末尾, 返回bool表示是否成功</td></tr>\n<tr>\n<td>public void add(int index,E element)</td><td>在此集合中的指定位置插入指定的元素</td></tr>\n</tbody></table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; array = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">array.add(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">array.add(<span class=\"string\">\"world\"</span>);</span><br><span class=\"line\">array.add(<span class=\"string\">\"java\"</span>);</span><br><span class=\"line\">array.add(<span class=\"number\">1</span>, <span class=\"string\">\"javase\"</span>);</span><br><span class=\"line\">System.out.println(array);</span><br><span class=\"line\">------------------------------------------------------</span><br><span class=\"line\">[hello, javase, world, java]</span><br></pre></td></tr></table></figure><h3 id=\"方法集合\">方法集合<a href=\"#方法集合\" title=\"方法集合\"></a></h3><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>方法名</th><th>说明</th></tr>\n</thead><tbody><tr>\n<td>public boolean remove(Objecto)</td><td>删除指定的元素，返回删除是否成功</td></tr>\n<tr>\n<td>public E remove(int index)</td><td>删除指定索引处的元素，返回被删除的元素</td></tr>\n<tr>\n<td>public E set(int index,E element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr>\n<tr>\n<td>public E get(int index)</td><td>返回指定索引</td></tr>\n<tr>\n<td>public int size()</td><td>返回集合中的元素的个数</td></tr>\n</tbody></table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; array = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">array.add(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">array.add(<span class=\"string\">\"world\"</span>);</span><br><span class=\"line\">array.add(<span class=\"string\">\"java\"</span>);</span><br><span class=\"line\">System.out.println(array.remove(<span class=\"string\">\"world\"</span>));</span><br><span class=\"line\">System.out.println(array.remove(<span class=\"string\">\"javaee\"</span>));</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; array = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">array.add(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">array.add(<span class=\"string\">\"world\"</span>);</span><br><span class=\"line\">array.add(<span class=\"string\">\"java\"</span>);</span><br><span class=\"line\">System.out.println(array.remove(<span class=\"number\">1</span>));</span><br><span class=\"line\">System.out.println(array);</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">world</span><br><span class=\"line\">[hello, java]</span><br></pre></td></tr></table></figure><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; array = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">array.add(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">array.add(<span class=\"string\">\"world\"</span>);</span><br><span class=\"line\">array.add(<span class=\"string\">\"java\"</span>);</span><br><span class=\"line\">System.out.println(array.set(<span class=\"number\">1</span>, <span class=\"string\">\"javaee\"</span>));</span><br><span class=\"line\">System.out.println(array);</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">world</span><br><span class=\"line\">[hello, javaee, java]</span><br></pre></td></tr></table></figure><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; array = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">array.add(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">array.add(<span class=\"string\">\"world\"</span>);</span><br><span class=\"line\">array.add(<span class=\"string\">\"java\"</span>);</span><br><span class=\"line\">System.out.println(array.get(<span class=\"number\">1</span>));</span><br><span class=\"line\">System.out.println(array);</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">world</span><br><span class=\"line\">[hello, world, java]</span><br></pre></td></tr></table></figure><h4 id=\"遍历集合\">遍历集合<a href=\"#遍历集合\" title=\"遍历集合\"></a></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; array = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">array.add(<span class=\"string\">\"三上\"</span>);</span><br><span class=\"line\">array.add(<span class=\"string\">\"悠亚\"</span>);</span><br><span class=\"line\">array.add(<span class=\"string\">\"初爱\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class=\"line\">    System.out.println(array.get(i));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"存储学生对象并遍历\">存储学生对象并遍历<a href=\"#存储学生对象并遍历\" title=\"存储学生对象并遍历\"></a></h4><p>Student.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"><span class=\"comment\">//定义构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//定义方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Student_test.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student_test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建集合对象</span></span><br><span class=\"line\">        ArrayList&lt;Student&gt; array = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//创建学生对象</span></span><br><span class=\"line\">        Student s1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"三上悠亚\"</span>, <span class=\"number\">28</span>);</span><br><span class=\"line\">        Student s2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"初爱\"</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">        <span class=\"comment\">//添加学生对象</span></span><br><span class=\"line\">        array.add(s1);</span><br><span class=\"line\">        array.add(s2);</span><br><span class=\"line\">        <span class=\"comment\">//遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class=\"line\">            Student s = array.get(i);</span><br><span class=\"line\">            System.out.println(s.getName() + <span class=\"string\">\"，\"</span> + s.getAge());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">------------------------------------------------------</span><br><span class=\"line\">三上悠亚，<span class=\"number\">28</span></span><br><span class=\"line\">初爱，<span class=\"number\">22</span></span><br></pre></td></tr></table></figure><h4 id=\"存储学生对象并遍历【升级版】\">存储学生对象并遍历【升级版】<a href=\"#存储学生对象并遍历【升级版】\" title=\"存储学生对象并遍历【升级版】\"></a></h4><p>Student.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Student_test.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student_test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建集合对象</span></span><br><span class=\"line\">        ArrayList&lt;Student&gt; array = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        addStudent(array);</span><br><span class=\"line\">        <span class=\"comment\">//遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class=\"line\">            Student s = array.get(i);</span><br><span class=\"line\">            System.out.println(s.getName() + <span class=\"string\">\"，\"</span> + s.getAge());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addStudent</span><span class=\"params\">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建学生对象</span></span><br><span class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"请输入姓名\"</span>);</span><br><span class=\"line\">        String name = sc.nextLine();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"请输入年龄\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> age = sc.nextInt();</span><br><span class=\"line\">        Student s = <span class=\"keyword\">new</span> Student(name, age);</span><br><span class=\"line\">        <span class=\"comment\">//添加学生对象</span></span><br><span class=\"line\">        array.add(s);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"学生管理系统\">学生管理系统<a href=\"#学生管理系统\" title=\"学生管理系统\"></a></h3><p>Student.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    学生类</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    Alt+Insert  根据自己的需要进行选择</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//学号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sid;</span><br><span class=\"line\">    <span class=\"comment\">//姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"comment\">//年龄</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String age;</span><br><span class=\"line\">    <span class=\"comment\">//居住地</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String sid, String name, String age, String address)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sid = sid;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSid</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSid</span><span class=\"params\">(String sid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sid = sid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(String age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAddress</span><span class=\"params\">(String address)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>StudentManager.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    学生管理系统</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        1:用输出语句完成主界面的编写</span></span><br><span class=\"line\"><span class=\"comment\">        2:用Scanner实现键盘录入数据</span></span><br><span class=\"line\"><span class=\"comment\">        3:用switch语句完成操作的选择</span></span><br><span class=\"line\"><span class=\"comment\">        4:用循环完成再次回到主界面</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建集合对象，用于存储学生数据</span></span><br><span class=\"line\">        ArrayList&lt;Student&gt; array = <span class=\"keyword\">new</span> ArrayList&lt;Student&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"--------欢迎来到学生管理系统--------\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"1.添加学生\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"2.删除学生\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"3.修改学生\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"4.查看所有学生\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"5.退出\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"请输入你的选择：\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">            String line = sc.nextLine();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (line) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"1\"</span>:</span><br><span class=\"line\"><span class=\"comment\">//                    System.out.println(\"添加学生\");</span></span><br><span class=\"line\">                    addStudent(array);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"2\"</span>:</span><br><span class=\"line\"><span class=\"comment\">//                    System.out.println(\"删除学生\");</span></span><br><span class=\"line\">                    deleteStudent(array);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"3\"</span>:</span><br><span class=\"line\"><span class=\"comment\">//                    System.out.println(\"修改学生\");</span></span><br><span class=\"line\">                    updateStudent(array);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"4\"</span>:</span><br><span class=\"line\"><span class=\"comment\">//                    System.out.println(\"查看所有学生\");</span></span><br><span class=\"line\">                    findAllStudent(array);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"5\"</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"谢谢使用\"</span>);</span><br><span class=\"line\">                    System.exit(<span class=\"number\">0</span>);<span class=\"comment\">//JVM退出</span></span><br><span class=\"line\"><span class=\"comment\">//                    break;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义一个方法，用于添加学生信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addStudent</span><span class=\"params\">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//键盘录入学生对象所需要的数据,显示提示信息，提示要输入何种信息</span></span><br><span class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        String sid;<span class=\"comment\">//定义学号</span></span><br><span class=\"line\">        <span class=\"comment\">//循环实现</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"请输入学生学号\"</span>);</span><br><span class=\"line\">            sid = sc.nextLine();</span><br><span class=\"line\">            <span class=\"comment\">//判断学号是否重复</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> flag = isUsed(array, sid);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag == <span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"学号被使用\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"请输入学生姓名：\"</span>);</span><br><span class=\"line\">        String name = sc.nextLine();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"请输入学生年龄：\"</span>);</span><br><span class=\"line\">        String age = sc.nextLine();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"请输入学生居住地：\"</span>);</span><br><span class=\"line\">        String address = sc.nextLine();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建学生对象，把键盘录入的数据赋值给学生对象的成员变量</span></span><br><span class=\"line\">        Student s = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">        s.setSid(sid);</span><br><span class=\"line\">        s.setName(name);</span><br><span class=\"line\">        s.setAge(age);</span><br><span class=\"line\">        s.setAddress(address);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将学生对象添加到集合中</span></span><br><span class=\"line\">        array.add(s);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//给出添加成功提示</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"添加学生成功\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断学号是否被使用</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isUsed</span><span class=\"params\">(ArrayList&lt;Student&gt; array, String sid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class=\"line\">            Student s = array.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.getSid().equals(sid)) &#123;</span><br><span class=\"line\">                flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义一个方法，用于查看学生信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">findAllStudent</span><span class=\"params\">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否有信息</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"无信息，请先添加信息\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;<span class=\"comment\">//程序结束</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//显示表头信息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"学号\\t\\t\\t姓名\\t\\t年龄\\t\\t居住地\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//将集合中数据取出按照对应格式显示学生信息，年龄显示补充“岁”</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class=\"line\">            Student s = array.get(i);</span><br><span class=\"line\">            System.out.println(s.getSid() + <span class=\"string\">\"\\t\"</span> + s.getName() + <span class=\"string\">\"\\t\"</span> + s.getAge() + <span class=\"string\">\"岁\\t\"</span> + s.getAddress());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义一个方法，用于删除学生信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteStudent</span><span class=\"params\">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//键盘录入要删除的学生学号,显示提示信息</span></span><br><span class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"请输入你要删除的学生的学号:\"</span>);</span><br><span class=\"line\">        String sid = sc.nextLine();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//遍历集合将对应学生对象从集合中删除</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class=\"line\">            Student s = array.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.getSid().equals(sid)) &#123;</span><br><span class=\"line\">                index = i;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"信息不存在，请重新输入\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//给出删除成功提示</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"删除成功\"</span>);</span><br><span class=\"line\">            array.remove(index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义一个方法，用于修改学生信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">updateStudent</span><span class=\"params\">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//键盘录入要修改的学生学号，显示提示信息</span></span><br><span class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"请输入你要修改的学生的学号：\"</span>);</span><br><span class=\"line\">        String sid = sc.nextLine();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//键盘录入要修改的学生信息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"请输入学生姓名：\"</span>);</span><br><span class=\"line\">        String name = sc.nextLine();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"请输入学生年龄：\"</span>);</span><br><span class=\"line\">        String age = sc.nextLine();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"请输入学生居住地：\"</span>);</span><br><span class=\"line\">        String address = sc.nextLine();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建学生对象</span></span><br><span class=\"line\">        Student s = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">        s.setSid(sid);</span><br><span class=\"line\">        s.setName(name);</span><br><span class=\"line\">        s.setAge(age);</span><br><span class=\"line\">        s.setAddress(address);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//遍历集合修改对应的学生信息</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class=\"line\">            Student student = array.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (student.getSid().equals(sid)) &#123;</span><br><span class=\"line\">                array.set(i, s);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//给出修改成功提示</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"修改学生成功\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"继承extends\">继承extends<a href=\"#继承extends\" title=\"继承extends\"></a></h1><p>继承中子类的特点:</p>\n<ul><li>子类可以有父类的内容</li>\n<li>子类还可以有自己特有的内容</li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> 子类名 <span class=\"keyword\">extends</span> 父类名</span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote>\n<p>例</p>\n</blockquote>\n<p>fu.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fu</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"show方法被调用\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>zi.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">zi</span> <span class=\"keyword\">extends</span> <span class=\"title\">fu</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"method方法被调用\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Demo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        fu f=<span class=\"keyword\">new</span> fu();</span><br><span class=\"line\">        f.show();</span><br><span class=\"line\">        zi z=<span class=\"keyword\">new</span> zi();</span><br><span class=\"line\">        z.method();</span><br><span class=\"line\">        z.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-----------------------------------------------------------------</span><br><span class=\"line\">show方法被调用</span><br><span class=\"line\">method方法被调用</span><br><span class=\"line\">show方法被调用</span><br></pre></td></tr></table></figure><h2 id=\"继承中变量的访问特点\">继承中变量的访问特点<a href=\"#继承中变量的访问特点\" title=\"继承中变量的访问特点\"></a></h2><p>在子类方法中访问一个变量 </p>\n<ol><li>子类局部范围找 </li>\n<li>子类成员范围找 </li>\n<li>父类成员范围找</li>\n<li>如果都没有就报错，<strong><font color=\"red\">不考虑父亲的父亲</font></strong></li>\n</ol><blockquote>\n<p>例</p>\n</blockquote>\n<p>fu.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fu</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age = <span class=\"number\">30</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>zi.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">zi</span> <span class=\"keyword\">extends</span> <span class=\"title\">fu</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name = <span class=\"string\">\"父亲\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> age = <span class=\"number\">10</span>;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">\",\"</span> + age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Demo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        zi z = <span class=\"keyword\">new</span> zi();</span><br><span class=\"line\">        z.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">------------------------------------------------------------------------</span><br><span class=\"line\">父亲,<span class=\"number\">10</span></span><br></pre></td></tr></table></figure><h2 id=\"继承的注意事项\">继承的注意事项<a href=\"#继承的注意事项\" title=\"继承的注意事项\"></a></h2><ul><li>Java中类<strong><font color=\"red\">只支持单继承，不支持多继承</font></strong></li>\n<li>Java中类支持多层继承</li>\n</ul><p>grand.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">grand</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drink</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"爷爷爱喝酒\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>father.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">father</span> <span class=\"keyword\">extends</span> <span class=\"title\">grand</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">smoke</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"爷爷爱抽烟\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>son.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">son</span> <span class=\"keyword\">extends</span> <span class=\"title\">father</span> </span>&#123;</span><br><span class=\"line\">    son s = <span class=\"keyword\">new</span> son();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"访问父类-super\">访问父类 super<a href=\"#访问父类-super\" title=\"访问父类 super\"></a></h2><ul><li><code>this</code>：本类对象的引用</li>\n<li><code>super</code>：父类存储空间的标识（父类对象引用）</li>\n</ul><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>关键字</th><th>访问成员变量</th><th>访问构造方法</th><th>访问成员方法</th></tr>\n</thead><tbody><tr>\n<td><code>this</code></td><td><code>this.成员方法</code> 访问本类成员变量</td><td><code>this(...)</code> 访问本类构造方法</td><td><code>this.成员方法(...)</code> 访问本类成员方法</td></tr>\n<tr>\n<td><code>super</code></td><td><code>super.成员方法</code> 访问父类成员变量</td><td><code>super(...)</code> 访问父类构造方法</td><td><code>super.成员方法(...)</code> 访问父类成员方法</td></tr>\n</tbody></table></div></div><h3 id=\"继承中构造方法的访问特点\">继承中构造方法的访问特点<a href=\"#继承中构造方法的访问特点\" title=\"继承中构造方法的访问特点\"></a></h3><p><strong>子类中所有的构造方法默认都会访问父类中无参的构造方法</strong><br>为什么呢?</p>\n<ul><li>因为子类会继承父类中的数据,可能还会使用父类的数据。所以，<strong>子类初始化之前，一定要先完成父类数据的初始化</strong></li>\n<li>每一个子类构造方法的第一条语句默认都是: <code>super()</code></li>\n</ul><p><strong>如果父类中没有无参构造方法，只有带参构造方法，该怎么办呢?</strong></p>\n<ol><li>通过使用super关键字去显示的调用父类的带参构造方法</li>\n<li>在父类中自己提供一个无参构造方法<br><strong><font color=\"red\">推荐:自己给出无参构造方法</font></strong></li>\n</ol><blockquote>\n<p>例</p>\n</blockquote>\n<p>fu.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fu</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/*    public fu() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(\"fu中无参构造方法被调用\");</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\">  </span><br><span class=\"line\">\t\t<span class=\"comment\">//带参构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">fu</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"fu中带参构造方法被调用\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>zi.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">zi</span> <span class=\"keyword\">extends</span> <span class=\"title\">fu</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"comment\">//无参构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">zi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"number\">20</span>);<span class=\"comment\">//调用父类有参构造方法</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"zi中无参构造方法被调用\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\t<span class=\"comment\">//带参构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">zi</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"number\">20</span>);<span class=\"comment\">//调用父类有参构造方法</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"zi中带参构造方法被调用\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Demo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        zi z = <span class=\"keyword\">new</span> zi();</span><br><span class=\"line\">        zi z2 = <span class=\"keyword\">new</span> zi(<span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">------------------------------------------------------------------------</span><br><span class=\"line\">fu中带参构造方法被调用</span><br><span class=\"line\">zi中无参构造方法被调用</span><br><span class=\"line\">fu中带参构造方法被调用</span><br><span class=\"line\">zi中带参构造方法被调用</span><br></pre></td></tr></table></figure><h3 id=\"继承中成员方法的访问特点\">继承中成员方法的访问特点<a href=\"#继承中成员方法的访问特点\" title=\"继承中成员方法的访问特点\"></a></h3><p><strong>通过子类对象访问一个方法</strong></p>\n<ol><li><p>子类成员范围找</p>\n</li>\n<li><p>父类成员范围找</p>\n</li>\n<li><p>如果都没有就报错(不考虑父亲的父亲..)</p>\n</li>\n</ol><blockquote>\n<p>例</p>\n</blockquote>\n<p>fu.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fu</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"fu中show方法被调用\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>zi.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">zi</span> <span class=\"keyword\">extends</span> <span class=\"title\">fu</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"zi中的method方法被调用\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.show();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"zi中的show方法被调用\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Demo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        zi z = <span class=\"keyword\">new</span> zi();</span><br><span class=\"line\">        z.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">------------------------------------------------------------------------</span><br><span class=\"line\">zi中的show方法被调用</span><br><span class=\"line\">fu中show方法被调用</span><br></pre></td></tr></table></figure><h2 id=\"方法的重写\">方法的重写<a href=\"#方法的重写\" title=\"方法的重写\"></a></h2><p><strong>子类中出现了和父类中一模一样的方法声明，重新定义父方法</strong></p>\n<p><strong><mark>父类中的私有<code>private</code> 不可以被重写</mark></strong></p>\n<p><strong><code>@Override</code></strong> </p>\n<ul><li>是一个注解(注解后面会学习到）</li>\n<li>可以帮助我们检查重写方法的方法声明的正确性</li>\n</ul><p><strong>方法重写注意事项</strong></p>\n<ul><li>私有方法不能被重写 (父类私有成员子类是不能继承的)</li>\n<li>子类方法访问权限不能更低(public&gt;默认&gt;私有)</li>\n</ul><blockquote>\n<p>例</p>\n</blockquote>\n<p>Phone.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Phone</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"给\"</span> + name + <span class=\"string\">\"打电话\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>NewPhone.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewPhone</span> <span class=\"keyword\">extends</span> <span class=\"title\">Phone</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>   <span class=\"comment\">//方法重写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"开视频\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(\"给\"+name+\"打电话\");</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.call(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>PhoneDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhoneDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建对象，调用方法</span></span><br><span class=\"line\">        Phone p = <span class=\"keyword\">new</span> Phone();</span><br><span class=\"line\">        p.call(<span class=\"string\">\"林青霞\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        NewPhone p1 = <span class=\"keyword\">new</span> NewPhone();</span><br><span class=\"line\">        p1.call(<span class=\"string\">\"林青霞\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"包package\">包package<a href=\"#包package\" title=\"包package\"></a></h1><p><strong>其实就是文件夹.</strong></p>\n<p><strong>作用:</strong>对类进行分类管理</p>\n<p><strong>包的定义格式</strong></p>\n<ul><li>格式: <code>package 包名;</code> 多级包用 <code>.</code>  分开</li>\n<li>范例: <code>package com.itheima;</code></li>\n</ul><h2 id=\"建包\">建包<a href=\"#建包\" title=\"建包\"></a></h2><blockquote>\n<p> <strong>手动建包</strong></p>\n</blockquote>\n<ol><li>按照以前的格式编译java文件    <code>javac HelloWorld.java</code></li>\n<li>手动创建包                                    在E盘建立文件夹com ，然后在com下建文件夹itheima</li>\n<li>把class文件放到包的最里面        把<code>HelloWorld.class</code>文件放到com下的itheima这个文件夹下</li>\n<li>带包执行                                        <code>java com.itheima.HelloWorld</code></li>\n</ol><blockquote>\n<p> <strong>自动建包</strong>    </p>\n</blockquote>\n<ol><li><code>javac -d . HelloWorld.java</code></li>\n<li><code>java com.itherma.HelloWorld</code></li>\n</ol><h2 id=\"导包\">导包<a href=\"#导包\" title=\"导包\"></a></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> 包名；</span><br><span class=\"line\"><span class=\"keyword\">import</span> test4.Person;</span><br></pre></td></tr></table></figure><blockquote>\n<p>例</p>\n</blockquote>\n<p>test4 中的 Person.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>test5 中的 Demo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test5;</span><br><span class=\"line\"><span class=\"keyword\">import</span> test4.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//方法一 引用其他包中的类</span></span><br><span class=\"line\">        test4.Person p = <span class=\"keyword\">new</span> test4.Person();</span><br><span class=\"line\">        <span class=\"comment\">//方法二 import test4.Person;</span></span><br><span class=\"line\">        Person p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"修饰符\">修饰符<a href=\"#修饰符\" title=\"修饰符\"></a></h1><h2 id=\"权限修饰符\">权限修饰符<a href=\"#权限修饰符\" title=\"权限修饰符\"></a></h2><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th align=\"center\">修饰符</th><th align=\"center\">同一个类中</th><th align=\"center\">同一个包中 子类、无关类</th><th align=\"center\">不同包的子类</th><th align=\"center\">不同包的无关类</th></tr>\n</thead><tbody><tr>\n<td align=\"center\">private</td><td align=\"center\">✔️</td><td align=\"center\"></td><td align=\"center\"></td><td align=\"center\"></td></tr>\n<tr>\n<td align=\"center\">默认</td><td align=\"center\">✔️</td><td align=\"center\">✔️</td><td align=\"center\"></td><td align=\"center\"></td></tr>\n<tr>\n<td align=\"center\">protected</td><td align=\"center\">✔️</td><td align=\"center\">✔️</td><td align=\"center\">✔️</td><td align=\"center\"></td></tr>\n<tr>\n<td align=\"center\">public</td><td align=\"center\">✔️</td><td align=\"center\">✔️</td><td align=\"center\">✔️</td><td align=\"center\">✔️</td></tr>\n</tbody></table></div></div><h2 id=\"状态修饰符\">状态修饰符<a href=\"#状态修饰符\" title=\"状态修饰符\"></a></h2><h3 id=\"final\">final<a href=\"#final\" title=\"final\"></a></h3><p><strong>最终</strong></p>\n<ul><li><p><strong>修饰类</strong>:表明该类是<strong>最终类</strong>，不能被继承</p>\n</li>\n<li><p><strong>修饰方法</strong>:表明该方法是最终方法，不能被重写</p>\n</li>\n<li><p><strong>修饰变量</strong>:表明该变量是常量，不能再次被赋值</p>\n</li>\n</ul><p><strong>final修饰局部变量</strong></p>\n<ul><li><strong>变量是基本类型</strong>: final修饰指的是基本类型的<strong>数据值不能发生改变</strong></li>\n<li><strong>变量是引用类型</strong>: final修饰指的是引用类型的<strong>地址值不能发生改变</strong>,但是地址里面的<strong>内容是可以发生改变的</strong></li>\n</ul><p>Student.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//final修饰类不能被继承 表示最终类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//final修饰方法不能被重写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Demo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//final修饰变量不能被更改</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> String name = <span class=\"string\">\"三上悠亚\"</span>;</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"comment\">//final修饰引用变量，s不能更改指向的地址 但s的成员可被修改</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Student s = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">        s.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">        System.out.println(s.age);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"ststic\">ststic<a href=\"#ststic\" title=\"ststic\"></a></h3><p>表示静态，修饰成员方法 成员变量</p>\n<p><strong>static修饰的特点</strong></p>\n<ul><li><strong>被类的所有对象共享</strong><br>这也是我们判断是否使用静态关键字的条件</li>\n<li><strong>可以通过类名调用</strong><br>当然，也可以通过对象名调用<br><strong><font color=\"red\">推荐使用类名调用</font></strong></li>\n</ul><p><strong>static访问特点</strong>    <strong><mark>总结成一句话就是:静态成员方法只能访问静态成员</mark></strong></p>\n<ul><li><strong>非静态的成员方法</strong><ul><li>能访问静态的成员变量</li>\n<li>能访问非静态的成员变量</li>\n<li>能访问静态的成员方法</li>\n<li>能访问非静态的成员方法</li>\n</ul></li>\n<li><strong>静态的成员方法</strong><ul><li>能访问静态的成员变量</li>\n<li>能访问静态的成员方法</li>\n</ul></li>\n</ul><p>Student.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  <span class=\"comment\">//static修饰成员变量</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String university;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">\", \"</span> + age + <span class=\"string\">\", \"</span> + university);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Demo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//类名调用static变量</span></span><br><span class=\"line\">        Student.university = <span class=\"string\">\"清华\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Student s1 = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">        s1.name = <span class=\"string\">\"初爱\"</span>;</span><br><span class=\"line\">        s1.age = <span class=\"number\">30</span>;</span><br><span class=\"line\">        <span class=\"comment\">//对象名调用static变量</span></span><br><span class=\"line\">        s1.university = <span class=\"string\">\"北大\"</span>;</span><br><span class=\"line\">        s1.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">------------------------------------------------------------------</span><br><span class=\"line\">初爱, <span class=\"number\">30</span>, 北大</span><br></pre></td></tr></table></figure><h1 id=\"多态\">多态<a href=\"#多态\" title=\"多态\"></a></h1><p>多态中成员访问特点</p>\n<ul><li><strong>成员变量</strong>: 编译看左边，执行看左边</li>\n<li><strong>成员方法</strong>: 编译看左边，执行看右边</li>\n</ul><blockquote>\n<p><strong>为什么成员变量和成员方法的访问不一样呢?</strong></p>\n</blockquote>\n<p>​    <strong><font color=\"red\">因为成员方法有重写，而成员变量没有</font></strong></p>\n<ul><li><strong>多态的好处:</strong> 提高了程序的扩展性<ul><li><strong>具体体现:</strong> 定义方法的时候，使用父类型作为参数,将来在使用的时候，使用具体的子类型参与操作</li>\n</ul></li>\n<li><strong>多态的弊端:</strong>不能使用子类的特有功能</li>\n</ul><p>Animal.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age = <span class=\"number\">40</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"动物吃东西\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>cat.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> weight = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"猫吃鱼\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">playGame</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"玩游戏\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>AnimalDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//父类引用指向子类对象</span></span><br><span class=\"line\">        Animal a = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">        System.out.println(a.age); <span class=\"comment\">//40</span></span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"comment\">//Animal类中没有weight成员变量</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(a.weight);</span></span><br><span class=\"line\">      </span><br><span class=\"line\">        a.eat();\t<span class=\"comment\">//猫吃鱼</span></span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"comment\">//Animal类中没有playGame成员方法</span></span><br><span class=\"line\"><span class=\"comment\">//        a.playGame();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">----------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"number\">40</span></span><br><span class=\"line\">猫吃鱼</span><br></pre></td></tr></table></figure><h2 id=\"多态的转型\">多态的转型<a href=\"#多态的转型\" title=\"多态的转型\"></a></h2><ul><li><strong>向上转型</strong><ul><li>从子到父</li>\n<li>父类引用<strong>指向</strong>子类对象</li>\n</ul></li>\n<li><strong>向下转型</strong><ul><li>从父到子</li>\n<li>父类引用<strong>转为</strong>子类对象</li>\n</ul></li>\n</ul><p>Animal.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age = <span class=\"number\">40</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"动物吃东西\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Cat.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> weight = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"猫吃鱼\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">playGame</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"玩游戏\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>AnimalDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//父类引用指向子类对象</span></span><br><span class=\"line\">        Animal a = <span class=\"keyword\">new</span> Cat();   <span class=\"comment\">//向上转型</span></span><br><span class=\"line\">        a.eat();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//向下转型</span></span><br><span class=\"line\">        Cat c = (Cat) a;</span><br><span class=\"line\">        c.eat();</span><br><span class=\"line\">        c.playGame();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"抽象类abstract\">抽象类abstract<a href=\"#抽象类abstract\" title=\"抽象类abstract\"></a></h2><p>在Java中，一个没有方法体的方法应该定义为<strong>抽象方法</strong>，而<strong><font color=\"red\">类中如果有抽象方法,该类必须定义为抽象类</font></strong></p>\n<blockquote>\n<p><strong>抽象类的特点</strong></p>\n</blockquote>\n<ol><li>抽象类和抽象方法必须使用<code>abstract</code>关键字修饰</li>\n</ol><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> 类名</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure><ol><li><p>抽象类中不一定有抽象方法,<strong>有抽象方法的类一定是抽象类</strong></p>\n</li>\n<li><p><strong>抽象类不能实例化</strong></p>\n<p>抽象类如何实例化呢?参照多态的方式，通过子类对象实例化，这叫<strong>抽象多态</strong></p>\n</li>\n<li><p>抽象类的子类</p>\n<p>要么重写抽象类中的所有抽象方法</p>\n<p>要么是抽象类</p>\n</li>\n</ol><blockquote>\n<p><strong>抽象类的成员特点</strong></p>\n</blockquote>\n<ul><li><strong>成员变量</strong><ul><li>可以是变量</li>\n<li>也可以是常量</li>\n</ul></li>\n<li><strong>构造方法</strong><ul><li>有构造方法，但是不能实例化</li>\n<li>那么，构造方法的作用是什么呢? <strong>用于子类访问父类数据的初始化</strong></li>\n</ul></li>\n<li><strong>成员方法</strong><ul><li><strong>可以有抽象方法</strong>: 限定子类必须完成某些动作</li>\n<li><strong>也可以有非抽象方法</strong>: 提高代码复用性</li>\n</ul></li>\n</ul><p>Animal.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义抽象方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"睡觉\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Cat.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//抽象类的子类,要么重写抽象类中的所有抽象方法,要么是抽象类public abstract class Cat extends Animal</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"猫吃鱼\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>AnimalDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Animal a = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">        a.eat();</span><br><span class=\"line\">        a.sleep();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"接口\">接口<a href=\"#接口\" title=\"接口\"></a></h1><p><strong>接口的特点</strong></p>\n<ul><li><p>接口用关键字interface修饰</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> 接口名</span>&#123;&#125;</span><br><span class=\"line\">----------------------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Jumpping</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">jump</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>类实现接口用implements表示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> 类名 <span class=\"keyword\">implements</span> 接口名</span>&#123;&#125;</span><br><span class=\"line\">----------------------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">implements</span> <span class=\"title\">Jumpping</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">jump</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"猫可以跳高了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>接口不能实例化</p>\n<p>接口如何实例化呢?参照多态的方式，通过实现类对象实例化，这叫<strong>接口多态</strong>。<br>多态的形式:<strong>具体类多态,<font color=\"red\">抽象类多态,接口多态</font></strong>。<br>多态的前提:有继承或者实现关系;有方法重写;有父 (类/接口) 引用指向 (子实现) 类对象</p>\n</li>\n<li><p>接口的实现类<br>要么重写接口中的所有抽象方法<br>要么是抽象类</p>\n</li>\n</ul><p><strong>接口的成员特点</strong></p>\n<ul><li>成员变量<ul><li><strong>只能是常量</strong></li>\n<li>默认修饰符: <code>public static final</code></li>\n</ul></li>\n<li>构造方法<ul><li><strong>接口没有构造方法</strong>，因为接口主要是对行为进行抽象的,是没有具体存在</li>\n<li>一个类如果没有父类，<strong><font color=\"red\">默认继承自Object类</font></strong></li>\n</ul></li>\n<li>成员方法<ul><li><strong>只能是抽象方法</strong></li>\n<li>默认修饰符: <code>public abstract</code></li>\n<li>关于接口中的方法，JDK8和JDK9中有一些新特性，后面再讲解</li>\n</ul></li>\n</ul><p>Interface.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Interface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成员变量默认带了 public static final</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num3 = <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> num2 = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接口没有构造方法</span></span><br><span class=\"line\">    <span class=\"comment\">// public Interface()&#123;&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接口里面没有成员方法</span></span><br><span class=\"line\">    <span class=\"comment\">// public void show()&#123;&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接口可以有抽象方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接口中的方法默认带了 public abstract 所以可以不写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>InterImple.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterImple</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"method\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"show\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>InterDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Interface i = <span class=\"keyword\">new</span> InterImple();</span><br><span class=\"line\">        <span class=\"comment\">// 接口的成员变量默认被public static final修饰 不能赋值</span></span><br><span class=\"line\">        <span class=\"comment\">// i.num=10;</span></span><br><span class=\"line\">        <span class=\"comment\">// i.num3 = 40;</span></span><br><span class=\"line\">        System.out.println(i.num);</span><br><span class=\"line\">        System.out.println(i.num2);</span><br><span class=\"line\">        System.out.println(Interface.num);</span><br><span class=\"line\">        System.out.println(i.num3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">----------------------------------------------------------------</span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">30</span></span><br></pre></td></tr></table></figure><h2 id=\"猫和狗（接口类）\">猫和狗（接口类）<a href=\"#猫和狗（接口类）\" title=\"猫和狗（接口类）\"></a></h2><p>Jumpping.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Jumpping</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">jump</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Animal.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Animal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Animal</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Cat.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> <span class=\"keyword\">implements</span> <span class=\"title\">Jumpping</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name, age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"猫吃鱼\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">jump</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"猫跳高\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>AnimalDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建对象 调用方法</span></span><br><span class=\"line\">        Jumpping j = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">        j.eat(); <span class=\"comment\">//接口中没有eat方法，所以不能调用</span></span><br><span class=\"line\">        j.jump();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"-------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Animal a = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">        a.setName(<span class=\"string\">\"加菲\"</span>);</span><br><span class=\"line\">        a.setAge(<span class=\"number\">10</span>);</span><br><span class=\"line\">        System.out.println(a.getName()+<span class=\"string\">\", \"</span>+a.getAge());</span><br><span class=\"line\">        a.eat();</span><br><span class=\"line\">        a.jump();<span class=\"comment\">//父类中没有jump方法，所以不能调用</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"-------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Cat c =<span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">        c.setName(<span class=\"string\">\"加菲\"</span>);</span><br><span class=\"line\">        c.setAge(<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(c.getName()+<span class=\"string\">\", \"</span>+c.getAge());</span><br><span class=\"line\">        c.eat();</span><br><span class=\"line\">        c.jump();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"类和接口的关系\">类和接口的关系<a href=\"#类和接口的关系\" title=\"类和接口的关系\"></a></h2><ul><li>类和类的关系<ul><li>继承关系，只能<strong>单继承</strong>，但是可以<strong>多层继承</strong></li>\n</ul></li>\n<li>类和接口的关系<ul><li>实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</li>\n</ul></li>\n<li>接口和接口的关系<ul><li>继承关系，可以单继承,也可以多继承</li>\n</ul></li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Inter2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Inter1</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">Object</span> <span class=\"keyword\">implements</span> <span class=\"title\">Inter1</span>,<span class=\"title\">Inter2</span>,<span class=\"title\">Inter3</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id=\"抽象类和接口的区别\">抽象类和接口的区别<a href=\"#抽象类和接口的区别\" title=\"抽象类和接口的区别\"></a></h2><ul><li><p>成员区别</p>\n<ul><li>抽象类 ：变量,常量;有构造方法;有抽象方法,也有非抽象方法</li>\n<li>接口：常量;抽象方法</li>\n</ul></li>\n<li><p>关系区别</p>\n<ul><li>类与类：继承，单继承</li>\n<li>类与接口：实现，可以单实现，也可以多实现</li>\n<li>接口与接口：继承，单继承，多继承</li>\n</ul></li>\n<li><p>设计理念区别</p>\n<ul><li>抽象类：对类抽象，包括属性、行为</li>\n<li>接口： 对行为抽象，主要是行为</li>\n</ul></li>\n</ul><p><strong><mark>抽象类是对事物的抽象,而接口是对行为的抽象</mark></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Alram</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">alarm</span><span class=\"params\">()</span></span>;<span class=\"comment\">//报警功能</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Door</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlarmDoor</span> <span class=\"keyword\">extends</span> <span class=\"title\">Door</span> <span class=\"keyword\">implements</span> <span class=\"title\">Alram</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">alarm</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"形参和返回值\">形参和返回值<a href=\"#形参和返回值\" title=\"形参和返回值\"></a></h1><h2 id=\"类名作为形参和返回值\">类名作为形参和返回值<a href=\"#类名作为形参和返回值\" title=\"类名作为形参和返回值\"></a></h2><ul><li>方法的形参是类名，其实需要的是该类的对象</li>\n<li>方法的返回值是类名， 其实返回的是该类的对象</li>\n</ul><p>Cat.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"猫吃鱼\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>CatOperator.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CatOperator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">useCat</span><span class=\"params\">(Cat c)</span> </span>&#123;</span><br><span class=\"line\">        c.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Cat <span class=\"title\">getCat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Cat c = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>CatDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CatDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        CatOperator co = <span class=\"keyword\">new</span> CatOperator();</span><br><span class=\"line\">        Cat c = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">        co.useCat(c);</span><br><span class=\"line\"></span><br><span class=\"line\">        Cat c2 = co.getCat();</span><br><span class=\"line\">        c2.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"抽象类名作为形参和返回值\">抽象类名作为形参和返回值<a href=\"#抽象类名作为形参和返回值\" title=\"抽象类名作为形参和返回值\"></a></h2><ul><li>方法的形参是抽象类名，其实需要的是该抽象类的子类对象</li>\n<li>方法的返回值是抽象类名,实返回的是该抽象类的子类对象</li>\n</ul><p>Animal.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Cat.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"猫吃鱼\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>AnimalOperator.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalOperator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">useAnimal</span><span class=\"params\">(Animal a)</span> </span>&#123;<span class=\"comment\">//new Cat();</span></span><br><span class=\"line\">        a.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Animal <span class=\"title\">getAnimal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Animal a = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>AnimalDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnimalOperator ao = <span class=\"keyword\">new</span> AnimalOperator();</span><br><span class=\"line\">        Animal a = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">        ao.useAnimal(a);</span><br><span class=\"line\"></span><br><span class=\"line\">        Animal a2 = ao.getAnimal();<span class=\"comment\">// Animal a2 = new Cat();</span></span><br><span class=\"line\">        a2.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"接口名作为形参和返回值\">接口名作为形参和返回值<a href=\"#接口名作为形参和返回值\" title=\"接口名作为形参和返回值\"></a></h2><ul><li>方法的形参是接口名,其实需要的是该接口的实现类对象</li>\n<li>方法的返回值是接口名，其实返回的是该接口的实现类对象</li>\n</ul><p>Jumpping.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Jumpping</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">jump</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Cat.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">implements</span> <span class=\"title\">Jumpping</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">jump</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"猫可以跳高\"</span>);</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>JumppingOpetator.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JumppingOpetator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">useJumpping</span><span class=\"params\">(Jumpping j)</span></span>&#123;<span class=\"comment\">//new Cat();</span></span><br><span class=\"line\">        j.jump();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Jumpping <span class=\"title\">getJumpping</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Jumpping j = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>JumppingDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JumppingDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JumppingOpetator jo = <span class=\"keyword\">new</span> JumppingOpetator();</span><br><span class=\"line\">        Jumpping j = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">        jo.useJumpping(j);</span><br><span class=\"line\"></span><br><span class=\"line\">        Jumpping j2 = jo.getJumpping();<span class=\"comment\">//new Cat();</span></span><br><span class=\"line\">        j2.jump();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"内部类\">内部类<a href=\"#内部类\" title=\"内部类\"></a></h1><p>就是在一个类中定义一个类。举例:在一个类A的内部定义一个类B类就被称为<strong>内部类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> 类名</span>&#123;</span><br><span class=\"line\">    修饰符 <span class=\"class\"><span class=\"keyword\">class</span> 类名</span>&#123;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span></span>&#123; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong>内部类的访问特点</strong></p>\n<ul><li>内部类可以直接访问外部类的成员，包括私有</li>\n<li>外部类要访问内部类的成员，必须创建对象</li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Inner i = <span class=\"keyword\">new</span> Inner();</span><br><span class=\"line\">        i.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"成员内部类\">成员内部类<a href=\"#成员内部类\" title=\"成员内部类\"></a></h2><p>按照内部类在类中定义的位置不同，可以分为如下两种形式</p>\n<ul><li>在类的成员位置: <strong>成员内部类</strong></li>\n<li>在类的局部位置: <strong>局部内部类</strong></li>\n</ul><blockquote>\n<p>成员内部类，外界如何创建对象使用呢?</p>\n</blockquote>\n<ul><li>格式:  外部类名.内部类名 对象名 = 外部类对象.内部类对象;</li>\n<li>范例: <code>Oyter.Inner oi = new Outer().new Inner();</code></li>\n</ul><p>Outer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner1</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Outer.Inner1 i = <span class=\"keyword\">new</span> Outer().<span class=\"keyword\">new</span> Inner1();</span><br><span class=\"line\">        i.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>InnerOuter.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Outer.Inner oi = <span class=\"keyword\">new</span> Outer().<span class=\"keyword\">new</span> Inner();</span><br><span class=\"line\">        oi.show();</span><br><span class=\"line\">        Outer o = <span class=\"keyword\">new</span> Outer();</span><br><span class=\"line\">        o.method();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"局部内部类\">局部内部类<a href=\"#局部内部类\" title=\"局部内部类\"></a></h2><p>局部内部类是在<strong>方法中定义的类</strong>，所以外界是无法直接使用，需要在方法内部创建对象并使用</p>\n<p>该类可以直接访问外部类的成员，也可以访问方法内的局部变量</p>\n<p>Outer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> num2 = <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(num);</span><br><span class=\"line\">                System.out.println(num2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Inner i = <span class=\"keyword\">new</span> Inner();</span><br><span class=\"line\">        i.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>InnerDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Outer o = <span class=\"keyword\">new</span> Outer();</span><br><span class=\"line\">        o.method();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"匿名内部类\">匿名内部类<a href=\"#匿名内部类\" title=\"匿名内部类\"></a></h3><p><strong>是局部内部类的一种</strong></p>\n<p>前提：存在一个类或接口，这里的类可以是具体类也可以是抽象类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> 类名或接口名()&#123;</span><br><span class=\"line\">\t重新方法;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">---------------------------------</span><br><span class=\"line\"><span class=\"keyword\">new</span> Inter()&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p><mark>本质：是一个继承了该类或实现了该接口的子类匿名对象</mark></p>\n<p>Outer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建匿名内部类</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * new Inner()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">         * </span></span><br><span class=\"line\"><span class=\"comment\">         * @Override</span></span><br><span class=\"line\"><span class=\"comment\">         * public void show() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">         * System.out.println(\"匿名内部类\");</span></span><br><span class=\"line\"><span class=\"comment\">         * &#125;</span></span><br><span class=\"line\"><span class=\"comment\">         * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用匿名内部类的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Inner() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"匿名内部类\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.show();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 多次调用匿名内部类</span></span><br><span class=\"line\">        Inner i = <span class=\"keyword\">new</span> Inner() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"匿名内部类\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        i.show();<span class=\"comment\">// 可多次调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Inner.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>InnerDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Outer o = <span class=\"keyword\">new</span> Outer();</span><br><span class=\"line\">        o.method();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"工具类\">工具类<a href=\"#工具类\" title=\"工具类\"></a></h1><p>工具类的设计思想:</p>\n<ul><li>构造方法用private修饰，（即不可构建实例对象）</li>\n<li>成员用public static修饰，（为了直接调用）</li>\n</ul><h2 id=\"math\">Math<a href=\"#math\" title=\"Math\"></a></h2><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>方法名</th><th>说明</th></tr>\n</thead><tbody><tr>\n<td>public static int abs(int a)</td><td>返回参数的绝对值</td></tr>\n<tr>\n<td>public static double ceil(double a)</td><td>返回大于或等于参数的最小double值，等于一个整数</td></tr>\n<tr>\n<td>public static double floor(double a)</td><td>返回小于或等于参数的最大double值，等于一个整数</td></tr>\n<tr>\n<td>public static int round(float a)</td><td>按照四舍五入返回最接近参数的int</td></tr>\n<tr>\n<td>public static int max(int a,int b)</td><td>返回两个int值中的较大值</td></tr>\n<tr>\n<td>public static int min(int a,int b)</td><td>返回两个int值中的较小值</td></tr>\n<tr>\n<td>public static double pow(double a,double b)</td><td>返回a的b次幂的值</td></tr>\n<tr>\n<td>public static double random()</td><td>返回值为double的正值，[0.0 , 1.0)</td></tr>\n</tbody></table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MathDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Math.abs(-<span class=\"number\">88</span>)); <span class=\"comment\">// 88</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Math.ceil(<span class=\"number\">12.34</span>));<span class=\"comment\">// 13.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Math.floor(<span class=\"number\">12.34</span>));<span class=\"comment\">// 12.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Math.round(<span class=\"number\">12.34F</span>));<span class=\"comment\">// 12</span></span><br><span class=\"line\">        System.out.println(Math.round(<span class=\"number\">12.54</span>));<span class=\"comment\">// 13</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Math.max(<span class=\"number\">66</span>, <span class=\"number\">88</span>));<span class=\"comment\">// 88</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Math.pow(<span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>));<span class=\"comment\">// 8.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Math.random());<span class=\"comment\">// 0.0到1.0的随机数 取不到1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"system\">System<a href=\"#system\" title=\"System\"></a></h2><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>方法名</th><th>说明</th></tr>\n</thead><tbody><tr>\n<td>public static void exit(int status)</td><td>终止当前运行的Java虚拟机，非零表示异常终止</td></tr>\n<tr>\n<td>public static long currentTimeMillis()</td><td>返回当前时间(以毫秒为单位)</td></tr>\n</tbody></table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MathDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"共耗时：\"</span> + (end - start) + <span class=\"string\">\"毫秒\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"arrays\">Arrays<a href=\"#arrays\" title=\"Arrays\"></a></h2><p>Array类包含用于操作数组的各种方法</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>方法名</th><th>说明</th></tr>\n</thead><tbody><tr>\n<td>public static String toString(int[] a)</td><td>返回指定数组的内容的字符串表示形式 例<code>[I@76ccd017</code></td></tr>\n<tr>\n<td>public static void sort(int[] a)</td><td>按照数字顺序排列指定的数组</td></tr>\n</tbody></table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个数组</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">24</span>, <span class=\"number\">69</span>, <span class=\"number\">80</span>, <span class=\"number\">57</span> &#125;;</span><br><span class=\"line\">  Arrays.sort(arr);</span><br><span class=\"line\">  System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">[<span class=\"number\">24</span>, <span class=\"number\">57</span>, <span class=\"number\">69</span>, <span class=\"number\">80</span>]</span><br></pre></td></tr></table></figure><h3 id=\"冒泡排序\">冒泡排序<a href=\"#冒泡排序\" title=\"冒泡排序\"></a></h3><p>冒泡排序（Bubble Sort），顾名思义，就是指越小的元素会经由交换慢慢“浮”到数列的顶端。</p>\n<p><strong>算法原理</strong></p>\n<ol><li>从左到右，依次比较相邻的元素大小，更大的元素交换到右边；</li>\n<li>从第一组相邻元素比较到最后一组相邻元素，这一步结束最后一个元素必然是参与比较的元素中最大的元素；</li>\n<li>按照大的居右原则，重新从左到后比较，前一轮中得到的最后一个元素不参与比较，得出新一轮的最大元素；</li>\n<li>按照上述规则，每一轮结束会减少一个元素参与比较，直到没有任何一组元素需要比较。</li>\n</ol><p><strong>动图演示</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/202201182328075.gif\" class=\"φcy\" alt=\"bubble-sort\"></p>\n<p><strong>代码实现</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArryDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定义一个数组</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">24</span>, <span class=\"number\">69</span>, <span class=\"number\">80</span>, <span class=\"number\">57</span> &#125;;</span><br><span class=\"line\">        bubble_sort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[])</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; arr.length - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">                    temp = arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong>算法分析</strong></p>\n<p>冒泡排序属于<strong>交换排序</strong>，是<strong>稳定排序</strong>，平均时间复杂度为 O(n²)，空间复杂度为 O(1)。</p>\n<p>但是我们常看到冒泡排序的<strong>最优时间复杂度是 O(n)</strong>，那要如何优化呢？</p>\n<p>我们可以用一个 flag 参数记录新一轮的排序中元素是否做过交换，如果没有，说明前面参与比较过的元素已经是正序，那就没必要再从头比较了。代码实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j, flag;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; arr.length - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">                temp = arr[j];</span><br><span class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"object\">Object<a href=\"#object\" title=\"Object\"></a></h1><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>方法名</th><th>说明</th></tr>\n</thead><tbody><tr>\n<td>public String toString()</td><td>返回对象的字符串表示形式。建议所有子类重写该方法，自动生成</td></tr>\n<tr>\n<td>public boolean equals(Object obj)</td><td>比较对象是否相等。默认比较地址，重写可以比较内容，自动生成</td></tr>\n</tbody></table></div></div><blockquote>\n<p>VS CODE</p>\n</blockquote>\n<p>右键—源代码操作—Generate toString()</p>\n<p>右键—源代码操作—Generate equals()</p>\n<blockquote>\n<p>IDEA</p>\n</blockquote>\n<p>右键—生成—toString()</p>\n<p>右键—生成—equals()</p>\n<h2 id=\"tostring方法\">toString()方法<a href=\"#tostring方法\" title=\"toString()方法\"></a></h2><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/java/202201181718735.png\" alt=\"QQ20220118-170444@2x\" style=\"zoom: 50%;\" /><p>Student.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重写父类Object的toString方法 返回Student的内容</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Student [age=\"</span> + age + <span class=\"string\">\", name=\"</span> + name + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Object.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Student s = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"踹\"</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">        System.out.println(s);<span class=\"comment\">// test3.Student@182decdb</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// println源代码 输出的是地址</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * public void println(Object x) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">           * String s = String.valueOf(x);</span></span><br><span class=\"line\"><span class=\"comment\">           * synchronized (this) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">           * print(s);</span></span><br><span class=\"line\"><span class=\"comment\">           * newLine();</span></span><br><span class=\"line\"><span class=\"comment\">           * &#125;</span></span><br><span class=\"line\"><span class=\"comment\">         * &#125;</span></span><br><span class=\"line\"><span class=\"comment\">         </span></span><br><span class=\"line\"><span class=\"comment\">         * public static String valueOf(Object obj) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">         * \t\treturn (obj == null) ? \"null\" : obj.toString();\t</span></span><br><span class=\"line\"><span class=\"comment\">         * &#125;</span></span><br><span class=\"line\"><span class=\"comment\">         </span></span><br><span class=\"line\"><span class=\"comment\">         //toString源码</span></span><br><span class=\"line\"><span class=\"comment\">         * public String toString() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">         * \t\treturn getClass().getName() + \"@\" + Integer.toHexString(hashCode());</span></span><br><span class=\"line\"><span class=\"comment\">         * &#125;</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(s.toString());<span class=\"comment\">// 重写toString()方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-------------------------------</span><br><span class=\"line\">Student [age=<span class=\"number\">22</span>, name=踹]</span><br></pre></td></tr></table></figure><h2 id=\"equals方法\">equals()方法<a href=\"#equals方法\" title=\"equals()方法\"></a></h2><p>Student.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重写父类Object的toString方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Student [age=\"</span> + age + <span class=\"string\">\", name=\"</span> + name + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        this --- s1</span></span><br><span class=\"line\"><span class=\"comment\">         obj --- s2</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"comment\">//比较地址是否相同</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == obj)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//判断参数是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否是同一个类</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getClass() != obj.getClass())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//多态向下转型</span></span><br><span class=\"line\">        Student other = (Student) obj;</span><br><span class=\"line\">        <span class=\"comment\">//比较年龄是否相同</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (age != other.age)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">//比较name是否相同</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (other.name != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!name.equals(other.name))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>ObjectDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Student s1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"踹\"</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">        Student s2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"踹\"</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">        System.out.println(s1.equals(s2));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*父类Object实现 比较的是地址</span></span><br><span class=\"line\"><span class=\"comment\">         * public boolean equals(Object obj) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">         *      return (this == obj);</span></span><br><span class=\"line\"><span class=\"comment\">         * &#125;</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\">ture</span><br></pre></td></tr></table></figure><h1 id=\"基本类型的包装类\">基本类型的包装类<a href=\"#基本类型的包装类\" title=\"基本类型的包装类\"></a></h1><p><strong>将基本数据类型封装成对象</strong>的好处在于可以在对象中定义更多的功能方法操作该数据</p>\n<p>常用的操作之一: 用于基本数据类型与字符串之间的转换</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th align=\"center\">基本数据类型</th><th align=\"center\">包装类</th></tr>\n</thead><tbody><tr>\n<td align=\"center\">byte</td><td align=\"center\">Byte</td></tr>\n<tr>\n<td align=\"center\">short</td><td align=\"center\">Short</td></tr>\n<tr>\n<td align=\"center\">int</td><td align=\"center\">Integer</td></tr>\n<tr>\n<td align=\"center\">long</td><td align=\"center\">Long</td></tr>\n<tr>\n<td align=\"center\">float</td><td align=\"center\">Float</td></tr>\n<tr>\n<td align=\"center\">double</td><td align=\"center\">Double</td></tr>\n<tr>\n<td align=\"center\">char</td><td align=\"center\">Character</td></tr>\n<tr>\n<td align=\"center\">boolean</td><td align=\"center\">Boolean</td></tr>\n</tbody></table></div></div><h2 id=\"integer\">Integer<a href=\"#integer\" title=\"Integer\"></a></h2><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>方法名</th><th>说明</th></tr>\n</thead><tbody><tr>\n<td><del>public Integer(int value)</del></td><td>根据int值创建Integer对象<font color=\"red\"><strong>(过时)</strong></font></td></tr>\n<tr>\n<td><del>public Integer(String s)</del></td><td>根据String值创建Integer对象<strong><font color=\"red\">(过时)</font></strong></td></tr>\n<tr>\n<td>public static Integer valueOf(int i)</td><td>返回表示指定的int值的Integer实例</td></tr>\n<tr>\n<td>public static Integer valueOf(String s)</td><td>返回一个保存指定值的Integer对象String</td></tr>\n</tbody></table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArryDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Integer i1 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(i1);</span><br><span class=\"line\"></span><br><span class=\"line\">        Integer i2 = <span class=\"keyword\">new</span> Integer(<span class=\"string\">\"2030\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 字符串必须是数字类字符串</span></span><br><span class=\"line\">        <span class=\"comment\">// Integer i3 = new Integer(\"abcc\");</span></span><br><span class=\"line\">        System.out.println(i2);</span><br><span class=\"line\"></span><br><span class=\"line\">        Integer i3 = Integer.valueOf(<span class=\"number\">199</span>);</span><br><span class=\"line\">        System.out.println(i3);</span><br><span class=\"line\"></span><br><span class=\"line\">        Integer i4 = Integer.valueOf(<span class=\"string\">\"2020\"</span>);</span><br><span class=\"line\">        System.out.println(i4);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">------------------------------------------------------</span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">2030</span></span><br><span class=\"line\"><span class=\"number\">199</span></span><br><span class=\"line\"><span class=\"number\">2020</span></span><br></pre></td></tr></table></figure><h2 id=\"int-和-string-类型相互转换\">int 和 String 类型相互转换<a href=\"#int-和-string-类型相互转换\" title=\"int 和 String 类型相互转换\"></a></h2><p>基本类型包装类的最常见操作就是:用于<strong>基本类型和字符串之间的相互转换</strong></p>\n<ol><li><p><strong>int转换为String</strong></p>\n<p><code>public static String valueOf(int i)</code>:返回int参数的字符串表示形式。该访法是String类中的方法</p>\n</li>\n<li><p><strong>String转换为int</strong></p>\n<p><code>public static int parselnt(String s)</code>:将字符串解析为int类型。该访法是Integer类中的方法</p>\n</li>\n</ol><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArryDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// int转String</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> number = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 方法1</span></span><br><span class=\"line\">        String s1 = <span class=\"string\">\"\"</span> + number;</span><br><span class=\"line\">        System.out.println(s1);</span><br><span class=\"line\">        <span class=\"comment\">// 方法2</span></span><br><span class=\"line\">        String s2 = String.valueOf(number);</span><br><span class=\"line\">        System.out.println(s2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"--------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// String转int</span></span><br><span class=\"line\">        String s = <span class=\"string\">\"100\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 方法1</span></span><br><span class=\"line\">        <span class=\"comment\">// String --- Integer --- int</span></span><br><span class=\"line\">        Integer i = Integer.valueOf(s);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = i.intValue();</span><br><span class=\"line\">        System.out.println(x);</span><br><span class=\"line\">        <span class=\"comment\">// 方法2</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = Integer.parseInt(s);</span><br><span class=\"line\">        System.out.println(y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">------------------------------------------------------</span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\">--------</span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">100</span></span><br></pre></td></tr></table></figure><h1 id=\"占位符\">占位符<a href=\"#占位符\" title=\"占位符\"></a></h1>","prev":{"title":"JavaWeb","link":"posts/99720b1c"},"next":{"title":"python考试","link":"posts/aabdde41"},"plink":"https://dxsummer.gitee.io/posts/df2849ec/","toc":[{"id":"理解面向对象","title":"理解面向对象","index":"1","children":[{"id":"jdk","title":"JDK","index":"1.1","children":[{"id":"jdk安装目录","title":"JDK安装目录","index":"1.1.1"}]},{"id":"命令行","title":"命令行","index":"1.2","children":[{"id":"win-cmd命令","title":"WIN cmd命令","index":"1.2.1"},{"id":"mac-命令行","title":"mac 命令行","index":"1.2.2"}]},{"id":"编译","title":"编译","index":"1.3","children":[{"id":"javac","title":"javac","index":"1.3.1"},{"id":"java","title":"java","index":"1.3.2"},{"id":"根据classpath环境变量定位类","title":"根据CLASSPATH环境变量定位类","index":"1.3.3"},{"id":"源文件命名规则","title":"源文件命名规则","index":"1.3.4"}]},{"id":"交互式工具-jshell","title":"交互式工具 jshell","index":"1.4"},{"id":"程序优化","title":"程序优化","index":"1.5","children":[{"id":"java11改进的垃圾回收器","title":"Java11改进的垃圾回收器","index":"1.5.1"}]},{"id":"基本结构-基本特征","title":"基本结构-基本特征","index":"1.6"},{"id":"main方法","title":"main方法","index":"1.7"}]},{"id":"数据类型和运算符","title":"数据类型和运算符","index":"2","children":[{"id":"注释","title":"注释","index":"2.1","children":[{"id":"文档注释","title":"文档注释","index":"2.1.1"}]},{"id":"关键字-标识符","title":"关键字-标识符","index":"2.2"},{"id":"命名法","title":"命名法","index":"2.3","children":[{"id":"java总体命名规范","title":"Java总体命名规范","index":"2.3.1"},{"id":"java包名命名规范","title":"Java包名命名规范","index":"2.3.2","children":[{"id":"常规包名","title":"常规包名","index":"2.3.2.1"},{"id":"自定义包名","title":"自定义包名","index":"2.3.2.2"}]}]},{"id":"数据类型","title":"数据类型","index":"2.4","children":[{"id":"基本类型","title":"基本类型","index":"2.4.1","children":[{"id":"整型","title":"整型","index":"2.4.1.1"},{"id":"字符型","title":"字符型","index":"2.4.1.2"},{"id":"浮点型","title":"浮点型","index":"2.4.1.3"},{"id":"布尔型","title":"布尔型","index":"2.4.1.4"},{"id":"使用var定义变量","title":"使用var定义变量","index":"2.4.1.5"}]},{"id":"引用类型","title":"引用类型","index":"2.4.2","children":[{"id":"空类型","title":"空类型","index":"2.4.2.1"},{"id":"string","title":"String","index":"2.4.2.2"},{"id":"数组","title":"数组","index":"2.4.2.3"}]},{"id":"基本类型的类型转换","title":"基本类型的类型转换","index":"2.4.3","children":[{"id":"自动类型转化","title":"自动类型转化","index":"2.4.3.1"},{"id":"强制类型转换","title":"强制类型转换","index":"2.4.3.2"}]},{"id":"表达式类型的自动提升","title":"表达式类型的自动提升","index":"2.4.4"}]},{"id":"运算符","title":"运算符","index":"2.5","children":[{"id":"","title":"&#x2F;","index":"2.5.1"},{"id":"-1","title":"%","index":"2.5.2"},{"id":"位运算符","title":"位运算符","index":"2.5.3"},{"id":"扩展后的赋值运算符","title":"扩展后的赋值运算符","index":"2.5.4"},{"id":"比较运算符","title":"比较运算符","index":"2.5.5"},{"id":"逻辑运算符","title":"逻辑运算符","index":"2.5.6"},{"id":"三目运算符","title":"三目运算符","index":"2.5.7"}]},{"id":"idea","title":"idea","index":"2.6"}]},{"id":"流程控制与数组","title":"流程控制与数组","index":"3","children":[{"id":"顺序控制","title":"顺序控制","index":"3.1"},{"id":"if","title":"if","index":"3.2"},{"id":"switch","title":"switch","index":"3.3"},{"id":"while---do-while","title":"while - do while","index":"3.4"},{"id":"for","title":"for","index":"3.5"},{"id":"break---continue","title":"break - continue","index":"3.6"},{"id":"数组-1","title":"数组","index":"3.7","children":[{"id":"初始化","title":"初始化","index":"3.7.1"},{"id":"获取数组长度","title":"获取数组长度","index":"3.7.2"},{"id":"foreach循环","title":"foreach循环","index":"3.7.3"},{"id":"多维数组","title":"多维数组","index":"3.7.4"},{"id":"操作数组的工具类：arrays","title":"操作数组的工具类：Arrays","index":"3.7.5"},{"id":"原理","title":"原理","index":"3.7.6"},{"id":"应用举例","title":"应用举例","index":"3.7.7"}]}]},{"id":"面向对象","title":"面向对象","index":"4","children":[{"id":"类-class","title":"类 class","index":"4.1","children":[{"id":"变量","title":"变量","index":"4.1.1","children":[{"id":"成员变量","title":"成员变量","index":"4.1.1.1"},{"id":"局部变量","title":"局部变量","index":"4.1.1.2"}]},{"id":"方法","title":"方法","index":"4.1.2","children":[{"id":"方法重载","title":"方法重载","index":"4.1.2.1"},{"id":"构造方法构造器","title":"构造方法(构造器)","index":"4.1.2.2"}]},{"id":"构造器","title":"构造器","index":"4.1.3"},{"id":"对象","title":"对象","index":"4.1.4"}]},{"id":"封装-private","title":"封装 private","index":"4.2","children":[{"id":"this","title":"this","index":"4.2.1"}]},{"id":"api","title":"API","index":"4.3","children":[{"id":"dash-for-mac","title":"Dash for Mac","index":"4.3.1"}]},{"id":"数据输入","title":"数据输入","index":"4.4","children":[{"id":"next-与-nextline-区别","title":"next() 与 nextLine() 区别","index":"4.4.1"}]},{"id":"输出","title":"输出","index":"4.5"},{"id":"random随机数","title":"Random随机数","index":"4.6"}]},{"id":"字符串","title":"字符串","index":"5","children":[{"id":"string-1","title":"String","index":"5.1","children":[{"id":"string构造方法","title":"String构造方法","index":"5.1.1"},{"id":"比较字符串","title":"比较字符串","index":"5.1.2"},{"id":"遍历字符串","title":"遍历字符串","index":"5.1.3","children":[{"id":"统计字符出现次数","title":"统计字符出现次数","index":"5.1.3.1"}]},{"id":"字符串拼接","title":"字符串拼接","index":"5.1.4","children":[{"id":"翻转拼接","title":"翻转拼接","index":"5.1.4.1"}]}]},{"id":"stringbuilder","title":"StringBuilder","index":"5.2","children":[{"id":"stringbuilder构造方法","title":"StringBuilder构造方法","index":"5.2.1"},{"id":"stringbuilder的添加和反转方法","title":"StringBuilder的添加和反转方法","index":"5.2.2","children":[{"id":"链式编程","title":"链式编程","index":"5.2.2.1"}]},{"id":"stringbuilder和string转化","title":"StringBuilder和String转化","index":"5.2.3"},{"id":"字符串拼接【升级版】","title":"字符串拼接【升级版】","index":"5.2.4","children":[{"id":"翻转【升级版】","title":"翻转【升级版】","index":"5.2.4.1"}]}]}]},{"id":"集合","title":"集合","index":"6","children":[{"id":"arraylistltegt","title":"ArrayList&lt;E&gt;","index":"6.1","children":[{"id":"构造方法","title":"构造方法","index":"6.1.1"},{"id":"方法集合","title":"方法集合","index":"6.1.2","children":[{"id":"遍历集合","title":"遍历集合","index":"6.1.2.1"},{"id":"存储学生对象并遍历","title":"存储学生对象并遍历","index":"6.1.2.2"},{"id":"存储学生对象并遍历【升级版】","title":"存储学生对象并遍历【升级版】","index":"6.1.2.3"}]},{"id":"学生管理系统","title":"学生管理系统","index":"6.1.3"}]}]},{"id":"继承extends","title":"继承extends","index":"7","children":[{"id":"继承中变量的访问特点","title":"继承中变量的访问特点","index":"7.1"},{"id":"继承的注意事项","title":"继承的注意事项","index":"7.2"},{"id":"访问父类-super","title":"访问父类 super","index":"7.3","children":[{"id":"继承中构造方法的访问特点","title":"继承中构造方法的访问特点","index":"7.3.1"},{"id":"继承中成员方法的访问特点","title":"继承中成员方法的访问特点","index":"7.3.2"}]},{"id":"方法的重写","title":"方法的重写","index":"7.4"}]},{"id":"包package","title":"包package","index":"8","children":[{"id":"建包","title":"建包","index":"8.1"},{"id":"导包","title":"导包","index":"8.2"}]},{"id":"修饰符","title":"修饰符","index":"9","children":[{"id":"权限修饰符","title":"权限修饰符","index":"9.1"},{"id":"状态修饰符","title":"状态修饰符","index":"9.2","children":[{"id":"final","title":"final","index":"9.2.1"},{"id":"ststic","title":"ststic","index":"9.2.2"}]}]},{"id":"多态","title":"多态","index":"10","children":[{"id":"多态的转型","title":"多态的转型","index":"10.1"},{"id":"抽象类abstract","title":"抽象类abstract","index":"10.2"}]},{"id":"接口","title":"接口","index":"11","children":[{"id":"猫和狗（接口类）","title":"猫和狗（接口类）","index":"11.1"},{"id":"类和接口的关系","title":"类和接口的关系","index":"11.2"},{"id":"抽象类和接口的区别","title":"抽象类和接口的区别","index":"11.3"}]},{"id":"形参和返回值","title":"形参和返回值","index":"12","children":[{"id":"类名作为形参和返回值","title":"类名作为形参和返回值","index":"12.1"},{"id":"抽象类名作为形参和返回值","title":"抽象类名作为形参和返回值","index":"12.2"},{"id":"接口名作为形参和返回值","title":"接口名作为形参和返回值","index":"12.3"}]},{"id":"内部类","title":"内部类","index":"13","children":[{"id":"成员内部类","title":"成员内部类","index":"13.1"},{"id":"局部内部类","title":"局部内部类","index":"13.2","children":[{"id":"匿名内部类","title":"匿名内部类","index":"13.2.1"}]}]},{"id":"工具类","title":"工具类","index":"14","children":[{"id":"math","title":"Math","index":"14.1"},{"id":"system","title":"System","index":"14.2"},{"id":"arrays","title":"Arrays","index":"14.3","children":[{"id":"冒泡排序","title":"冒泡排序","index":"14.3.1"}]}]},{"id":"object","title":"Object","index":"15","children":[{"id":"tostring方法","title":"toString()方法","index":"15.1"},{"id":"equals方法","title":"equals()方法","index":"15.2"}]},{"id":"基本类型的包装类","title":"基本类型的包装类","index":"16","children":[{"id":"integer","title":"Integer","index":"16.1"},{"id":"int-和-string-类型相互转换","title":"int 和 String 类型相互转换","index":"16.2"}]},{"id":"占位符","title":"占位符","index":"17"}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/df2849ec/\" title=\"Java\">https://dxsummer.gitee.io/posts/df2849ec/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2021年12月31日","updated":"2022年1月20日"}}