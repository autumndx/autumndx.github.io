{"title":"Python基础","date":"2021-03-20T07:13:14.000Z","date_formatted":{"ll":"2021年3月20日","L":"2021/03/20","MM-DD":"03-20"},"link":"posts/99832f47","comments":true,"tags":["Python"],"categories":["Python"],"updated":"2021-04-14T13:20:56.072Z","content":"<h2 id=\"第一个python程序\">第一个Python程序<a href=\"#第一个python程序\" title=\"第一个Python程序\"></a></h2><h3 id=\"输入、输出\">输入、输出<a href=\"#输入、输出\" title=\"输入、输出\"></a></h3><h4 id=\"输出\">输出<a href=\"#输出\" title=\"输出\"></a></h4><p>用<code>print()</code>在括号中加上字符串，就可以向屏幕上输出指定的文字。比如输出<code>&#39;hello, world&#39;</code>，用代码实现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'hello, world'</span>)</span><br></pre></td></tr></table></figure><p><code>print()</code>函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'The quick brown fox'</span>, <span class=\"string\">'jumps over'</span>, <span class=\"string\">'the lazy dog'</span>)</span><br><span class=\"line\">The quick brown fox jumps over the lazy dog</span><br></pre></td></tr></table></figure><p><code>print()</code>会依次打印每个字符串，<mark>遇到逗号“,”会输出一个空格</mark>，因此，输出的字符串是这样拼起来的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/python/20210323203935.png\" class=\"φcy\"></p>\n<p><code>print()</code>也可以打印整数，或者计算结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">300</span>)</span><br><span class=\"line\"><span class=\"number\">300</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">100</span> + <span class=\"number\">200</span>)</span><br><span class=\"line\"><span class=\"number\">300</span></span><br></pre></td></tr></table></figure><p>因此，我们可以把计算<code>100 + 200</code>的结果打印得更漂亮一点：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'100 + 200 ='</span>, <span class=\"number\">100</span> + <span class=\"number\">200</span>)</span><br><span class=\"line\"><span class=\"number\">100</span> + <span class=\"number\">200</span> = <span class=\"number\">300</span></span><br></pre></td></tr></table></figure><p>注意，对于<code>100 + 200</code>，Python解释器自动计算出结果<code>300</code>，但是，<code>&#39;100 + 200 =&#39;</code>是字符串而非数学公式，Python把它视为字符串，请自行解释上述打印结果。</p>\n<h4 id=\"输入\">输入<a href=\"#输入\" title=\"输入\"></a></h4><p>现在，你已经可以用<code>print()</code>输出你想要的结果了。但是，如果要让用户从电脑输入一些字符怎么办？Python提供了一个<code>input()</code>，可以让用户输入字符串，并存放到一个变量里。比如输入用户的名字：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = input()</span><br><span class=\"line\">Michael</span><br></pre></td></tr></table></figure><p>当你输入<code>name = input()</code>并按下回车后，Python交互式命令行就在等待你的输入了。这时，你可以输入任意字符，然后按回车后完成输入。</p>\n<p>输入完成后，不会有任何提示，Python交互式命令行又回到<code>&gt;&gt;&gt;</code>状态了。那我们刚才输入的内容到哪去了？答案是存放到<code>name</code>变量里了。可以直接输入<code>name</code>查看变量内容：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name</span><br><span class=\"line\"><span class=\"string\">'Michael'</span></span><br></pre></td></tr></table></figure><p><strong>什么是变量？</strong>请回忆初中数学所学的代数基础知识：</p>\n<p>设正方形的边长为<code>a</code>，则正方形的面积为<code>a x a</code>。把边长<code>a</code>看做一个变量，我们就可以根据<code>a</code>的值计算正方形的面积，比如：</p>\n<p>若a=2，则面积为a x a = 2 x 2 = 4；</p>\n<p>若a=3.5，则面积为a x a = 3.5 x 3.5 = 12.25。</p>\n<p>在计算机程序中，变量不仅可以为整数或浮点数，还可以是字符串，因此，<code>name</code>作为一个变量就是一个字符串。</p>\n<p>要打印出<code>name</code>变量的内容，除了直接写<code>name</code>然后按回车外，还可以用<code>print()</code>函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(name)</span><br><span class=\"line\">Michael</span><br></pre></td></tr></table></figure><p>有了输入和输出，我们就可以把上次打印<code>&#39;hello, world&#39;</code>的程序改成有点意义的程序了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = input()</span><br><span class=\"line\">print(<span class=\"string\">'hello,'</span>, name)</span><br></pre></td></tr></table></figure><p>运行上面的程序，第一行代码会让用户输入任意字符作为自己的名字，然后存入<code>name</code>变量中；第二行代码会根据用户的名字向用户说<code>hello</code>，比如输入<code>Michael</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Workspace&gt; python hello.py</span><br><span class=\"line\">Michael</span><br><span class=\"line\">hello, Michael</span><br></pre></td></tr></table></figure><p>但是程序运行的时候，没有任何提示信息告诉用户：“嘿，赶紧输入你的名字”，这样显得很不友好。幸好，<code>input()</code>可以让你显示一个字符串来提示用户，于是我们把代码改成：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = input(<span class=\"string\">'please enter your name: '</span>)</span><br><span class=\"line\">print(<span class=\"string\">'hello,'</span>, name)</span><br></pre></td></tr></table></figure><p>再次运行这个程序，你会发现，程序一运行，会首先打印出<code>please enter your name:</code>，这样，用户就可以根据提示，输入名字后，得到<code>hello, xxx</code>的输出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Workspace&gt; python hello.py</span><br><span class=\"line\">please enter your name: Michael</span><br><span class=\"line\">hello, Michael</span><br></pre></td></tr></table></figure><p>每次运行该程序，根据用户输入的不同，输出结果也会不同。</p>\n<p>在命令行下，输入和输出就是这么简单。</p>\n<h2 id=\"python基础\">Python基础<a href=\"#python基础\" title=\"Python基础\"></a></h2><h3 id=\"数据类型和变量\">数据类型和变量<a href=\"#数据类型和变量\" title=\"数据类型和变量\"></a></h3><p>以<code>#</code>开头的语句是注释</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># print absolute value of an integer:</span></span><br></pre></td></tr></table></figure><p>Python程序是<mark><strong>大小写敏感</strong></mark>的</p>\n<p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下几种：</p>\n<h4 id=\"整数\">整数<a href=\"#整数\" title=\"整数\"></a></h4><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：<code>1</code>，<code>100</code>，<code>-8080</code>，<code>0</code>，等等。</p>\n<p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用<code>0x</code>前缀和0-9，a-f表示，例如：<code>0xff00</code>，<code>0xa5b4c3d2</code>，等等。</p>\n<p>对于很大的数，例如<code>10000000000</code>，很难数清楚0的个数。<strong>Python允许在数字中间以<code>_</code>分隔</strong>，因此，写成<code>10_000_000_000</code>和<code>10000000000</code>是完全一样的。十六进制数也可以写成<code>0xa1b2_c3d4</code>。</p>\n<h4 id=\"浮点数\">浮点数<a href=\"#浮点数\" title=\"浮点数\"></a></h4><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x10<sup>9</sup>和12.3x10<sup>8</sup>是完全相等的。浮点数可以用数学写法，如<code>1.23</code>，<code>3.14</code>，<code>-9.01</code>，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x10<sup>9</sup>就是<code>1.23e9</code>，或者<code>12.3e8</code>，0.000012可以写成<code>1.2e-5</code>，等等。</p>\n<p>整数和浮点数在计算机内部存储的方式是不同的，<strong>整数运算永远是精确的</strong>（除法难道也是精确的？是的！），而<strong>浮点数运算则可能会有四舍五入的误差。</strong></p>\n<h4 id=\"字符串\">字符串<a href=\"#字符串\" title=\"字符串\"></a></h4><p>字符串是以单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来的任意文本，比如<code>&#39;abc&#39;</code>，<code>&quot;xyz&quot;</code>等等。请注意，<code>&#39;&#39;</code>或<code>&quot;&quot;</code>本身只是一种表示方式，不是字符串的一部分，因此，字符串<code>&#39;abc&#39;</code>只有<code>a</code>，<code>b</code>，<code>c</code>这3个字符。如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<code>I</code>，<code>&#39;</code>，<code>m</code>，空格，<code>O</code>，<code>K</code>这6个字符。</p>\n<p><mark>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>怎么办？可以用转义字符<code>\\</code>来标识</mark>，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'I\\'m \\\"OK\\\"!'</span></span><br></pre></td></tr></table></figure><p>表示的字符串内容是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I<span class=\"string\">'m \"OK\"!</span></span><br></pre></td></tr></table></figure><p>转义字符<code>\\</code>可以转义很多字符，比如<code>\\n</code>表示换行，<code>\\t</code>表示制表符，字符<code>\\</code>本身也要转义，所以<code>\\\\</code>表示的字符就是<code>\\</code>，可以在Python的交互式命令行用<code>print()</code>打印字符串看看：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'I\\'m ok.'</span>)</span><br><span class=\"line\">I<span class=\"string\">'m ok.</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;&gt; print('</span>I\\<span class=\"string\">'m learning\\nPython.'</span>)</span><br><span class=\"line\">I<span class=\"string\">'m learning</span></span><br><span class=\"line\"><span class=\"string\">Python.</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;&gt; print('</span>\\\\\\n\\\\<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br></pre></td></tr></table></figure><p>如果字符串里面有很多字符都需要转义，就需要加很多<code>\\</code>，为了简化，Python还允许用<code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义，可以自己试试：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'\\\\\\t\\\\'</span>)</span><br><span class=\"line\">\\       \\</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">r'\\\\\\t\\\\'</span>)</span><br><span class=\"line\">\\\\\\t\\\\</span><br></pre></td></tr></table></figure><p>如果字符串内部有很多换行，用<code>\\n</code>写在一行里不好阅读，为了简化，Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容，可以自己试试：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'''line1</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">... </span>line2</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">... </span>line3'''</span>)</span><br><span class=\"line\">line1</span><br><span class=\"line\">line2</span><br><span class=\"line\">line3</span><br></pre></td></tr></table></figure><p>上面是在交互式命令行内输入，注意在输入多行内容时，提示符由<code>&gt;&gt;&gt;</code>变为<code>...</code>，提示你可以接着上一行输入，注意<code>...</code>是提示符，不是代码的一部分：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌────────────────────────────────────────────────────────┐</span><br><span class=\"line\">│Command Prompt - python                           _ □ x │</span><br><span class=\"line\">├────────────────────────────────────────────────────────┤</span><br><span class=\"line\">│&gt;&gt;&gt; print(&#39;&#39;&#39;line1                                      │</span><br><span class=\"line\">│... line2                                               │</span><br><span class=\"line\">│... line3&#39;&#39;&#39;)                                           │</span><br><span class=\"line\">│line1                                                   │</span><br><span class=\"line\">│line2                                                   │</span><br><span class=\"line\">│line3                                                   │</span><br><span class=\"line\">│                                                        │</span><br><span class=\"line\">│&gt;&gt;&gt; _                                                   │</span><br><span class=\"line\">│                                                        │</span><br><span class=\"line\">│                                                        │</span><br><span class=\"line\">│                                                        │</span><br><span class=\"line\">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>当输入完结束符<strong>```</strong>和括号<code>)</code>后，执行该语句并打印结果。</p>\n<p>如果写成程序并存为<code>.py</code>文件，就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&#39;&#39;&#39;line1</span><br><span class=\"line\">line2</span><br><span class=\"line\">line3&#39;&#39;&#39;)</span><br></pre></td></tr></table></figure><p>多行字符串<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>还可以在前面加上<code>r</code>使用，请自行测试：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">r'''hello,\\n</span></span><br><span class=\"line\"><span class=\"string\">world'''</span>)</span><br></pre></td></tr></table></figure><h4 id=\"布尔值\">布尔值<a href=\"#布尔值\" title=\"布尔值\"></a></h4><p>布尔值和布尔代数的表示完全一致，一个布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> &gt; <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> &gt; <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure><p>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算。</p>\n<p><code>and</code>运算是与运算，只有所有都为<code>True</code>，<code>and</code>运算结果才是<code>True</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">True</span> <span class=\"keyword\">and</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">True</span> <span class=\"keyword\">and</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">False</span> <span class=\"keyword\">and</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span> &gt; <span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"number\">3</span> &gt; <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure><p><code>or</code>运算是或运算，只要其中有一个为<code>True</code>，<code>or</code>运算结果就是<code>True</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">True</span> <span class=\"keyword\">or</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">True</span> <span class=\"keyword\">or</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">False</span> <span class=\"keyword\">or</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span> &gt; <span class=\"number\">3</span> <span class=\"keyword\">or</span> <span class=\"number\">1</span> &gt; <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure><p><code>not</code>运算是非运算，它是一个单目运算符，把<code>True</code>变成<code>False</code>，<code>False</code>变成<code>True</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">not</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">not</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">not</span> <span class=\"number\">1</span> &gt; <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure><p>布尔值经常用在条件判断中，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'adult'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'teenager'</span>)</span><br></pre></td></tr></table></figure><h4 id=\"空值\">空值<a href=\"#空值\" title=\"空值\"></a></h4><p>空值是Python里一个特殊的值，用<code>None</code>表示。<mark><code>None</code>不能理解为<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值。</mark></p>\n<p>此外，Python还提供了<strong>列表</strong>、<strong>字典</strong>等多种数据类型，还<strong>允许创建自定义数据类型</strong>，我们后面会继续讲到。</p>\n<h4 id=\"变量\">变量<a href=\"#变量\" title=\"变量\"></a></h4><p>变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</p>\n<p>变量在程序中就是用一个变量名表示了，<strong>变量名必须是大小写英文、数字和<code>_</code>的组合，且不能用数字开头</strong>，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure><p>变量<code>a</code>是一个整数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t_007 = <span class=\"string\">'T007'</span></span><br></pre></td></tr></table></figure><p>变量<code>t_007</code>是一个字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Answer = <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure><p>变量<code>Answer</code>是一个布尔值<code>True</code>。</p>\n<p>在Python中，等号<code>=</code>是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">123</span> <span class=\"comment\"># a是整数</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\">a = <span class=\"string\">'ABC'</span> <span class=\"comment\"># a变为字符串</span></span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure><p>这种变量本身类型不固定的语言称之为<font color=\"red\"><strong>动态语言</strong></font>，与之对应的是<font color=\"red\"><strong>静态语言</strong></font>。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java<strong>是静态语言</strong>，赋值语句如下（// 表示注释）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a = <span class=\"number\">123</span>; // a是整数类型变量</span><br><span class=\"line\">a = <span class=\"string\">\"ABC\"</span>; // 错误：不能把字符串赋给整型变量</span><br></pre></td></tr></table></figure><p>和静态语言相比，动态语言更灵活，就是这个原因。</p>\n<p>请不要把赋值语句的等号等同于数学的等号。比如下面的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\">x = x + <span class=\"number\">2</span></span><br></pre></td></tr></table></figure><p>如果从数学上理解<code>x = x + 2</code>那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式<code>x + 2</code>，得到结果<code>12</code>，再赋给变量<code>x</code>。由于<code>x</code>之前的值是<code>10</code>，重新赋值后，<code>x</code>的值变成<code>12</code>。</p>\n<p>最后，理解变量在计算机内存中的表示也非常重要。当我们写：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">'ABC'</span></span><br></pre></td></tr></table></figure><p>时，Python解释器干了两件事情：</p>\n<ol><li>在内存中创建了一个<code>&#39;ABC&#39;</code>的字符串；</li>\n<li>在内存中创建了一个名为<code>a</code>的变量，并把它指向<code>&#39;ABC&#39;</code>。</li>\n</ol><p>也可以把一个变量<code>a</code>赋值给另一个变量<code>b</code>，这个操作实际上是把变量<code>b</code>指向变量<code>a</code>所指向的数据，例如下面的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; a = <span class=\"string\">'ABC'</span></span><br><span class=\"line\">&gt;&gt; b = a</span><br><span class=\"line\">&gt;&gt; a = <span class=\"string\">'XYZ'</span></span><br><span class=\"line\">&gt;&gt; print(b)</span><br><span class=\"line\">ABC</span><br></pre></td></tr></table></figure><p>最后一行打印出变量<code>b</code>的内容到底是<code>&#39;ABC&#39;</code>呢还是<code>&#39;XYZ&#39;</code>？如果从数学意义上理解，就会错误地得出<code>b</code>和<code>a</code>相同，也应该是<code>&#39;XYZ&#39;</code>，但实际上<code>b</code>的值是<code>&#39;ABC&#39;</code>，让我们一行一行地执行代码，就可以看到到底发生了什么事：</p>\n<p>执行<code>a = &#39;ABC&#39;</code>，解释器创建了字符串<code>&#39;ABC&#39;</code>和变量<code>a</code>，并把<code>a</code>指向<code>&#39;ABC&#39;</code>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/python/20210323202211.png\" class=\"φcy\"></p>\n<p>执行<code>b = a</code>，解释器创建了变量<code>b</code>，并把<code>b</code>指向<code>a</code>指向的字符串<code>&#39;ABC&#39;</code>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/python/20210323202301.png\" class=\"φcy\"></p>\n<p>执行<code>a = &#39;XYZ&#39;</code>，解释器创建了字符串’XYZ’，并把<code>a</code>的指向改为<code>&#39;XYZ&#39;</code>，但<code>b</code>并没有更改：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/python/20210323202318.png\" class=\"φcy\"></p>\n<p>所以，最后打印变量<code>b</code>的结果自然是<code>&#39;ABC&#39;</code>了。</p>\n<h4 id=\"常量\">常量<a href=\"#常量\" title=\"常量\"></a></h4><p>所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PI = <span class=\"number\">3.14159265359</span></span><br></pre></td></tr></table></figure><p>但事实上<code>PI</code>仍然是一个变量，Python根本没有任何机制保证<code>PI</code>不会被改变，所以，<strong>用全部大写的变量名表示常量</strong>只是一个习惯上的用法，如果你一定要改变变量<code>PI</code>的值，也没人能拦住你。</p>\n<p>最后解释一下整数的除法为什么也是精确的。在Python中，有两种除法，一种除法是<code>/</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> / <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3.3333333333333335</span></span><br></pre></td></tr></table></figure><p><mark><code>/</code>除法计算结果是<strong>浮点数</strong></mark>，即使是两个整数恰好整除，结果也是浮点数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9</span> / <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure><p><mark>还有一种除法是<code>//</code>，称为<strong>地板除</strong>，两个整数的除法仍然是<strong>整数</strong></mark>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> // <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure><p>你没有看错，整数的地板除<code>//</code>永远是整数，即使除不尽。要做精确的除法，使用<code>/</code>就可以。</p>\n<p>因为<strong><code>//</code>除法只取结果的整数部分</strong>，所以Python还提供一个余数运算，可以得到两个整数相除的余数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> % <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure><p>无论整数做<code>//</code>除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</p>\n<h4 id=\"小结\">小结<a href=\"#小结\" title=\"小结\"></a></h4><p>Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对<strong>变量赋值</strong>就是把<strong>数据</strong>和<strong>变量</strong>给关联起来。</p>\n<p>对变量赋值<code>x = y</code>是把变量<code>x</code>指向真正的对象，该对象是变量<code>y</code>所指向的。随后对<strong>变量<code>y</code>的赋值<em>不影响</em>变量<code>x</code>的指向</strong>。</p>\n<p>注意：<strong>Python的整数没有大小限制</strong>，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在<code>-2147483648</code>-<code>2147483647</code>。</p>\n<p><strong>Python的浮点数也没有大小限制</strong>，但是<strong>超出一定范围就直接表示为<code>inf</code>（无限大）</strong>。</p>\n<h3 id=\"字符串和编码\">字符串和编码<a href=\"#字符串和编码\" title=\"字符串和编码\"></a></h3><h4 id=\"字符编码\">字符编码<a href=\"#字符编码\" title=\"字符编码\"></a></h4><p>我们已经讲过了，字符串也是一种数据类型，但是，字符串比较特殊的是还有一个编码问题。</p>\n<p>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是<code>65535</code>，4个字节可以表示的最大整数是<code>4294967295</code>。</p>\n<p>由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为<code>ASCII</code>编码，比如大写字母<code>A</code>的编码是<code>65</code>，小写字母<code>z</code>的编码是<code>122</code>。</p>\n<p>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了<code>GB2312</code>编码，用来把中文编进去。</p>\n<p>你可以想得到的是，全世界有上百种语言，日本把日文编到<code>Shift_JIS</code>里，韩国把韩文编到<code>Euc-kr</code>里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/python/20210331201507.png\" class=\"φcy\"></p>\n<p>因此，Unicode字符集应运而生。<mark>Unicode把所有语言都统一到一套编码里</mark>，这样就不会再有乱码问题了。</p>\n<p>Unicode标准也在不断发展，但最常用的是UCS-16编码，用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p>\n<p>现在，捋一捋ASCII编码和Unicode编码的区别：<mark>ASCII编码是1个字节，而Unicode编码通常是2个字节。</mark></p>\n<p>字母<code>A</code>用ASCII编码是十进制的<code>65</code>，二进制的<code>01000001</code>；</p>\n<p>字符<code>0</code>用ASCII编码是十进制的<code>48</code>，二进制的<code>00110000</code>，注意字符<code>&#39;0&#39;</code>和整数<code>0</code>是不同的；</p>\n<p>汉字<code>中</code>已经超出了ASCII编码的范围，用Unicode编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>。</p>\n<p>你可以猜测，如果把ASCII编码的<code>A</code>用Unicode编码，只需要在前面补0就可以，因此，<code>A</code>的Unicode编码是<code>00000000 01000001</code>。</p>\n<p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p>\n<p>所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的<code>UTF-8</code>编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th align=\"left\">字符</th><th align=\"left\">ASCII</th><th align=\"left\">Unicode</th><th align=\"left\">UTF-8</th></tr>\n</thead><tbody><tr>\n<td align=\"left\">A</td><td align=\"left\">01000001</td><td align=\"left\">00000000 01000001</td><td align=\"left\">01000001</td></tr>\n<tr>\n<td align=\"left\">中</td><td align=\"left\">x</td><td align=\"left\">01001110 00101101</td><td align=\"left\">11100100 10111000 10101101</td></tr>\n</tbody></table></div></div><p>从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p>\n<p>搞清楚了ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：</p>\n<p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</p>\n<p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/python/20210331201950.png\" class=\"φcy\"></p>\n<p>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/python/20210331202105.png\" class=\"φcy\"></p>\n<p>所以你看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p>\n<h4 id=\"python的字符串\">Python的字符串<a href=\"#python的字符串\" title=\"Python的字符串\"></a></h4><p>搞清楚了令人头疼的字符编码问题后，我们再来研究Python的字符串。</p>\n<p><mark><strong>在最新的Python 3版本中，字符串是以Unicode编码的</strong></mark>，也就是说，Python的字符串支持多语言，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'包含中文的str'</span>)</span><br><span class=\"line\">包含中文的str</span><br></pre></td></tr></table></figure><p>对于单个字符的编码，Python提供了<code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ord(<span class=\"string\">'A'</span>)</span><br><span class=\"line\"><span class=\"number\">65</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ord(<span class=\"string\">'中'</span>)</span><br><span class=\"line\"><span class=\"number\">20013</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>chr(<span class=\"number\">66</span>)</span><br><span class=\"line\"><span class=\"string\">'B'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>chr(<span class=\"number\">25991</span>)</span><br><span class=\"line\"><span class=\"string\">'文'</span></span><br></pre></td></tr></table></figure><p>如果知道字符的整数编码，还可以用十六进制这么写<code>str</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'\\u4e2d\\u6587'</span></span><br><span class=\"line\"><span class=\"string\">'中文'</span></span><br></pre></td></tr></table></figure><p>两种写法完全是等价的。</p>\n<p>由于Python的字符串类型是<code>str</code>，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。</p>\n<p>Python对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"string\">b'ABC'</span></span><br></pre></td></tr></table></figure><p>要注意区分<code>&#39;ABC&#39;</code>和<code>b&#39;ABC&#39;</code>，前者是<code>str</code>，后者虽然内容显示得和前者一样，但<code>bytes</code>的每个字符都只占用一个字节。</p>\n<p>以Unicode表示的<code>str</code>通过<code>encode()</code>方法可以编码为指定的<code>bytes</code>，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'ABC'</span>.encode(<span class=\"string\">'ascii'</span>)</span><br><span class=\"line\"><span class=\"string\">b'ABC'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'中文'</span>.encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"><span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'中文'</span>.encode(<span class=\"string\">'ascii'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">UnicodeEncodeError: <span class=\"string\">'ascii'</span> codec can<span class=\"string\">'t encode characters in position 0-1: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure><p>纯英文的<code>str</code>可以用<code>ASCII</code>编码为<code>bytes</code>，内容是一样的，含有中文的<code>str</code>可以用<code>UTF-8</code>编码为<code>bytes</code>。含有中文的<code>str</code>无法用<code>ASCII</code>编码，因为中文编码的范围超过了<code>ASCII</code>编码的范围，Python会报错。</p>\n<p>在<code>bytes</code>中，无法显示为ASCII字符的字节，用<code>\\x##</code>显示。</p>\n<p>反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是<code>bytes</code>。要把<code>bytes</code>变为<code>str</code>，就需要用<code>decode()</code>方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b'ABC'</span>.decode(<span class=\"string\">'ascii'</span>)</span><br><span class=\"line\"><span class=\"string\">'ABC'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span>.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"><span class=\"string\">'中文'</span></span><br></pre></td></tr></table></figure><p>如果<code>bytes</code>中包含无法解码的字节，<code>decode()</code>方法会报错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b'\\xe4\\xb8\\xad\\xff'</span>.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  ...</span><br><span class=\"line\">UnicodeDecodeError: <span class=\"string\">'utf-8'</span> codec can<span class=\"string\">'t decode byte 0xff in position 3: invalid start byte</span></span><br></pre></td></tr></table></figure><p>如果<code>bytes</code>中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b'\\xe4\\xb8\\xad\\xff'</span>.decode(<span class=\"string\">'utf-8'</span>, errors=<span class=\"string\">'ignore'</span>)</span><br><span class=\"line\"><span class=\"string\">'中'</span></span><br></pre></td></tr></table></figure><p>要计算<code>str</code>包含多少个字符，可以用<code>len()</code>函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(<span class=\"string\">'ABC'</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(<span class=\"string\">'中文'</span>)</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure><p><code>len()</code>函数计算的是<code>str</code>的字符数，如果换成<code>bytes</code>，<code>len()</code>函数就计算字节数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(<span class=\"string\">b'ABC'</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(<span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span>)</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(<span class=\"string\">'中文'</span>.encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure><p>可见，<strong>1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节</strong>。</p>\n<p>在操作字符串时，我们经常遇到<code>str</code>和<code>bytes</code>的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对<code>str</code>和<code>bytes</code>进行转换。</p>\n<p>由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3 </span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p>第一行注释是为了<strong>告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；</strong></p>\n<p>第二行注释是为了告诉Python解释器，<strong>按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。</strong></p>\n<p>申明了UTF-8编码并不意味着你的<code>.py</code>文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用UTF-8 without BOM编码：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/python/20210410143438.png\" class=\"φcy\"></p>\n<p>如果<code>.py</code>文件本身使用UTF-8编码，并且也申明了<code># -*- coding: utf-8 -*-</code>，打开命令提示符测试就可以正常显示中文：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/python/20210410143542.png\" class=\"φcy\"></p>\n<h4 id=\"格式化\">格式化<a href=\"#格式化\" title=\"格式化\"></a></h4><p>最后一个常见的问题是如何输出格式化的字符串。我们经常会输出类似<code>&#39;亲爱的xxx你好！你xx月的话费是xx，余额是xx&#39;</code>之类的字符串，而xxx的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/python/20210410193911.png\" class=\"φcy\"></p>\n<p>在Python中，采用的格式化方式和C语言是一致的，用<code>%</code>实现，举例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'Hello, %s'</span> % <span class=\"string\">'world'</span></span><br><span class=\"line\"><span class=\"string\">'Hello, world'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'Hi, %s, you have $%d.'</span> % (<span class=\"string\">'Michael'</span>, <span class=\"number\">1000000</span>)</span><br><span class=\"line\"><span class=\"string\">'Hi, Michael, you have $1000000.'</span></span><br></pre></td></tr></table></figure><p>你可能猜到了，<mark><code>%</code>运算符就是用来格式化字符串的</mark>。在字符串内部，<code>%s</code>表示用字符串替换，<code>%d</code>表示用整数替换，有几个<code>%?</code>占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个<code>%?</code>，括号可以省略。</p>\n<p>常见的占位符有：</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th align=\"left\">占位符</th><th align=\"left\">替换内容</th></tr>\n</thead><tbody><tr>\n<td align=\"left\">%d</td><td align=\"left\">整数</td></tr>\n<tr>\n<td align=\"left\">%f</td><td align=\"left\">浮点数</td></tr>\n<tr>\n<td align=\"left\">%s</td><td align=\"left\">字符串</td></tr>\n<tr>\n<td align=\"left\">%x</td><td align=\"left\">十六进制整数</td></tr>\n</tbody></table></div></div><p>其中，格式化<strong>整数</strong>和<strong>浮点数</strong>还可以指定是否补0和整数与小数的位数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;print(<span class=\"string\">'%2d-%02d'</span> % (<span class=\"number\">3</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"> <span class=\"number\">3</span><span class=\"number\">-01</span></span><br><span class=\"line\">&gt;&gt;print(<span class=\"string\">'%.2f'</span> % <span class=\"number\">3.1415926</span>)</span><br><span class=\"line\"><span class=\"number\">3.14</span></span><br></pre></td></tr></table></figure><p>如果你不太确定应该用什么，<code>%s</code>永远起作用，它会<strong>把任何数据类型转换为字符串</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'Age: %s. Gender: %s'</span> % (<span class=\"number\">25</span>, <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"string\">'Age: 25. Gender: True'</span></span><br></pre></td></tr></table></figure><p>有些时候，字符串里面的<code>%</code>是一个普通字符怎么办？这个时候就需要转义，用<code>%%</code>来表示一个<code>%</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'growth rate: %d %%'</span> % <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"string\">'growth rate: 7 %'</span></span><br></pre></td></tr></table></figure><h5 id=\"format\">format()<a href=\"#format\" title=\"format()\"></a></h5><p>另一种格式化字符串的方法是使用字符串的<code>format()</code>方法，它会用传入的参数依次替换字符串内的占位符<code>{0}</code>、<code>{1}</code>……，不过这种方式写起来比<code>%</code>要麻烦得多：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%'</span>.format(<span class=\"string\">'小明'</span>, <span class=\"number\">17.125</span>)</span><br><span class=\"line\"><span class=\"string\">'Hello, 小明, 成绩提升了 17.1%'</span></span><br></pre></td></tr></table></figure><h5 id=\"f-string\">f-string<a href=\"#f-string\" title=\"f-string\"></a></h5><p>最后一种格式化字符串的方法是使用以<code>f</code>开头的字符串，称之为<code>f-string</code>，它和普通字符串不同之处在于，字符串如果包含<code>{xxx}</code>，就会以对应的变量替换：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; r &#x3D; 2.5</span><br><span class=\"line\">&gt;&gt;&gt; s &#x3D; 3.14 * r ** 2</span><br><span class=\"line\">&gt;&gt;&gt; print(f&#39;The area of a circle with radius &#123;r&#125; is &#123;s:.2f&#125;&#39;)</span><br><span class=\"line\">The area of a circle with radius 2.5 is 19.62</span><br></pre></td></tr></table></figure><p>上述代码中，<strong><code>{r}</code>被变量<code>r</code>的值替换</strong>，<strong><code>{s:.2f}</code>被变量<code>s</code>的值替换</strong>，并且<code>:</code>后面的<code>.2f</code>指定了格式化参数（即保留两位小数），因此，<code>{s:.2f}</code>的替换结果是<code>19.62</code>。</p>\n<h4 id=\"小结-1\">小结<a href=\"#小结-1\" title=\"小结\"></a></h4><p><strong>Python 3的字符串使用<code>Unicode</code>，直接支持多语言。</strong></p>\n<p>当<code>str</code>和<code>bytes</code>互相转换时，需要指定编码。<strong>最常用的编码是<code>UTF-8</code></strong>。Python当然也支持其他编码方式，比如把Unicode编码成<code>GB2312</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'中文'</span>.encode(<span class=\"string\">'gb2312'</span>)</span><br><span class=\"line\"><span class=\"string\">b'\\xd6\\xd0\\xce\\xc4'</span></span><br></pre></td></tr></table></figure><p>但这种方式纯属自找麻烦，如果没有特殊业务要求，<strong>请牢记仅使用<code>UTF-8</code>编码</strong>。</p>\n<p>格式化字符串的时候，可以用Python的交互式环境测试，方便快捷。</p>\n<h3 id=\"使用list和tuple\">使用list和tuple<a href=\"#使用list和tuple\" title=\"使用list和tuple\"></a></h3><h4 id=\"list列表-\">list列表 []<a href=\"#list列表-\" title=\"list列表 []\"></a></h4><p>Python内置的一种数据类型是<strong>列表</strong>：list。list是一种有序的集合，可以随时添加和删除其中的元素。</p>\n<p>比如，列出班里所有同学的名字，就可以用一个list表示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates = [<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br></pre></td></tr></table></figure><p>变量<code>classmates</code>就是一个list。用<code>len()</code>函数可以获得list元素的个数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(classmates)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure><p>用索引来访问list中每一个位置的元素，记得索引是从<code>0</code>开始的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">'Michael'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"string\">'Bob'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates[<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"string\">'Tracy'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates[<span class=\"number\">3</span>]</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">IndexError: list index out of range</span><br></pre></td></tr></table></figure><p>当索引超出了范围时，Python会报一个<code>IndexError</code>错误，所以，要确保索引不要越界，<mark>记得最后一个元素的索引是<code>len(classmates) - 1</code></mark>。</p>\n<p><strong>如果要取最后一个元素，除了计算索引位置外，还可以用<code>-1</code>做索引，直接获取最后一个元素：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates[<span class=\"number\">-1</span>]</span><br><span class=\"line\"><span class=\"string\">'Tracy'</span></span><br></pre></td></tr></table></figure><p>以此类推，可以获取倒数第2个、倒数第3个：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates[<span class=\"number\">-2</span>]</span><br><span class=\"line\"><span class=\"string\">'Bob'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates[<span class=\"number\">-3</span>]</span><br><span class=\"line\"><span class=\"string\">'Michael'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates[<span class=\"number\">-4</span>]</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">IndexError: list index out of range</span><br></pre></td></tr></table></figure><p>当然，倒数第4个就越界了。</p>\n<p>list是一个可变的有序表，所以，可以<strong>往list中追加元素到末尾</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates.append(<span class=\"string\">'Adam'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>, <span class=\"string\">'Adam'</span>]</span><br></pre></td></tr></table></figure><p>也可以<strong>把元素插入到指定的位置</strong>，比如索引号为<code>1</code>的位置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates.insert(<span class=\"number\">1</span>, <span class=\"string\">'Jack'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Jack'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>, <span class=\"string\">'Adam'</span>]</span><br></pre></td></tr></table></figure><p>要<strong>删除list末尾的元素</strong>，用<code>pop()</code>方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates.pop()</span><br><span class=\"line\"><span class=\"string\">'Adam'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Jack'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br></pre></td></tr></table></figure><p>要<strong>删除指定位置的元素</strong>，用<code>pop(i)</code>方法，其中<code>i</code>是索引位置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates.pop(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"string\">'Jack'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br></pre></td></tr></table></figure><p>要<strong>把某个元素替换成别的元素</strong>，可以直接赋值给对应的索引位置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates[<span class=\"number\">1</span>] = <span class=\"string\">'Sarah'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Sarah'</span>, <span class=\"string\">'Tracy'</span>]</span><br></pre></td></tr></table></figure><p>list里面的元素的数据类型也可以不同，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">'Apple'</span>, <span class=\"number\">123</span>, <span class=\"literal\">True</span>]</span><br></pre></td></tr></table></figure><p><strong><mark>list元素也可以是另一个list</mark></strong>，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = [<span class=\"string\">'python'</span>, <span class=\"string\">'java'</span>, [<span class=\"string\">'asp'</span>, <span class=\"string\">'php'</span>], <span class=\"string\">'scheme'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(s)</span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure><p>要注意<code>s</code>只有4个元素，其中<code>s[2]</code>又是一个list，如果拆开写就更容易理解了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p = [<span class=\"string\">'asp'</span>, <span class=\"string\">'php'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = [<span class=\"string\">'python'</span>, <span class=\"string\">'java'</span>, p, <span class=\"string\">'scheme'</span>]</span><br></pre></td></tr></table></figure><p>要拿到<code>&#39;php&#39;</code>可以写<code>p[1]</code>或者<code>s[2][1]</code>，因此<code>s</code>可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。</p>\n<p>如果一个list中一个元素也没有，就是一个空的list，它的长度为0：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = []</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(L)</span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure><h4 id=\"tuple元组-\">tuple元组 ()<a href=\"#tuple元组-\" title=\"tuple元组 ()\"></a></h4><p>另一种有序列表叫<strong>元组</strong>：<code>tuple</code>。<code>tuple</code>和<code>list</code>非常类似，但是<mark><strong><code>tuple</code>一旦初始化就不能修改</strong></mark>，比如同样是列出同学的名字：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>classmates = (<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>)</span><br></pre></td></tr></table></figure><p>现在，classmates这个tuple不能变了，它也没有<code>append()</code>，<code>insert()</code>这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用<code>classmates[0]</code>，<code>classmates[-1]</code>，但<strong>不能赋值成另外的元素</strong>。</p>\n<p>不可变的<code>tuple</code>有什么意义？<strong>因为<code>tuple</code>不可变，所以代码更安全</strong>。如果可能，能用tuple代替list就尽量用tuple。</p>\n<blockquote>\n<p>tuple的陷阱：当你定义一个tuple时，<strong>在定义的时候，tuple的元素就必须被确定下来</strong>，比如：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = (<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure><p>如果要定义一个空的tuple，可以写成<code>()</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = ()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t</span><br><span class=\"line\">()</span><br></pre></td></tr></table></figure><p>但是，要定义一个只有1个元素的tuple，如果你这么定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = (<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure><p><strong>定义的不是tuple，是<code>1</code>这个数！</strong>这是因为括号<code>()</code>既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是<code>1</code>。</p>\n<p>所以，<mark><strong>只有1个元素的tuple定义时必须加一个逗号<code>,</code></strong></mark>，来消除歧义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = (<span class=\"number\">1</span>,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t</span><br><span class=\"line\">(<span class=\"number\">1</span>,)</span><br></pre></td></tr></table></figure><p><strong>Python在显示只有1个元素的tuple时，也会加一个逗号<code>,</code>，以免你误解成数学计算意义上的括号。</strong></p>\n<p>最后来看一个“可变的”tuple：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = (<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t[<span class=\"number\">2</span>][<span class=\"number\">0</span>] = <span class=\"string\">'X'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t[<span class=\"number\">2</span>][<span class=\"number\">1</span>] = <span class=\"string\">'Y'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t</span><br><span class=\"line\">(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, [<span class=\"string\">'X'</span>, <span class=\"string\">'Y'</span>])</span><br></pre></td></tr></table></figure><p>这个tuple定义的时候有3个元素，分别是<code>&#39;a&#39;</code>，<code>&#39;b&#39;</code>和一个list。不是说tuple一旦定义后就不可变了吗？怎么后来又变了？</p>\n<p>别急，我们先看看定义的时候tuple包含的3个元素：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/python/20210411210134.png\" class=\"φcy\"></p>\n<p>当我们把list的元素<code>&#39;A&#39;</code>和<code>&#39;B&#39;</code>修改为<code>&#39;X&#39;</code>和<code>&#39;Y&#39;</code>后，tuple变为：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/python/20210411210211.png\" class=\"φcy\"></p>\n<p>表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，<strong>tuple所谓的“不变”是说，tuple的每个元素，指向永远不变</strong>。即指向<code>&#39;a&#39;</code>，就不能改成指向<code>&#39;b&#39;</code>，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！</p>\n<p>理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。</p>\n<h3 id=\"条件判断\">条件判断<a href=\"#条件判断\" title=\"条件判断\"></a></h3><p>计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。</p>\n<p>比如，输入用户年龄，根据年龄打印不同的内容，在Python程序中，用<code>if</code>语句实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'your age is'</span>, age)</span><br><span class=\"line\">    print(<span class=\"string\">'adult'</span>)</span><br></pre></td></tr></table></figure><p>根据Python的缩进规则，如果<code>if</code>语句判断是<code>True</code>，就把缩进的两行print语句执行了，否则，什么也不做。</p>\n<p>也可以给<code>if</code>添加一个<code>else</code>语句，意思是，如果<code>if</code>判断是<code>False</code>，不要执行<code>if</code>的内容，去把<code>else</code>执行了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'your age is'</span>, age)</span><br><span class=\"line\">    print(<span class=\"string\">'adult'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'your age is'</span>, age)</span><br><span class=\"line\">    print(<span class=\"string\">'teenager'</span>)</span><br></pre></td></tr></table></figure><p>注意不要少写了冒号<code>:</code>。</p>\n<p>当然上面的判断是很粗略的，完全可以用<code>elif</code>做更细致的判断：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'adult'</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt;= <span class=\"number\">6</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'teenager'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'kid'</span>)</span><br></pre></td></tr></table></figure><p><strong><code>elif</code>是<code>else if</code>的缩写</strong>，完全可以有多个<code>elif</code>，所以<code>if</code>语句的完整形式就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> &lt;条件判断<span class=\"number\">1</span>&gt;:</span><br><span class=\"line\">    &lt;执行<span class=\"number\">1</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">elif</span> &lt;条件判断<span class=\"number\">2</span>&gt;:</span><br><span class=\"line\">    &lt;执行<span class=\"number\">2</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">elif</span> &lt;条件判断<span class=\"number\">3</span>&gt;:</span><br><span class=\"line\">    &lt;执行<span class=\"number\">3</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    &lt;执行<span class=\"number\">4</span>&gt;</span><br></pre></td></tr></table></figure><p><code>if</code>语句执行有个特点，它是从上往下判断，如果在某个判断上是<code>True</code>，把该判断对应的语句执行后，就忽略掉剩下的<code>elif</code>和<code>else</code>，所以，请测试并解释为什么下面的程序打印的是<code>teenager</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">6</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'teenager'</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'adult'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'kid'</span>)</span><br></pre></td></tr></table></figure><p><code>if</code>判断条件还可以简写，比如写：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> x:</span><br><span class=\"line\">    print(<span class=\"string\">'True'</span>)</span><br></pre></td></tr></table></figure><p>只要<code>x</code>是非零数值、非空字符串、非空list等，就判断为<code>True</code>，否则为<code>False</code>。</p>\n<h4 id=\"再议-input\">再议 input<a href=\"#再议-input\" title=\"再议 input\"></a></h4><p>最后看一个有问题的条件判断。很多同学会用<code>input()</code>读取用户的输入，这样可以自己输入，程序运行得更有意思：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">birth = input(<span class=\"string\">'birth: '</span>)\t//输出birth: </span><br><span class=\"line\"><span class=\"keyword\">if</span> birth &lt; <span class=\"number\">2000</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'00前'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'00后'</span>)</span><br></pre></td></tr></table></figure><p>输入<code>1982</code>，结果报错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: unorderable types: str() &gt; int()</span><br></pre></td></tr></table></figure><p>这是因为<mark><strong><code>input()</code>返回的数据类型是<code>str</code></strong></mark>，<code>str</code>不能直接和整数比较，必须先把<code>str</code>转换成整数。Python提供了<code>int()</code>函数来完成这件事情：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = input(<span class=\"string\">'birth: '</span>)</span><br><span class=\"line\">birth = int(s)</span><br><span class=\"line\"><span class=\"keyword\">if</span> birth &lt; <span class=\"number\">2000</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'00前'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'00后'</span>)</span><br></pre></td></tr></table></figure><p>再次运行，就可以得到正确地结果。但是，如果输入<code>abc</code>呢？又会得到一个错误信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">ValueError: invalid literal for int() with base 10: &#39;abc&#39;</span><br></pre></td></tr></table></figure><p>原来<code>int()</code>函数发现一个字符串并不是合法的数字时就会报错，程序就退出了。</p>\n<p>如何检查并捕获程序运行期的错误呢？后面的错误和调试会讲到。</p>\n<h4 id=\"小结-2\">小结<a href=\"#小结-2\" title=\"小结\"></a></h4><p>条件判断可以让计算机自己做选择，Python的<code>if...elif...else</code>很灵活。</p>\n<p>条件判断从上向下匹配，当满足条件时执行对应的块内语句，后续的<code>elif</code>和<code>else</code>都不再执行。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/python/20210412204537.png\" class=\"φcy\"></p>\n<h3 id=\"循环\">循环<a href=\"#循环\" title=\"循环\"></a></h3><p>要计算1+2+3，我们可以直接写表达式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> + <span class=\"number\">2</span> + <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure><p>要计算1+2+3+…+10，勉强也能写出来。</p>\n<p>但是，要计算1+2+3+…+10000，直接写表达式就不可能了。</p>\n<p>为了让计算机能计算成千上万次的重复运算，我们就需要循环语句。</p>\n<p>Python的循环有两种，一种是<code>for...in</code>循环，依次把list或tuple中的每个元素迭代出来，看例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names:</span><br><span class=\"line\">    print(name)</span><br></pre></td></tr></table></figure><p>执行这段代码，会依次打印<code>names</code>的每一个元素：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Michael</span><br><span class=\"line\">Bob</span><br><span class=\"line\">Tracy</span><br></pre></td></tr></table></figure><p>所以<strong><code>for x in ...</code>循环就是把每个元素代入变量<code>x</code></strong>，然后执行缩进块的语句。</p>\n<p>再比如我们想计算1-10的整数之和，可以用一个<code>sum</code>变量做累加：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]:</span><br><span class=\"line\">    sum = sum + x</span><br><span class=\"line\">print(sum)</span><br></pre></td></tr></table></figure><p>如果要计算1-100的整数之和，从1写到100有点困难，幸好Python提供一个<code>range()</code>函数，可以生成一个整数序列，再通过<code>list()</code>函数可以转换为list。比如<code>range(5)</code>生成的序列是从0开始小于5的整数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(range(<span class=\"number\">5</span>))</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure><p><code>range(101)</code>就可以生成0-100的整数序列，计算如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">101</span>):</span><br><span class=\"line\">    sum = sum + x</span><br><span class=\"line\">print(sum)</span><br></pre></td></tr></table></figure><p>请自行运行上述代码，看看结果是不是当年高斯同学心算出的5050。</p>\n<p>第二种循环是<code>while</code>循环，只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\">n = <span class=\"number\">99</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    sum = sum + n</span><br><span class=\"line\">    n = n - <span class=\"number\">2</span></span><br><span class=\"line\">print(sum)</span><br></pre></td></tr></table></figure><p>在循环内部变量<code>n</code>不断自减，直到变为<code>-1</code>时，不再满足while条件，循环退出。</p>\n<h4 id=\"break\">break<a href=\"#break\" title=\"break\"></a></h4><p>在循环中，<code>break</code>语句可以<strong>提前退出循环</strong>。例如，本来要循环打印1～100的数字：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &lt;= <span class=\"number\">100</span>:</span><br><span class=\"line\">    print(n)</span><br><span class=\"line\">    n = n + <span class=\"number\">1</span></span><br><span class=\"line\">print(<span class=\"string\">'END'</span>)</span><br></pre></td></tr></table></figure><p>上面的代码可以打印出1~100。</p>\n<p>如果要提前结束循环，可以用<code>break</code>语句：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &lt;= <span class=\"number\">100</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &gt; <span class=\"number\">10</span>: <span class=\"comment\"># 当n = 11时，条件满足，执行break语句</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span> <span class=\"comment\"># break语句会结束当前循环</span></span><br><span class=\"line\">    print(n)</span><br><span class=\"line\">    n = n + <span class=\"number\">1</span></span><br><span class=\"line\">print(<span class=\"string\">'END'</span>)</span><br></pre></td></tr></table></figure><p>执行上面的代码可以看到，打印出1~10后，紧接着打印<code>END</code>，程序结束。</p>\n<p>可见<code>break</code>的作用是提前结束循环。</p>\n<h4 id=\"continue\">continue<a href=\"#continue\" title=\"continue\"></a></h4><p>在循环过程中，也可以通过<code>continue</code>语句，跳过当前的这次循环，直接开始下一次循环。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    n = n + <span class=\"number\">1</span></span><br><span class=\"line\">    print(n)</span><br></pre></td></tr></table></figure><p>上面的程序可以打印出1～10。但是，如果我们想只打印奇数，可以用<code>continue</code>语句跳过某些循环：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    n = n + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n % <span class=\"number\">2</span> == <span class=\"number\">0</span>: <span class=\"comment\"># 如果n是偶数，执行continue语句</span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span> <span class=\"comment\"># continue语句会直接继续下一轮循环，后续的print()语句不会执行</span></span><br><span class=\"line\">    print(n)</span><br></pre></td></tr></table></figure><p>执行上面的代码可以看到，打印的不再是1～10，而是1，3，5，7，9。</p>\n<p>可见<code>continue</code>的作用是提前结束本轮循环，并直接开始下一轮循环。</p>\n<h4 id=\"小结-3\">小结<a href=\"#小结-3\" title=\"小结\"></a></h4><p>循环是让计算机做重复任务的有效的方法。</p>\n<p><code>break</code>语句可以<strong>在循环过程中直接退出循环</strong>，而<code>continue</code>语句可以<strong>提前结束本轮循环</strong>，并直接开始下一轮循环。这两个语句通常都<em>必须</em>配合<code>if</code>语句使用。</p>\n<p><em>要特别注意</em>，不要滥用<code>break</code>和<code>continue</code>语句。<code>break</code>和<code>continue</code>会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到<code>break</code>和<code>continue</code>语句，上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉<code>break</code>和<code>continue</code>语句。</p>\n<p>有些时候，如果代码写得有问题，会让程序陷入“死循环”，也就是永远循环下去。这时可以用<code>Ctrl+C</code>退出程序，或者强制结束Python进程。</p>\n<p>请试写一个死循环程序。</p>\n<h3 id=\"使用dict和set\">使用dict和set<a href=\"#使用dict和set\" title=\"使用dict和set\"></a></h3><h4 id=\"dict-\">dict {}<a href=\"#dict-\" title=\"dict {}\"></a></h4><p>Python内置了字典：<code>dict</code>的支持，<code>dict</code>全称<code>dictionary</code>，在其他语言中也称为<code>map</code>，使用<strong>键-值（key-value）存储</strong>，<strong>具有极快的查找速度</strong>。</p>\n<p>举个例子，假设要根据同学的名字查找对应的成绩，如果用list实现，需要两个list：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br><span class=\"line\">scores = [<span class=\"number\">95</span>, <span class=\"number\">75</span>, <span class=\"number\">85</span>]</span><br></pre></td></tr></table></figure><p>给定一个名字，要查找对应的成绩，就先要在names中找到对应的位置，再从scores取出对应的成绩，list越长，耗时越长。</p>\n<p>如果用dict实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用Python写一个dict如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'Michael'</span>: <span class=\"number\">95</span>, <span class=\"string\">'Bob'</span>: <span class=\"number\">75</span>, <span class=\"string\">'Tracy'</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'Michael'</span>]</span><br><span class=\"line\"><span class=\"number\">95</span></span><br></pre></td></tr></table></figure><p>为什么dict查找速度这么快？因为dict的实现原理和查字典是一样的。假设字典包含了1万个汉字，我们要查某一个字，一个办法是把字典从第一页往后翻，直到找到我们想要的字为止，这种方法就是在list中查找元素的方法，list越大，查找越慢。</p>\n<p>第二种方法是先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢。</p>\n<p>dict就是第二种实现方式，给定一个名字，比如<code>&#39;Michael&#39;</code>，dict在内部就可以直接计算出<code>Michael</code>对应的存放成绩的“页码”，也就是<code>95</code>这个数字存放的内存地址，直接取出来，所以速度非常快。</p>\n<p>你可以猜到，这种key-value存储方式，在放进去的时候，必须根据key算出value的存放位置，这样，取的时候才能根据key直接拿到value。</p>\n<p>把数据放入dict的方法，除了初始化时指定外，还可以通过key放入：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'Adam'</span>] = <span class=\"number\">67</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'Adam'</span>]</span><br><span class=\"line\"><span class=\"number\">67</span></span><br></pre></td></tr></table></figure><p>由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'Jack'</span>] = <span class=\"number\">90</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'Jack'</span>]</span><br><span class=\"line\"><span class=\"number\">90</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'Jack'</span>] = <span class=\"number\">88</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'Jack'</span>]</span><br><span class=\"line\"><span class=\"number\">88</span></span><br></pre></td></tr></table></figure><p>如果key不存在，dict就会报错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'Thomas'</span>]</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">KeyError: <span class=\"string\">'Thomas'</span></span><br></pre></td></tr></table></figure><p>要避免key不存在的错误，有两种办法，一是通过<code>in</code>判断key是否存在：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'Thomas'</span> <span class=\"keyword\">in</span> d</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure><p>二是通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.get(<span class=\"string\">'Thomas'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.get(<span class=\"string\">'Thomas'</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"number\">-1</span></span><br></pre></td></tr></table></figure><p>注意：返回<code>None</code>的时候Python的交互环境不显示结果。</p>\n<p>要删除一个key，用<code>pop(key)</code>方法，对应的value也会从dict中删除：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.pop(<span class=\"string\">'Bob'</span>)</span><br><span class=\"line\"><span class=\"number\">75</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d</span><br><span class=\"line\">&#123;<span class=\"string\">'Michael'</span>: <span class=\"number\">95</span>, <span class=\"string\">'Tracy'</span>: <span class=\"number\">85</span>&#125;</span><br></pre></td></tr></table></figure><p>请务必注意，<strong>dict内部存放的顺序和key放入的顺序是没有关系的</strong>。</p>\n<p>和list比较，dict有以下几个特点：</p>\n<ol><li>查找和插入的<strong>速度极快</strong>，不会随着key的增加而变慢；</li>\n<li>需要<strong>占用大量的内存，内存浪费多</strong>。</li>\n</ol><p>而list相反：</p>\n<ol><li>查找和插入的<strong>时间随着元素的增加</strong>而增加；</li>\n<li>占用<strong>空间小</strong>，<strong>浪费内存很少</strong>。</li>\n</ol><p>所以，dict是用<strong>空间来换取时间</strong>的一种方法。</p>\n<p>dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是<mark><strong>dict的key必须是不可变对象</strong></mark>。</p>\n<p>这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个<strong>通过key计算位置的算法称为哈希算法（Hash）。</strong></p>\n<p>要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>key = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[key] = <span class=\"string\">'a list'</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: unhashable type: <span class=\"string\">'list'</span></span><br></pre></td></tr></table></figure><h4 id=\"set\">set<a href=\"#set\" title=\"set\"></a></h4><p>set和dict类似，<strong>也是一组key的集合，但不存储value</strong>。由于key不能重复，所以，在set中，没有重复的key。</p>\n<p>要创建一个set，需要提供一个list作为输入集合：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = set([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure><p>注意，传入的参数<code>[1, 2, 3]</code>是一个list，而显示的<code>{1, 2, 3}</code>只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。。</p>\n<p>重复元素在set中自动被过滤：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = set([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure><p>通过<code>add(key)</code>方法可以添加元素到set中，可以重复添加，但不会有效果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.add(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.add(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br></pre></td></tr></table></figure><p>通过<code>remove(key)</code>方法可以删除元素：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.remove(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure><p>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s1 = set([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s2 = set([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s1 &amp; s2</span><br><span class=\"line\">&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s1 | s2</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>set和dict的唯一区别仅在于没有存储对应的value</strong>，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。试试把list放入set，看看是否会报错。</p>\n<h4 id=\"再议不可变对象\">再议不可变对象<a href=\"#再议不可变对象\" title=\"再议不可变对象\"></a></h4><p>上面我们讲了，<mark><strong>str是不变对象，而list是可变对象</strong></mark>。</p>\n<p>对于可变对象，比如list，对list进行操作，list内部的内容是会变化的，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.sort()\t//对原列表进行排序</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br></pre></td></tr></table></figure><p>而对于不可变对象，比如str，对str进行操作呢：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'abc'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.replace(<span class=\"string\">'a'</span>, <span class=\"string\">'A'</span>)\t//把字符串中的 old（旧字符串） 替换成new(新字符串)</span><br><span class=\"line\"><span class=\"string\">'Abc'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"string\">'abc'</span></span><br></pre></td></tr></table></figure><p>虽然字符串有个<code>replace()</code>方法，也确实变出了<code>&#39;Abc&#39;</code>，但变量<code>a</code>最后仍是<code>&#39;abc&#39;</code>，应该怎么理解呢？</p>\n<p>我们先把代码改成下面这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'abc'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a.replace(<span class=\"string\">'a'</span>, <span class=\"string\">'A'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\"><span class=\"string\">'Abc'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"string\">'abc'</span></span><br></pre></td></tr></table></figure><p>要始终牢记的是，<code>a</code>是变量，而<code>&#39;abc&#39;</code>才是字符串对象！有些时候，我们经常说，对象<code>a</code>的内容是<code>&#39;abc&#39;</code>，但其实是指，<code>a</code>本身是一个变量，它指向的对象的内容才是<code>&#39;abc&#39;</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌───┐                  ┌───────┐</span><br><span class=\"line\">│ a │─────────────────&gt;│ &#39;abc&#39; │</span><br><span class=\"line\">└───┘                  └───────┘</span><br></pre></td></tr></table></figure><p>当我们调用<code>a.replace(&#39;a&#39;, &#39;A&#39;)</code>时，实际上调用方法<code>replace</code>是作用在字符串对象<code>&#39;abc&#39;</code>上的，而这个方法虽然名字叫<code>replace</code>，但却没有改变字符串<code>&#39;abc&#39;</code>的内容。相反，<code>replace</code>方法创建了一个新字符串<code>&#39;Abc&#39;</code>并返回，如果我们用变量<code>b</code>指向该新字符串，就容易理解了，变量<code>a</code>仍指向原有的字符串<code>&#39;abc&#39;</code>，但变量<code>b</code>却指向新字符串<code>&#39;Abc&#39;</code>了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌───┐                  ┌───────┐</span><br><span class=\"line\">│ a │─────────────────&gt;│ &#39;abc&#39; │</span><br><span class=\"line\">└───┘                  └───────┘</span><br><span class=\"line\">┌───┐                  ┌───────┐</span><br><span class=\"line\">│ b │─────────────────&gt;│ &#39;Abc&#39; │</span><br><span class=\"line\">└───┘                  └───────┘</span><br></pre></td></tr></table></figure><p>所以，对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。</p>\n<h4 id=\"小结-4\">小结<a href=\"#小结-4\" title=\"小结\"></a></h4><p>使用<code>key-value</code>存储结构的<code>dict</code>在Python中非常有用，选择不可变对象作为key很重要，最常用的key是字符串。</p>\n<p>tuple虽然是不变对象，但试试把<code>(1, 2, 3)</code>和<code>(1, [2, 3])</code>放入dict或set中，并解释结果。</p>\n<h2 id=\"函数\">函数<a href=\"#函数\" title=\"函数\"></a></h2><p>我们知道圆的面积计算公式为：</p>\n<p>S = πr<sup>2</sup></p>\n<p>当我们知道半径<code>r</code>的值时，就可以根据公式计算出面积。假设我们需要计算3个不同大小的圆的面积：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r1 = <span class=\"number\">12.34</span></span><br><span class=\"line\">r2 = <span class=\"number\">9.08</span></span><br><span class=\"line\">r3 = <span class=\"number\">73.1</span></span><br><span class=\"line\">s1 = <span class=\"number\">3.14</span> * r1 * r1</span><br><span class=\"line\">s2 = <span class=\"number\">3.14</span> * r2 * r2</span><br><span class=\"line\">s3 = <span class=\"number\">3.14</span> * r3 * r3</span><br></pre></td></tr></table></figure><p>当代码出现有规律的重复的时候，你就需要当心了，每次写<code>3.14 * x * x</code>不仅很麻烦，而且，如果要把<code>3.14</code>改成<code>3.14159265359</code>的时候，得全部替换。</p>\n<p>有了函数，我们就不再每次写<code>s = 3.14 * x * x</code>，而是写成更有意义的函数调用<code>s = area_of_circle(x)</code>，而函数<code>area_of_circle</code>本身只需要写一次，就可以多次调用。</p>\n<p>基本上所有的高级语言都支持函数，Python也不例外。Python不但能非常灵活地定义函数，而且本身内置了很多有用的函数，可以直接调用。</p>\n<p><strong>抽象</strong></p>\n<p>抽象是数学中非常常见的概念。举个例子：</p>\n<p>计算数列的和，比如：<code>1 + 2 + 3 + ... + 100</code>，写起来十分不方便，于是数学家发明了求和符号∑，可以把<code>1 + 2 + 3 + ... + 100</code>记作：<br>$$<br>\\sum_{n=1}^{100}<br>$$<br>这种抽象记法非常强大，因为我们看到 ∑ 就可以理解成求和，而不是还原成低级的加法运算。</p>\n<p>而且，这种抽象记法是可扩展的，比如：<br>$$<br>\\sum_{n=1}^{100}(n^2+1)<br>$$<br>还原成加法运算就变成了：</p>\n<p>(1 x 1 + 1) + (2 x 2 + 1) + (3 x 3 + 1) + … + (100 x 100 + 1)</p>\n<p>可见，借助抽象，我们才能不关心底层的具体计算过程，而直接在更高的层次上思考问题。</p>\n<p>写计算机程序也是一样，函数就是最基本的一种代码抽象的方式。</p>\n<h3 id=\"调用函数\">调用函数<a href=\"#调用函数\" title=\"调用函数\"></a></h3><p>Python内置了很多有用的函数，我们可以直接调用。</p>\n<p>要调用一个函数，需要知道函数的名称和参数，比如求绝对值的函数<code>abs</code>，只有一个参数。可以直接从Python的官方网站查看文档：</p>\n<p><a href=\"http://docs.python.org/3/library/functions.html#abs\" target=\"_blank\">http://docs.python.org/3/library/functions.html#abs</a></p>\n<p>也可以在交互式命令行通过<code>help(abs)</code>查看<code>abs</code>函数的帮助信息。</p>\n<p>调用<code>abs</code>函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>abs(<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>abs(<span class=\"number\">-20</span>)</span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>abs(<span class=\"number\">12.34</span>)</span><br><span class=\"line\"><span class=\"number\">12.34</span></span><br></pre></td></tr></table></figure><p>调用函数的时候，如果传入的参数数量不对，会报<code>TypeError</code>的错误，并且Python会明确地告诉你：<code>abs()</code>有且仅有1个参数，但给出了两个：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>abs(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: abs() takes exactly one argument (<span class=\"number\">2</span> given)</span><br></pre></td></tr></table></figure><p>如果传入的参数数量是对的，但参数类型不能被函数所接受，也会报<code>TypeError</code>的错误，并且给出错误信息：<code>str</code>是错误的参数类型：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>abs(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: bad operand type <span class=\"keyword\">for</span> abs(): <span class=\"string\">'str'</span></span><br></pre></td></tr></table></figure><p>而<code>max</code>函数<code>max()</code><strong>可以接收任意多个参数，并返回最大的那个</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>max(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>max(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">-5</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure><h4 id=\"数据类型转换\">数据类型转换<a href=\"#数据类型转换\" title=\"数据类型转换\"></a></h4><p>Python内置的常用函数还包括数据类型转换函数，比如<code>int()</code>函数可以把其他数据类型转换为整数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int(<span class=\"string\">'123'</span>)</span><br><span class=\"line\"><span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int(<span class=\"number\">12.34</span>)</span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>float(<span class=\"string\">'12.34'</span>)</span><br><span class=\"line\"><span class=\"number\">12.34</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str(<span class=\"number\">1.23</span>)</span><br><span class=\"line\"><span class=\"string\">'1.23'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str(<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"string\">'100'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bool(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bool(<span class=\"string\">''</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure><p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“<strong>别名</strong>”：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = abs <span class=\"comment\"># 变量a指向abs函数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a(<span class=\"number\">-1</span>) <span class=\"comment\"># 所以也可以通过a调用abs函数</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure><h4 id=\"小结-5\">小结<a href=\"#小结-5\" title=\"小结\"></a></h4><p>调用Python的函数，需要根据函数定义，传入正确的参数。如果函数调用出错，一定要学会看错误信息，所以英文很重要！</p>\n<h3 id=\"定义函数\">定义函数<a href=\"#定义函数\" title=\"定义函数\"></a></h3><p>在Python中，定义一个函数要使用<code>def</code>语句，依次写出<strong>函数名</strong>、括号、括号中的<strong>参数</strong>和冒号<code>:</code>，然后，在缩进块中编写函数体，函数的返回值用<code>return</code>语句返回。</p>\n<p>我们以自定义一个求绝对值的<code>my_abs</code>函数为例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_abs</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -x</span><br></pre></td></tr></table></figure><p>请注意，函数体内部的语句在执行时，一旦执行到<code>return</code>时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。</p>\n<p>如果没有<code>return</code>语句，函数执行完毕后也会返回结果，只是结果为<code>None</code>。<code>return None</code>可以简写为<code>return</code>。</p>\n<p>在Python交互环境中定义函数时，注意Python会出现<code>...</code>的提示。函数定义结束后需要按两次回车重新回到<code>&gt;&gt;&gt;</code>提示符下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌────────────────────────────────────────────────────────┐</span><br><span class=\"line\">│Command Prompt - python                           - □ x │</span><br><span class=\"line\">├────────────────────────────────────────────────────────┤</span><br><span class=\"line\">│&gt;&gt;&gt; def my_abs(x):                                      │</span><br><span class=\"line\">│...     if x &gt;&#x3D; 0:                                      │</span><br><span class=\"line\">│...         return x                                    │</span><br><span class=\"line\">│...     else:                                           │</span><br><span class=\"line\">│...         return -x                                   │</span><br><span class=\"line\">│...                                                     │</span><br><span class=\"line\">│&gt;&gt;&gt; my_abs(-9)                                          │</span><br><span class=\"line\">│9                                                       │</span><br><span class=\"line\">│&gt;&gt;&gt; _                                                   │</span><br><span class=\"line\">│                                                        │</span><br><span class=\"line\">│                                                        │</span><br><span class=\"line\">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>如果你已经把<code>my_abs()</code>的函数定义保存为<code>abstest.py</code>文件了，那么，可以在该文件的当前目录下启动Python解释器，用<code>from abstest import my_abs</code>来导入<code>my_abs()</code>函数，注意<code>abstest</code>是文件名（不含<code>.py</code>扩展名）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌────────────────────────────────────────────────────────┐</span><br><span class=\"line\">│Command Prompt - python                           - □ x │</span><br><span class=\"line\">├────────────────────────────────────────────────────────┤</span><br><span class=\"line\">│&gt;&gt;&gt; from abstest import my_abs                          │</span><br><span class=\"line\">│&gt;&gt;&gt; my_abs(-9)                                          │</span><br><span class=\"line\">│9                                                       │</span><br><span class=\"line\">│&gt;&gt;&gt; _                                                   │</span><br><span class=\"line\">│                                                        │</span><br><span class=\"line\">│                                                        │</span><br><span class=\"line\">│                                                        │</span><br><span class=\"line\">│                                                        │</span><br><span class=\"line\">│                                                        │</span><br><span class=\"line\">│                                                        │</span><br><span class=\"line\">│                                                        │</span><br><span class=\"line\">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p><code>import</code>的用法在后续<a href=\"https://www.liaoxuefeng.com/wiki/1016959663602400/1017454145014176\" target=\"_blank\">模块</a>一节中会详细介绍。</p>\n<h4 id=\"空函数\">空函数<a href=\"#空函数\" title=\"空函数\"></a></h4><p>如果想定义一个什么事也不做的空函数，可以用<code>pass</code>语句：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nop</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><p><code>pass</code>语句什么都不做，那有什么用？<strong>实际上<code>pass</code>可以用来作为占位符</strong>，比如现在还没想好怎么写函数的代码，就可以先放一个<code>pass</code>，让代码能运行起来。</p>\n<p><code>pass</code>还可以用在其他语句里，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><p>缺少了<code>pass</code>，代码运行就会有语法错误。</p>\n<h4 id=\"参数检查\">参数检查<a href=\"#参数检查\" title=\"参数检查\"></a></h4><p>调用函数时，如果参数个数不对，Python解释器会自动检查出来，并抛出<code>TypeError</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_abs(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: my_abs() takes <span class=\"number\">1</span> positional argument but <span class=\"number\">2</span> were given</span><br></pre></td></tr></table></figure><p>但是如果参数类型不对，Python解释器就无法帮我们检查。试试<code>my_abs</code>和内置函数<code>abs</code>的差别：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_abs(<span class=\"string\">'A'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">2</span>, <span class=\"keyword\">in</span> my_abs</span><br><span class=\"line\">TypeError: unorderable types: str() &gt;= int()</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>abs(<span class=\"string\">'A'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: bad operand type <span class=\"keyword\">for</span> abs(): <span class=\"string\">'str'</span></span><br></pre></td></tr></table></figure><p>当传入了不恰当的参数时，内置函数<code>abs</code>会检查出参数错误，而我们定义的<code>my_abs</code>没有参数检查，会导致<code>if</code>语句出错，出错信息和<code>abs</code>不一样。所以，这个函数定义不够完善。</p>\n<p>让我们修改一下<code>my_abs</code>的定义，对参数类型做检查，只允许整数和浮点数类型的参数。<strong>数据类型检查可以用内置函数<code>isinstance()</code>实现</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_abs</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(x, (int, float)):</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">'bad operand type'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -x</span><br></pre></td></tr></table></figure><p>添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_abs(<span class=\"string\">'A'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">3</span>, <span class=\"keyword\">in</span> my_abs</span><br><span class=\"line\">TypeError: bad operand type</span><br></pre></td></tr></table></figure><p>错误和异常处理将在后续讲到。</p>\n<h4 id=\"返回多个值\">返回多个值<a href=\"#返回多个值\" title=\"返回多个值\"></a></h4><p>函数可以返回多个值吗？答案是肯定的。</p>\n<p>比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span><span class=\"params\">(x, y, step, angle=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">    nx = x + step * math.cos(angle)</span><br><span class=\"line\">    ny = y - step * math.sin(angle)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nx, ny</span><br></pre></td></tr></table></figure><p><strong><code>import math</code>语句表示导入<code>math</code>包</strong>，并允许后续代码引用<code>math</code>包里的<code>sin</code>、<code>cos</code>等函数。</p>\n<p>然后，我们就可以同时获得返回值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x, y = move(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, math.pi / <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(x, y)</span><br><span class=\"line\"><span class=\"number\">151.96152422706632</span> <span class=\"number\">70.0</span></span><br></pre></td></tr></table></figure><p>但其实这只是一种假象，Python函数返回的仍然是单一值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = move(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, math.pi / <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(r)</span><br><span class=\"line\">(<span class=\"number\">151.96152422706632</span>, <span class=\"number\">70.0</span>)</span><br></pre></td></tr></table></figure><p><strong>原来返回值是一个tuple！</strong>但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，<mark><strong>Python的函数返回多值其实就是返回一个tuple</strong></mark>，但写起来更方便。</p>\n<h4 id=\"小结-6\">小结<a href=\"#小结-6\" title=\"小结\"></a></h4><p>定义函数时，需要确定函数名和参数个数；</p>\n<p><strong>如果有必要，可以先对参数的数据类型做检查；</strong></p>\n<p>函数体内部可以用<code>return</code>随时返回函数结果；</p>\n<p>函数执行完毕也没有<code>return</code>语句时，自动<code>return None</code>。</p>\n<p><strong>函数可以同时返回多个值，但其实就是一个tuple。</strong></p>\n<h3 id=\"函数的参数\">函数的参数<a href=\"#函数的参数\" title=\"函数的参数\"></a></h3><p>定义函数的时候，我们把参数的名字和位置确定下来，函数的接口定义就完成了。对于函数的调用者来说，只需要知道如何传递正确的参数，以及函数将返回什么样的值就够了，函数内部的复杂逻辑被封装起来，调用者无需了解。</p>\n<p>Python的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。</p>\n<h4 id=\"位置参数\">位置参数<a href=\"#位置参数\" title=\"位置参数\"></a></h4><p>我们先写一个计算x2的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">power</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * x</span><br></pre></td></tr></table></figure><p>对于<code>power(x)</code>函数，参数<code>x</code>就是一个位置参数。</p>\n<p>当我们调用<code>power</code>函数时，必须传入有且仅有的一个参数<code>x</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>power(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>power(<span class=\"number\">15</span>)</span><br><span class=\"line\"><span class=\"number\">225</span></span><br></pre></td></tr></table></figure><p>现在，如果我们要计算x<sup>3</sup>怎么办？可以再定义一个<code>power3</code>函数，但是如果要计算x<sup>4</sup>、x<sup>5</sup>……怎么办？我们不可能定义无限多个函数。</p>\n<p>你也许想到了，可以把<code>power(x)</code>修改为<code>power(x, n)</code>，用来计算x<sup>n</sup>，说干就干：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">power</span><span class=\"params\">(x, n)</span>:</span></span><br><span class=\"line\">    s = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        n = n - <span class=\"number\">1</span></span><br><span class=\"line\">        s = s * x</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br></pre></td></tr></table></figure><p>对于这个修改后的<code>power(x, n)</code>函数，可以计算任意n次方：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>power(<span class=\"number\">5</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>power(<span class=\"number\">5</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">125</span></span><br></pre></td></tr></table></figure><p>修改后的<code>power(x, n)</code>函数有两个参数：<code>x</code>和<code>n</code>，这两个参数都是位置参数，调用函数时，传入的两个值按照位置顺序依次赋给参数<code>x</code>和<code>n</code>。</p>\n<h4 id=\"默认参数\">默认参数<a href=\"#默认参数\" title=\"默认参数\"></a></h4><p>新的<code>power(x, n)</code>函数定义没有问题，但是，旧的调用代码失败了，原因是我们增加了一个参数，导致旧的代码因为缺少一个参数而无法正常调用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>power(<span class=\"number\">5</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: power() missing <span class=\"number\">1</span> required positional argument: <span class=\"string\">'n'</span></span><br></pre></td></tr></table></figure><p>Python的错误信息很明确：调用函数<code>power()</code>缺少了一个位置参数<code>n</code>。</p>\n<p>这个时候，默认参数就排上用场了。由于我们经常计算x<sup>2</sup>，所以，完全可以把第二个参数n的默认值设定为2：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">power</span><span class=\"params\">(x, n=<span class=\"number\">2</span>)</span>:</span></span><br><span class=\"line\">    s = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        n = n - <span class=\"number\">1</span></span><br><span class=\"line\">        s = s * x</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br></pre></td></tr></table></figure><p>这样，当我们调用<code>power(5)</code>时，相当于调用<code>power(5, 2)</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>power(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>power(<span class=\"number\">5</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">25</span></span><br></pre></td></tr></table></figure><p>而对于<code>n &gt; 2</code>的其他情况，就必须明确地传入n，比如<code>power(5, 3)</code>。</p>\n<p>从上面的例子可以看出，默认参数可以简化函数的调用。设置默认参数时，有几点要注意：</p>\n<p><strong>一是必选参数在前，默认参数在后，否则Python的解释器会报错</strong>（思考一下为什么默认参数不能放在必选参数前面）；</p>\n<p><strong>二是如何设置默认参数</strong>。</p>\n<p>当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。</p>\n<p>使用默认参数有什么好处？最大的好处是能降低调用函数的难度。</p>\n<p>举个例子，我们写个一年级小学生注册的函数，需要传入<code>name</code>和<code>gender</code>两个参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">enroll</span><span class=\"params\">(name, gender)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'name:'</span>, name)</span><br><span class=\"line\">    print(<span class=\"string\">'gender:'</span>, gender)</span><br></pre></td></tr></table></figure><p>这样，调用<code>enroll()</code>函数只需要传入两个参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>enroll(<span class=\"string\">'Sarah'</span>, <span class=\"string\">'F'</span>)</span><br><span class=\"line\">name: Sarah</span><br><span class=\"line\">gender: F</span><br></pre></td></tr></table></figure><p>如果要继续传入年龄、城市等信息怎么办？这样会使得调用函数的复杂度大大增加。</p>\n<p>我们可以把年龄和城市设为默认参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">enroll</span><span class=\"params\">(name, gender, age=<span class=\"number\">6</span>, city=<span class=\"string\">'Beijing'</span>)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'name:'</span>, name)</span><br><span class=\"line\">    print(<span class=\"string\">'gender:'</span>, gender)</span><br><span class=\"line\">    print(<span class=\"string\">'age:'</span>, age)</span><br><span class=\"line\">    print(<span class=\"string\">'city:'</span>, city)</span><br></pre></td></tr></table></figure><p>这样，大多数学生注册时不需要提供年龄和城市，只提供必须的两个参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>enroll(<span class=\"string\">'Sarah'</span>, <span class=\"string\">'F'</span>)</span><br><span class=\"line\">name: Sarah</span><br><span class=\"line\">gender: F</span><br><span class=\"line\">age: <span class=\"number\">6</span></span><br><span class=\"line\">city: Beijing</span><br></pre></td></tr></table></figure><p>只有与默认参数不符的学生才需要提供额外的信息：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enroll(<span class=\"string\">'Bob'</span>, <span class=\"string\">'M'</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\">enroll(<span class=\"string\">'Adam'</span>, <span class=\"string\">'M'</span>, city=<span class=\"string\">'Tianjin'</span>)</span><br></pre></td></tr></table></figure><p>可见，默认参数降低了函数调用的难度，而一旦需要更复杂的调用时，又可以传递更多的参数来实现。无论是简单调用还是复杂调用，函数只需要定义一个。</p>\n<p>有多个默认参数时，调用的时候，既可以按顺序提供默认参数，比如调用<code>enroll(&#39;Bob&#39;, &#39;M&#39;, 7)</code>，意思是，除了<code>name</code>，<code>gender</code>这两个参数外，最后1个参数应用在参数<code>age</code>上，<code>city</code>参数由于没有提供，仍然使用默认值。</p>\n<p>也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。比如调用<code>enroll(&#39;Adam&#39;, &#39;M&#39;, city=&#39;Tianjin&#39;)</code>，意思是，<code>city</code>参数用传进去的值，其他默认参数继续使用默认值。</p>\n<p>默认参数很有用，但使用不当，也会掉坑里。<mark><strong>默认参数有个最大的坑</strong></mark>，演示如下：</p>\n<p>先定义一个函数，传入一个list，添加一个<code>END</code>再返回：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_end</span><span class=\"params\">(L=[])</span>:</span></span><br><span class=\"line\">    L.append(<span class=\"string\">'END'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L</span><br></pre></td></tr></table></figure><p>当你正常调用时，结果似乎不错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add_end([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">'END'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add_end([<span class=\"string\">'x'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'z'</span>])</span><br><span class=\"line\">[<span class=\"string\">'x'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'z'</span>, <span class=\"string\">'END'</span>]</span><br></pre></td></tr></table></figure><p>当你使用默认参数调用时，一开始结果也是对的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add_end()</span><br><span class=\"line\">[<span class=\"string\">'END'</span>]</span><br></pre></td></tr></table></figure><p>但是，再次调用<code>add_end()</code>时，结果就不对了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add_end()</span><br><span class=\"line\">[<span class=\"string\">'END'</span>, <span class=\"string\">'END'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add_end()</span><br><span class=\"line\">[<span class=\"string\">'END'</span>, <span class=\"string\">'END'</span>, <span class=\"string\">'END'</span>]</span><br></pre></td></tr></table></figure><p>很多初学者很疑惑，默认参数是<code>[]</code>，但是函数似乎每次都“记住了”上次添加了<code>&#39;END&#39;</code>后的list。</p>\n<p><strong>原因解释如下：</strong></p>\n<p>Python函数在定义的时候，默认参数<code>L</code>的值就被计算出来了，即<code>[]</code>，因为默认参数<code>L</code>也是一个变量，它指向对象<code>[]</code>，<strong>每次调用该函数，如果改变了<code>L</code>的内容，则下次调用时，默认参数的内容就变了</strong>，不再是函数定义时的<code>[]</code>了。</p>\n<p class='div-border red'><b>定义默认参数要牢记一点：默认参数必须指向<u>不变对象</u>！</b></p><p>要修改上面的例子，我们可以用<code>None</code>这个不变对象来实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_end</span><span class=\"params\">(L=None)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> L <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        L = []</span><br><span class=\"line\">    L.append(<span class=\"string\">'END'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L</span><br></pre></td></tr></table></figure><p>现在，无论调用多少次，都不会有问题：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add_end()</span><br><span class=\"line\">[<span class=\"string\">'END'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add_end()</span><br><span class=\"line\">[<span class=\"string\">'END'</span>]</span><br></pre></td></tr></table></figure><p>为什么要设计<code>str</code>、<code>None</code>这样的不变对象呢？<strong>因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。</strong>此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。</p>\n<h4 id=\"可变参数\">可变参数<a href=\"#可变参数\" title=\"可变参数\"></a></h4><p>在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。</p>\n<p>我们以数学题为例子，给定一组数字a，b，c……，请计算a<sup>2</sup> + b<sup>2</sup> + c<sup>2</sup> + ……。</p>\n<p>要定义出这个函数，我们必须确定输入的参数。由于参数个数不确定，我们首先想到可以把a，b，c……作为一个list或tuple传进来，这样，函数可以定义如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc</span><span class=\"params\">(numbers)</span>:</span>\t\t//不可变参数</span><br><span class=\"line\">    sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">        sum = sum + n * n</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br></pre></td></tr></table></figure><p>但是调用的时候，需要先组装出一个list或tuple：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>calc([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>calc((<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>))</span><br><span class=\"line\"><span class=\"number\">84</span></span><br></pre></td></tr></table></figure><p>如果利用可变参数，调用函数的方式可以简化成这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>calc(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)\t</span><br><span class=\"line\"><span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>calc(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"number\">84</span>\t</span><br><span class=\"line\">↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br></pre></td></tr></table></figure><p>所以，我们把函数的参数改为可变参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc</span><span class=\"params\">(*numbers)</span>:</span>\t\t//加*把list或tuple的元素变成可变参数传进去</span><br><span class=\"line\">    sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">        sum = sum + n * n</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br></pre></td></tr></table></figure><p>定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个<code>*</code>号。在函数内部，参数<code>numbers</code>接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>calc(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>calc()</span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure><p>如果已经有一个list或者tuple，要调用一个可变参数怎么办？可以这样做：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nums = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>calc(nums[<span class=\"number\">0</span>], nums[<span class=\"number\">1</span>], nums[<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"number\">14</span></span><br></pre></td></tr></table></figure><p>这种写法当然是可行的，问题是太繁琐，所以<strong>Python允许你在list或tuple前面加一个<code>*</code>号，把list或tuple的元素变成可变参数传进去：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nums = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>calc(*nums)\t\t//把list或tuple的元素变成可变参数传进去</span><br><span class=\"line\"><span class=\"number\">14</span></span><br></pre></td></tr></table></figure><p><mark><strong><code>*nums</code>表示把<code>nums</code>这个list的所有元素作为可变参数传进去</strong></mark>。这种写法相当有用，而且很常见。</p>\n<h4 id=\"关键字参数\">关键字参数<a href=\"#关键字参数\" title=\"关键字参数\"></a></h4><p><strong>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple</strong>。而关键字参数允许你传入0个或任意个含参数名的参数，这些<strong>关键字参数在函数内部自动组装为一个<code>dict</code></strong>。请看示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, **kw)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'name:'</span>, name, <span class=\"string\">'age:'</span>, age, <span class=\"string\">'other:'</span>, kw)</span><br></pre></td></tr></table></figure><p>函数<code>person</code>除了必选参数<code>name</code>和<code>age</code>外，还接受<font color=\"red\"><strong>关键字参数<code>kw</code></strong></font>。在调用该函数时，可以只传入必选参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Michael'</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">name: Michael age: <span class=\"number\">30</span> other: &#123;&#125;</span><br></pre></td></tr></table></figure><p>也可以传入任意个数的<strong>关键字参数</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Bob'</span>, <span class=\"number\">35</span>, city=<span class=\"string\">'Beijing'</span>)</span><br><span class=\"line\">name: Bob age: <span class=\"number\">35</span> other: &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>&#125;</span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Adam'</span>, <span class=\"number\">45</span>, gender=<span class=\"string\">'M'</span>, job=<span class=\"string\">'Engineer'</span>)</span><br><span class=\"line\">name: Adam age: <span class=\"number\">45</span> other: &#123;<span class=\"string\">'gender'</span>: <span class=\"string\">'M'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>关键字参数有什么用？它可以扩展函数的功能。</strong>比如，在<code>person</code>函数里，我们保证能接收到<code>name</code>和<code>age</code>这两个参数，但是，如果调用者愿意提供<strong>更多的参数，我们也能收到</strong>。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。</p>\n<p>和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>extra = &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Jack'</span>, <span class=\"number\">24</span>, city=extra[<span class=\"string\">'city'</span>], job=extra[<span class=\"string\">'job'</span>])</span><br><span class=\"line\">name: Jack age: <span class=\"number\">24</span> other: &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure><p>当然，上面复杂的调用可以用简化的写法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>extra = &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Jack'</span>, <span class=\"number\">24</span>, **extra)</span><br><span class=\"line\">name: Jack age: <span class=\"number\">24</span> other: &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>`</strong>extra<code>表示把</code>extra<code>这个dict的所有key-value用关键字参数传入到函数的</code><strong>kw`参数</strong>，<code>kw</code>将获得一个dict，注意<code>kw</code>获得的dict是<code>extra</code>的一份拷贝，对<code>kw</code>的改动不会影响到函数外的<code>extra</code>。</p>\n<h4 id=\"命名关键字参数\">命名关键字参数<a href=\"#命名关键字参数\" title=\"命名关键字参数\"></a></h4><p>对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。至于到底传入了哪些，就需要在函数内部通过<code>kw</code>检查。</p>\n<p>仍以<code>person()</code>函数为例，我们希望检查是否有<code>city</code>和<code>job</code>参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, **kw)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'city'</span> <span class=\"keyword\">in</span> kw:</span><br><span class=\"line\">        <span class=\"comment\"># 有city参数</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'job'</span> <span class=\"keyword\">in</span> kw:</span><br><span class=\"line\">        <span class=\"comment\"># 有job参数</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    print(<span class=\"string\">'name:'</span>, name, <span class=\"string\">'age:'</span>, age, <span class=\"string\">'other:'</span>, kw)</span><br></pre></td></tr></table></figure><p>但是调用者仍可以传入不受限制的关键字参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Jack'</span>, <span class=\"number\">24</span>, city=<span class=\"string\">'Beijing'</span>, addr=<span class=\"string\">'Chaoyang'</span>, zipcode=<span class=\"number\">123456</span>)</span><br></pre></td></tr></table></figure><p>如果要限制关键字参数的名字，就可以用<strong>命名关键字参数</strong>，例如，只接收<code>city</code>和<code>job</code>作为关键字参数。这种方式定义的函数如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, *, city, job)</span>:</span></span><br><span class=\"line\">    print(name, age, city, job)</span><br></pre></td></tr></table></figure><p>和关键字参数<code>**kw</code>不同，命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。</p>\n<p>调用方式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Jack'</span>, <span class=\"number\">24</span>, city=<span class=\"string\">'Beijing'</span>, job=<span class=\"string\">'Engineer'</span>)</span><br><span class=\"line\">Jack <span class=\"number\">24</span> Beijing Engineer</span><br></pre></td></tr></table></figure><p>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符<code>*</code>了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, *args, city, job)</span>:</span></span><br><span class=\"line\">    print(name, age, args, city, job)</span><br></pre></td></tr></table></figure><p>命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Jack'</span>, <span class=\"number\">24</span>, <span class=\"string\">'Beijing'</span>, <span class=\"string\">'Engineer'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: person() takes <span class=\"number\">2</span> positional arguments but <span class=\"number\">4</span> were given</span><br></pre></td></tr></table></figure><p>由于调用时缺少参数名<code>city</code>和<code>job</code>，Python解释器把这4个参数均视为位置参数，但<code>person()</code>函数仅接受2个位置参数。</p>\n<p>命名关键字参数可以有缺省值，从而简化调用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, *, city=<span class=\"string\">'Beijing'</span>, job)</span>:</span></span><br><span class=\"line\">    print(name, age, city, job)</span><br></pre></td></tr></table></figure><p>由于命名关键字参数<code>city</code>具有默认值，调用时，可不传入<code>city</code>参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Jack'</span>, <span class=\"number\">24</span>, job=<span class=\"string\">'Engineer'</span>)</span><br><span class=\"line\">Jack <span class=\"number\">24</span> Beijing Engineer</span><br></pre></td></tr></table></figure><p>使用命名关键字参数时，要特别注意，<strong>如果没有可变参数，就必须加一个<code>*</code>作为特殊分隔符。如果缺少<code>*</code>，Python解释器将无法识别<u>位置参数</u>和<u>命名关键字参数</u></strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, city, job)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 缺少 *，city和job被视为位置参数</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><h4 id=\"参数组合\">参数组合<a href=\"#参数组合\" title=\"参数组合\"></a></h4><p>在Python中定义函数，可以用<strong>必选参数</strong>、<strong>默认参数</strong>、<strong>可变参数</strong>、<strong>关键字参数</strong>和<strong>命名关键字参数</strong>，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</p>\n<p>比如定义一个函数，包含上述若干种参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">(a, b, c=<span class=\"number\">0</span>, *args, **kw)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'a ='</span>, a, <span class=\"string\">'b ='</span>, b, <span class=\"string\">'c ='</span>, c, <span class=\"string\">'args ='</span>, args, <span class=\"string\">'kw ='</span>, kw)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">(a, b, c=<span class=\"number\">0</span>, *, d, **kw)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'a ='</span>, a, <span class=\"string\">'b ='</span>, b, <span class=\"string\">'c ='</span>, c, <span class=\"string\">'d ='</span>, d, <span class=\"string\">'kw ='</span>, kw)</span><br></pre></td></tr></table></figure><p>在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">a = <span class=\"number\">1</span> b = <span class=\"number\">2</span> c = <span class=\"number\">0</span> args = () kw = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1(<span class=\"number\">1</span>, <span class=\"number\">2</span>, c=<span class=\"number\">3</span>)</span><br><span class=\"line\">a = <span class=\"number\">1</span> b = <span class=\"number\">2</span> c = <span class=\"number\">3</span> args = () kw = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>)</span><br><span class=\"line\">a = <span class=\"number\">1</span> b = <span class=\"number\">2</span> c = <span class=\"number\">3</span> args = (<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>) kw = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, x=<span class=\"number\">99</span>)</span><br><span class=\"line\">a = <span class=\"number\">1</span> b = <span class=\"number\">2</span> c = <span class=\"number\">3</span> args = (<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>) kw = &#123;<span class=\"string\">'x'</span>: <span class=\"number\">99</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f2(<span class=\"number\">1</span>, <span class=\"number\">2</span>, d=<span class=\"number\">99</span>, ext=<span class=\"literal\">None</span>)</span><br><span class=\"line\">a = <span class=\"number\">1</span> b = <span class=\"number\">2</span> c = <span class=\"number\">0</span> d = <span class=\"number\">99</span> kw = &#123;<span class=\"string\">'ext'</span>: <span class=\"literal\">None</span>&#125;</span><br></pre></td></tr></table></figure><p>最神奇的是通过一个tuple和dict，你也可以调用上述函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>args = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>kw = &#123;<span class=\"string\">'d'</span>: <span class=\"number\">99</span>, <span class=\"string\">'x'</span>: <span class=\"string\">'#'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1(*args, **kw)</span><br><span class=\"line\">a = <span class=\"number\">1</span> b = <span class=\"number\">2</span> c = <span class=\"number\">3</span> args = (<span class=\"number\">4</span>,) kw = &#123;<span class=\"string\">'d'</span>: <span class=\"number\">99</span>, <span class=\"string\">'x'</span>: <span class=\"string\">'#'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>args = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>kw = &#123;<span class=\"string\">'d'</span>: <span class=\"number\">88</span>, <span class=\"string\">'x'</span>: <span class=\"string\">'#'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f2(*args, **kw)</span><br><span class=\"line\">a = <span class=\"number\">1</span> b = <span class=\"number\">2</span> c = <span class=\"number\">3</span> d = <span class=\"number\">88</span> kw = &#123;<span class=\"string\">'x'</span>: <span class=\"string\">'#'</span>&#125;</span><br></pre></td></tr></table></figure><p>所以，对于任意函数，都可以通过类似<code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的。</p>\n<p class='div-border red'><b>虽然可以组合多达5种参数，但不要同时使用太多的组合，否则函数接口的可理解性很差。</b></p><h4 id=\"小结-7\">小结<a href=\"#小结-7\" title=\"小结\"></a></h4><p>Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。</p>\n<p>默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！</p>\n<p>要注意定义可变参数和关键字参数的语法：</p>\n<p><font color=\"blue\"><b><code>*args</code>是<strong>可变参数</strong>，args接收的是一个tuple；</b></font></p>\n<p><font color=\"blue\"><b><code>**kw</code>是<strong>关键字参数</strong>，kw接收的是一个dict。</b></font></p>\n<p>以及调用函数时如何传入可变参数和关键字参数的语法：</p>\n<p><strong>可变参数</strong>既可以直接传入：<code>func(1, 2, 3)</code>，又可以先组装list或tuple，再通过<code>*args</code>传入：<code>func(*(1, 2, 3))</code>；</p>\n<p><strong>关键字参数</strong>既可以直接传入：<code>func(a=1, b=2)</code>，又可以先组装dict，再通过<code>**kw</code>传入：<code>func(**{&#39;a&#39;: 1, &#39;b&#39;: 2})</code>。</p>\n<p>使用<code>*args</code>和<code>**kw</code>是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。</p>\n<p>命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。</p>\n<p>定义<strong>命名的关键字</strong>参数在没有可变参数的情况下不要忘了写分隔符<code>*</code>，否则定义的将是位置参数。</p>\n<h3 id=\"递归函数\">递归函数<a href=\"#递归函数\" title=\"递归函数\"></a></h3>","prev":{"title":"python主要函数","link":"posts/d8c26074"},"next":{"title":"计算机四级网络工程师思维导图--常考重点","link":"posts/b384d89a"},"plink":"https://dxsummer.gitee.io/posts/99832f47/","toc":[{"id":"第一个python程序","title":"第一个Python程序","index":"1","children":[{"id":"输入、输出","title":"输入、输出","index":"1.1","children":[{"id":"输出","title":"输出","index":"1.1.1"},{"id":"输入","title":"输入","index":"1.1.2"}]}]},{"id":"python基础","title":"Python基础","index":"2","children":[{"id":"数据类型和变量","title":"数据类型和变量","index":"2.1","children":[{"id":"整数","title":"整数","index":"2.1.1"},{"id":"浮点数","title":"浮点数","index":"2.1.2"},{"id":"字符串","title":"字符串","index":"2.1.3"},{"id":"布尔值","title":"布尔值","index":"2.1.4"},{"id":"空值","title":"空值","index":"2.1.5"},{"id":"变量","title":"变量","index":"2.1.6"},{"id":"常量","title":"常量","index":"2.1.7"},{"id":"小结","title":"小结","index":"2.1.8"}]},{"id":"字符串和编码","title":"字符串和编码","index":"2.2","children":[{"id":"字符编码","title":"字符编码","index":"2.2.1"},{"id":"python的字符串","title":"Python的字符串","index":"2.2.2"},{"id":"格式化","title":"格式化","index":"2.2.3"},{"id":"小结-1","title":"小结","index":"2.2.4"}]},{"id":"使用list和tuple","title":"使用list和tuple","index":"2.3","children":[{"id":"list列表-","title":"list列表 []","index":"2.3.1"},{"id":"tuple元组-","title":"tuple元组 ()","index":"2.3.2"}]},{"id":"条件判断","title":"条件判断","index":"2.4","children":[{"id":"再议-input","title":"再议 input","index":"2.4.1"},{"id":"小结-2","title":"小结","index":"2.4.2"}]},{"id":"循环","title":"循环","index":"2.5","children":[{"id":"break","title":"break","index":"2.5.1"},{"id":"continue","title":"continue","index":"2.5.2"},{"id":"小结-3","title":"小结","index":"2.5.3"}]},{"id":"使用dict和set","title":"使用dict和set","index":"2.6","children":[{"id":"dict-","title":"dict {}","index":"2.6.1"},{"id":"set","title":"set","index":"2.6.2"},{"id":"再议不可变对象","title":"再议不可变对象","index":"2.6.3"},{"id":"小结-4","title":"小结","index":"2.6.4"}]}]},{"id":"函数","title":"函数","index":"3","children":[{"id":"调用函数","title":"调用函数","index":"3.1","children":[{"id":"数据类型转换","title":"数据类型转换","index":"3.1.1"},{"id":"小结-5","title":"小结","index":"3.1.2"}]},{"id":"定义函数","title":"定义函数","index":"3.2","children":[{"id":"空函数","title":"空函数","index":"3.2.1"},{"id":"参数检查","title":"参数检查","index":"3.2.2"},{"id":"返回多个值","title":"返回多个值","index":"3.2.3"},{"id":"小结-6","title":"小结","index":"3.2.4"}]},{"id":"函数的参数","title":"函数的参数","index":"3.3","children":[{"id":"位置参数","title":"位置参数","index":"3.3.1"},{"id":"默认参数","title":"默认参数","index":"3.3.2"},{"id":"可变参数","title":"可变参数","index":"3.3.3"},{"id":"关键字参数","title":"关键字参数","index":"3.3.4"},{"id":"命名关键字参数","title":"命名关键字参数","index":"3.3.5"},{"id":"参数组合","title":"参数组合","index":"3.3.6"},{"id":"小结-7","title":"小结","index":"3.3.7"}]},{"id":"递归函数","title":"递归函数","index":"3.4"}]}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/99832f47/\" title=\"Python基础\">https://dxsummer.gitee.io/posts/99832f47/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2021年3月20日","updated":"2021年4月14日"}}