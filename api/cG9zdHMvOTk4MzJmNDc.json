{"title":"Python基础1","date":"2021-03-20T07:13:14.000Z","date_formatted":{"ll":"2021年3月20日","L":"2021/03/20","MM-DD":"03-20"},"link":"posts/99832f47","comments":true,"tags":["Python"],"categories":["Python"],"updated":"2021-03-31T12:57:32.228Z","content":"<h2 id=\"第一个python程序\">第一个Python程序<a href=\"#第一个python程序\" title=\"第一个Python程序\"></a></h2><h3 id=\"输入、输出\">输入、输出<a href=\"#输入、输出\" title=\"输入、输出\"></a></h3><h4 id=\"输出\">输出<a href=\"#输出\" title=\"输出\"></a></h4><p>用<code>print()</code>在括号中加上字符串，就可以向屏幕上输出指定的文字。比如输出<code>&#39;hello, world&#39;</code>，用代码实现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'hello, world'</span>)</span><br></pre></td></tr></table></figure><p><code>print()</code>函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'The quick brown fox'</span>, <span class=\"string\">'jumps over'</span>, <span class=\"string\">'the lazy dog'</span>)</span><br><span class=\"line\">The quick brown fox jumps over the lazy dog</span><br></pre></td></tr></table></figure><p><code>print()</code>会依次打印每个字符串，<mark>遇到逗号“,”会输出一个空格</mark>，因此，输出的字符串是这样拼起来的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/python/20210323203935.png\" class=\"φcy\"></p>\n<p><code>print()</code>也可以打印整数，或者计算结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">300</span>)</span><br><span class=\"line\"><span class=\"number\">300</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">100</span> + <span class=\"number\">200</span>)</span><br><span class=\"line\"><span class=\"number\">300</span></span><br></pre></td></tr></table></figure><p>因此，我们可以把计算<code>100 + 200</code>的结果打印得更漂亮一点：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'100 + 200 ='</span>, <span class=\"number\">100</span> + <span class=\"number\">200</span>)</span><br><span class=\"line\"><span class=\"number\">100</span> + <span class=\"number\">200</span> = <span class=\"number\">300</span></span><br></pre></td></tr></table></figure><p>注意，对于<code>100 + 200</code>，Python解释器自动计算出结果<code>300</code>，但是，<code>&#39;100 + 200 =&#39;</code>是字符串而非数学公式，Python把它视为字符串，请自行解释上述打印结果。</p>\n<h4 id=\"输入\">输入<a href=\"#输入\" title=\"输入\"></a></h4><p>现在，你已经可以用<code>print()</code>输出你想要的结果了。但是，如果要让用户从电脑输入一些字符怎么办？Python提供了一个<code>input()</code>，可以让用户输入字符串，并存放到一个变量里。比如输入用户的名字：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = input()</span><br><span class=\"line\">Michael</span><br></pre></td></tr></table></figure><p>当你输入<code>name = input()</code>并按下回车后，Python交互式命令行就在等待你的输入了。这时，你可以输入任意字符，然后按回车后完成输入。</p>\n<p>输入完成后，不会有任何提示，Python交互式命令行又回到<code>&gt;&gt;&gt;</code>状态了。那我们刚才输入的内容到哪去了？答案是存放到<code>name</code>变量里了。可以直接输入<code>name</code>查看变量内容：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name</span><br><span class=\"line\"><span class=\"string\">'Michael'</span></span><br></pre></td></tr></table></figure><p><strong>什么是变量？</strong>请回忆初中数学所学的代数基础知识：</p>\n<p>设正方形的边长为<code>a</code>，则正方形的面积为<code>a x a</code>。把边长<code>a</code>看做一个变量，我们就可以根据<code>a</code>的值计算正方形的面积，比如：</p>\n<p>若a=2，则面积为a x a = 2 x 2 = 4；</p>\n<p>若a=3.5，则面积为a x a = 3.5 x 3.5 = 12.25。</p>\n<p>在计算机程序中，变量不仅可以为整数或浮点数，还可以是字符串，因此，<code>name</code>作为一个变量就是一个字符串。</p>\n<p>要打印出<code>name</code>变量的内容，除了直接写<code>name</code>然后按回车外，还可以用<code>print()</code>函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(name)</span><br><span class=\"line\">Michael</span><br></pre></td></tr></table></figure><p>有了输入和输出，我们就可以把上次打印<code>&#39;hello, world&#39;</code>的程序改成有点意义的程序了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = input()</span><br><span class=\"line\">print(<span class=\"string\">'hello,'</span>, name)</span><br></pre></td></tr></table></figure><p>运行上面的程序，第一行代码会让用户输入任意字符作为自己的名字，然后存入<code>name</code>变量中；第二行代码会根据用户的名字向用户说<code>hello</code>，比如输入<code>Michael</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Workspace&gt; python hello.py</span><br><span class=\"line\">Michael</span><br><span class=\"line\">hello, Michael</span><br></pre></td></tr></table></figure><p>但是程序运行的时候，没有任何提示信息告诉用户：“嘿，赶紧输入你的名字”，这样显得很不友好。幸好，<code>input()</code>可以让你显示一个字符串来提示用户，于是我们把代码改成：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = input(<span class=\"string\">'please enter your name: '</span>)</span><br><span class=\"line\">print(<span class=\"string\">'hello,'</span>, name)</span><br></pre></td></tr></table></figure><p>再次运行这个程序，你会发现，程序一运行，会首先打印出<code>please enter your name:</code>，这样，用户就可以根据提示，输入名字后，得到<code>hello, xxx</code>的输出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Workspace&gt; python hello.py</span><br><span class=\"line\">please enter your name: Michael</span><br><span class=\"line\">hello, Michael</span><br></pre></td></tr></table></figure><p>每次运行该程序，根据用户输入的不同，输出结果也会不同。</p>\n<p>在命令行下，输入和输出就是这么简单。</p>\n<h2 id=\"python基础\">Python基础<a href=\"#python基础\" title=\"Python基础\"></a></h2><h3 id=\"数据类型和变量\">数据类型和变量<a href=\"#数据类型和变量\" title=\"数据类型和变量\"></a></h3><p>以<code>#</code>开头的语句是注释</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># print absolute value of an integer:</span></span><br></pre></td></tr></table></figure><p>Python程序是<mark><strong>大小写敏感</strong></mark>的</p>\n<p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下几种：</p>\n<h4 id=\"整数\">整数<a href=\"#整数\" title=\"整数\"></a></h4><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：<code>1</code>，<code>100</code>，<code>-8080</code>，<code>0</code>，等等。</p>\n<p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用<code>0x</code>前缀和0-9，a-f表示，例如：<code>0xff00</code>，<code>0xa5b4c3d2</code>，等等。</p>\n<p>对于很大的数，例如<code>10000000000</code>，很难数清楚0的个数。<strong>Python允许在数字中间以<code>_</code>分隔</strong>，因此，写成<code>10_000_000_000</code>和<code>10000000000</code>是完全一样的。十六进制数也可以写成<code>0xa1b2_c3d4</code>。</p>\n<h4 id=\"浮点数\">浮点数<a href=\"#浮点数\" title=\"浮点数\"></a></h4><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x10<sup>9</sup>和12.3x10<sup>8</sup>是完全相等的。浮点数可以用数学写法，如<code>1.23</code>，<code>3.14</code>，<code>-9.01</code>，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x10<sup>9</sup>就是<code>1.23e9</code>，或者<code>12.3e8</code>，0.000012可以写成<code>1.2e-5</code>，等等。</p>\n<p>整数和浮点数在计算机内部存储的方式是不同的，<strong>整数运算永远是精确的</strong>（除法难道也是精确的？是的！），而<strong>浮点数运算则可能会有四舍五入的误差。</strong></p>\n<h4 id=\"字符串\">字符串<a href=\"#字符串\" title=\"字符串\"></a></h4><p>字符串是以单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来的任意文本，比如<code>&#39;abc&#39;</code>，<code>&quot;xyz&quot;</code>等等。请注意，<code>&#39;&#39;</code>或<code>&quot;&quot;</code>本身只是一种表示方式，不是字符串的一部分，因此，字符串<code>&#39;abc&#39;</code>只有<code>a</code>，<code>b</code>，<code>c</code>这3个字符。如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<code>I</code>，<code>&#39;</code>，<code>m</code>，空格，<code>O</code>，<code>K</code>这6个字符。</p>\n<p><mark>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>怎么办？可以用转义字符<code>\\</code>来标识</mark>，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'I\\'m \\\"OK\\\"!'</span></span><br></pre></td></tr></table></figure><p>表示的字符串内容是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I<span class=\"string\">'m \"OK\"!</span></span><br></pre></td></tr></table></figure><p>转义字符<code>\\</code>可以转义很多字符，比如<code>\\n</code>表示换行，<code>\\t</code>表示制表符，字符<code>\\</code>本身也要转义，所以<code>\\\\</code>表示的字符就是<code>\\</code>，可以在Python的交互式命令行用<code>print()</code>打印字符串看看：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'I\\'m ok.'</span>)</span><br><span class=\"line\">I<span class=\"string\">'m ok.</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;&gt; print('</span>I\\<span class=\"string\">'m learning\\nPython.'</span>)</span><br><span class=\"line\">I<span class=\"string\">'m learning</span></span><br><span class=\"line\"><span class=\"string\">Python.</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;&gt; print('</span>\\\\\\n\\\\<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br></pre></td></tr></table></figure><p>如果字符串里面有很多字符都需要转义，就需要加很多<code>\\</code>，为了简化，Python还允许用<code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义，可以自己试试：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'\\\\\\t\\\\'</span>)</span><br><span class=\"line\">\\       \\</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">r'\\\\\\t\\\\'</span>)</span><br><span class=\"line\">\\\\\\t\\\\</span><br></pre></td></tr></table></figure><p>如果字符串内部有很多换行，用<code>\\n</code>写在一行里不好阅读，为了简化，Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容，可以自己试试：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'''line1</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">... </span>line2</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">... </span>line3'''</span>)</span><br><span class=\"line\">line1</span><br><span class=\"line\">line2</span><br><span class=\"line\">line3</span><br></pre></td></tr></table></figure><p>上面是在交互式命令行内输入，注意在输入多行内容时，提示符由<code>&gt;&gt;&gt;</code>变为<code>...</code>，提示你可以接着上一行输入，注意<code>...</code>是提示符，不是代码的一部分：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌────────────────────────────────────────────────────────┐</span><br><span class=\"line\">│Command Prompt - python                           _ □ x │</span><br><span class=\"line\">├────────────────────────────────────────────────────────┤</span><br><span class=\"line\">│&gt;&gt;&gt; print(&#39;&#39;&#39;line1                                      │</span><br><span class=\"line\">│... line2                                               │</span><br><span class=\"line\">│... line3&#39;&#39;&#39;)                                           │</span><br><span class=\"line\">│line1                                                   │</span><br><span class=\"line\">│line2                                                   │</span><br><span class=\"line\">│line3                                                   │</span><br><span class=\"line\">│                                                        │</span><br><span class=\"line\">│&gt;&gt;&gt; _                                                   │</span><br><span class=\"line\">│                                                        │</span><br><span class=\"line\">│                                                        │</span><br><span class=\"line\">│                                                        │</span><br><span class=\"line\">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>当输入完结束符<strong>```</strong>和括号<code>)</code>后，执行该语句并打印结果。</p>\n<p>如果写成程序并存为<code>.py</code>文件，就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&#39;&#39;&#39;line1</span><br><span class=\"line\">line2</span><br><span class=\"line\">line3&#39;&#39;&#39;)</span><br></pre></td></tr></table></figure><p>多行字符串<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>还可以在前面加上<code>r</code>使用，请自行测试：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">r'''hello,\\n</span></span><br><span class=\"line\"><span class=\"string\">world'''</span>)</span><br></pre></td></tr></table></figure><h4 id=\"布尔值\">布尔值<a href=\"#布尔值\" title=\"布尔值\"></a></h4><p>布尔值和布尔代数的表示完全一致，一个布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> &gt; <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> &gt; <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure><p>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算。</p>\n<p><code>and</code>运算是与运算，只有所有都为<code>True</code>，<code>and</code>运算结果才是<code>True</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">True</span> <span class=\"keyword\">and</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">True</span> <span class=\"keyword\">and</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">False</span> <span class=\"keyword\">and</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span> &gt; <span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"number\">3</span> &gt; <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure><p><code>or</code>运算是或运算，只要其中有一个为<code>True</code>，<code>or</code>运算结果就是<code>True</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">True</span> <span class=\"keyword\">or</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">True</span> <span class=\"keyword\">or</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">False</span> <span class=\"keyword\">or</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span> &gt; <span class=\"number\">3</span> <span class=\"keyword\">or</span> <span class=\"number\">1</span> &gt; <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure><p><code>not</code>运算是非运算，它是一个单目运算符，把<code>True</code>变成<code>False</code>，<code>False</code>变成<code>True</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">not</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">not</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">not</span> <span class=\"number\">1</span> &gt; <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure><p>布尔值经常用在条件判断中，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'adult'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'teenager'</span>)</span><br></pre></td></tr></table></figure><h4 id=\"空值\">空值<a href=\"#空值\" title=\"空值\"></a></h4><p>空值是Python里一个特殊的值，用<code>None</code>表示。<mark><code>None</code>不能理解为<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值。</mark></p>\n<p>此外，Python还提供了<strong>列表</strong>、<strong>字典</strong>等多种数据类型，还<strong>允许创建自定义数据类型</strong>，我们后面会继续讲到。</p>\n<h4 id=\"变量\">变量<a href=\"#变量\" title=\"变量\"></a></h4><p>变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</p>\n<p>变量在程序中就是用一个变量名表示了，<strong>变量名必须是大小写英文、数字和<code>_</code>的组合，且不能用数字开头</strong>，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure><p>变量<code>a</code>是一个整数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t_007 = <span class=\"string\">'T007'</span></span><br></pre></td></tr></table></figure><p>变量<code>t_007</code>是一个字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Answer = <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure><p>变量<code>Answer</code>是一个布尔值<code>True</code>。</p>\n<p>在Python中，等号<code>=</code>是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">123</span> <span class=\"comment\"># a是整数</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\">a = <span class=\"string\">'ABC'</span> <span class=\"comment\"># a变为字符串</span></span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure><p>这种变量本身类型不固定的语言称之为<font color=\"red\"><strong>动态语言</strong></font>，与之对应的是<font color=\"red\"><strong>静态语言</strong></font>。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java<strong>是静态语言</strong>，赋值语句如下（// 表示注释）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a = <span class=\"number\">123</span>; // a是整数类型变量</span><br><span class=\"line\">a = <span class=\"string\">\"ABC\"</span>; // 错误：不能把字符串赋给整型变量</span><br></pre></td></tr></table></figure><p>和静态语言相比，动态语言更灵活，就是这个原因。</p>\n<p>请不要把赋值语句的等号等同于数学的等号。比如下面的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\">x = x + <span class=\"number\">2</span></span><br></pre></td></tr></table></figure><p>如果从数学上理解<code>x = x + 2</code>那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式<code>x + 2</code>，得到结果<code>12</code>，再赋给变量<code>x</code>。由于<code>x</code>之前的值是<code>10</code>，重新赋值后，<code>x</code>的值变成<code>12</code>。</p>\n<p>最后，理解变量在计算机内存中的表示也非常重要。当我们写：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">'ABC'</span></span><br></pre></td></tr></table></figure><p>时，Python解释器干了两件事情：</p>\n<ol><li>在内存中创建了一个<code>&#39;ABC&#39;</code>的字符串；</li>\n<li>在内存中创建了一个名为<code>a</code>的变量，并把它指向<code>&#39;ABC&#39;</code>。</li>\n</ol><p>也可以把一个变量<code>a</code>赋值给另一个变量<code>b</code>，这个操作实际上是把变量<code>b</code>指向变量<code>a</code>所指向的数据，例如下面的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; a = <span class=\"string\">'ABC'</span></span><br><span class=\"line\">&gt;&gt; b = a</span><br><span class=\"line\">&gt;&gt; a = <span class=\"string\">'XYZ'</span></span><br><span class=\"line\">&gt;&gt; print(b)</span><br><span class=\"line\">ABC</span><br></pre></td></tr></table></figure><p>最后一行打印出变量<code>b</code>的内容到底是<code>&#39;ABC&#39;</code>呢还是<code>&#39;XYZ&#39;</code>？如果从数学意义上理解，就会错误地得出<code>b</code>和<code>a</code>相同，也应该是<code>&#39;XYZ&#39;</code>，但实际上<code>b</code>的值是<code>&#39;ABC&#39;</code>，让我们一行一行地执行代码，就可以看到到底发生了什么事：</p>\n<p>执行<code>a = &#39;ABC&#39;</code>，解释器创建了字符串<code>&#39;ABC&#39;</code>和变量<code>a</code>，并把<code>a</code>指向<code>&#39;ABC&#39;</code>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/python/20210323202211.png\" class=\"φcy\"></p>\n<p>执行<code>b = a</code>，解释器创建了变量<code>b</code>，并把<code>b</code>指向<code>a</code>指向的字符串<code>&#39;ABC&#39;</code>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/python/20210323202301.png\" class=\"φcy\"></p>\n<p>执行<code>a = &#39;XYZ&#39;</code>，解释器创建了字符串’XYZ’，并把<code>a</code>的指向改为<code>&#39;XYZ&#39;</code>，但<code>b</code>并没有更改：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/python/20210323202318.png\" class=\"φcy\"></p>\n<p>所以，最后打印变量<code>b</code>的结果自然是<code>&#39;ABC&#39;</code>了。</p>\n<h4 id=\"常量\">常量<a href=\"#常量\" title=\"常量\"></a></h4><p>所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PI = <span class=\"number\">3.14159265359</span></span><br></pre></td></tr></table></figure><p>但事实上<code>PI</code>仍然是一个变量，Python根本没有任何机制保证<code>PI</code>不会被改变，所以，<strong>用全部大写的变量名表示常量</strong>只是一个习惯上的用法，如果你一定要改变变量<code>PI</code>的值，也没人能拦住你。</p>\n<p>最后解释一下整数的除法为什么也是精确的。在Python中，有两种除法，一种除法是<code>/</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> / <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3.3333333333333335</span></span><br></pre></td></tr></table></figure><p><mark><code>/</code>除法计算结果是<strong>浮点数</strong></mark>，即使是两个整数恰好整除，结果也是浮点数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">9</span> / <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure><p><mark>还有一种除法是<code>//</code>，称为<strong>地板除</strong>，两个整数的除法仍然是<strong>整数</strong></mark>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> // <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure><p>你没有看错，整数的地板除<code>//</code>永远是整数，即使除不尽。要做精确的除法，使用<code>/</code>就可以。</p>\n<p>因为<strong><code>//</code>除法只取结果的整数部分</strong>，所以Python还提供一个余数运算，可以得到两个整数相除的余数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> % <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure><p>无论整数做<code>//</code>除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</p>\n<h4 id=\"小结\">小结<a href=\"#小结\" title=\"小结\"></a></h4><p>Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对<strong>变量赋值</strong>就是把<strong>数据</strong>和<strong>变量</strong>给关联起来。</p>\n<p>对变量赋值<code>x = y</code>是把变量<code>x</code>指向真正的对象，该对象是变量<code>y</code>所指向的。随后对<strong>变量<code>y</code>的赋值<em>不影响</em>变量<code>x</code>的指向</strong>。</p>\n<p>注意：<strong>Python的整数没有大小限制</strong>，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在<code>-2147483648</code>-<code>2147483647</code>。</p>\n<p><strong>Python的浮点数也没有大小限制</strong>，但是<strong>超出一定范围就直接表示为<code>inf</code>（无限大）</strong>。</p>\n<h3 id=\"字符串和编码\">字符串和编码<a href=\"#字符串和编码\" title=\"字符串和编码\"></a></h3><h4 id=\"字符编码\">字符编码<a href=\"#字符编码\" title=\"字符编码\"></a></h4><p>我们已经讲过了，字符串也是一种数据类型，但是，字符串比较特殊的是还有一个编码问题。</p>\n<p>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是<code>65535</code>，4个字节可以表示的最大整数是<code>4294967295</code>。</p>\n<p>由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为<code>ASCII</code>编码，比如大写字母<code>A</code>的编码是<code>65</code>，小写字母<code>z</code>的编码是<code>122</code>。</p>\n<p>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了<code>GB2312</code>编码，用来把中文编进去。</p>\n<p>你可以想得到的是，全世界有上百种语言，日本把日文编到<code>Shift_JIS</code>里，韩国把韩文编到<code>Euc-kr</code>里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/python/20210331201507.png\" class=\"φcy\"></p>\n<p>因此，Unicode字符集应运而生。<mark>Unicode把所有语言都统一到一套编码里</mark>，这样就不会再有乱码问题了。</p>\n<p>Unicode标准也在不断发展，但最常用的是UCS-16编码，用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p>\n<p>现在，捋一捋ASCII编码和Unicode编码的区别：<mark>ASCII编码是1个字节，而Unicode编码通常是2个字节。</mark></p>\n<p>字母<code>A</code>用ASCII编码是十进制的<code>65</code>，二进制的<code>01000001</code>；</p>\n<p>字符<code>0</code>用ASCII编码是十进制的<code>48</code>，二进制的<code>00110000</code>，注意字符<code>&#39;0&#39;</code>和整数<code>0</code>是不同的；</p>\n<p>汉字<code>中</code>已经超出了ASCII编码的范围，用Unicode编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>。</p>\n<p>你可以猜测，如果把ASCII编码的<code>A</code>用Unicode编码，只需要在前面补0就可以，因此，<code>A</code>的Unicode编码是<code>00000000 01000001</code>。</p>\n<p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p>\n<p>所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的<code>UTF-8</code>编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th align=\"left\">字符</th><th align=\"left\">ASCII</th><th align=\"left\">Unicode</th><th align=\"left\">UTF-8</th></tr>\n</thead><tbody><tr>\n<td align=\"left\">A</td><td align=\"left\">01000001</td><td align=\"left\">00000000 01000001</td><td align=\"left\">01000001</td></tr>\n<tr>\n<td align=\"left\">中</td><td align=\"left\">x</td><td align=\"left\">01001110 00101101</td><td align=\"left\">11100100 10111000 10101101</td></tr>\n</tbody></table></div></div><p>从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p>\n<p>搞清楚了ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：</p>\n<p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</p>\n<p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/python/20210331201950.png\" class=\"φcy\"></p>\n<p>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/python/20210331202105.png\" class=\"φcy\"></p>\n<p>所以你看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p>\n<h3 id=\"python的字符串\">Python的字符串<a href=\"#python的字符串\" title=\"Python的字符串\"></a></h3><p>搞清楚了令人头疼的字符编码问题后，我们再来研究Python的字符串。</p>\n<p><mark><strong>在最新的Python 3版本中，字符串是以Unicode编码的</strong></mark>，也就是说，Python的字符串支持多语言，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'包含中文的str'</span>)</span><br><span class=\"line\">包含中文的str</span><br></pre></td></tr></table></figure><p>对于单个字符的编码，Python提供了<code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ord(<span class=\"string\">'A'</span>)</span><br><span class=\"line\"><span class=\"number\">65</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ord(<span class=\"string\">'中'</span>)</span><br><span class=\"line\"><span class=\"number\">20013</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>chr(<span class=\"number\">66</span>)</span><br><span class=\"line\"><span class=\"string\">'B'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>chr(<span class=\"number\">25991</span>)</span><br><span class=\"line\"><span class=\"string\">'文'</span></span><br></pre></td></tr></table></figure><p>如果知道字符的整数编码，还可以用十六进制这么写<code>str</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'\\u4e2d\\u6587'</span></span><br><span class=\"line\"><span class=\"string\">'中文'</span></span><br></pre></td></tr></table></figure><p>两种写法完全是等价的。</p>\n<p>由于Python的字符串类型是<code>str</code>，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。</p>\n<p>Python对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"string\">b'ABC'</span></span><br></pre></td></tr></table></figure><p>要注意区分<code>&#39;ABC&#39;</code>和<code>b&#39;ABC&#39;</code>，前者是<code>str</code>，后者虽然内容显示得和前者一样，但<code>bytes</code>的每个字符都只占用一个字节。</p>\n<p>以Unicode表示的<code>str</code>通过<code>encode()</code>方法可以编码为指定的<code>bytes</code>，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'ABC'</span>.encode(<span class=\"string\">'ascii'</span>)</span><br><span class=\"line\"><span class=\"string\">b'ABC'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'中文'</span>.encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"><span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'中文'</span>.encode(<span class=\"string\">'ascii'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">UnicodeEncodeError: <span class=\"string\">'ascii'</span> codec can<span class=\"string\">'t encode characters in position 0-1: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure><p>纯英文的<code>str</code>可以用<code>ASCII</code>编码为<code>bytes</code>，内容是一样的，含有中文的<code>str</code>可以用<code>UTF-8</code>编码为<code>bytes</code>。含有中文的<code>str</code>无法用<code>ASCII</code>编码，因为中文编码的范围超过了<code>ASCII</code>编码的范围，Python会报错。</p>\n<p>在<code>bytes</code>中，无法显示为ASCII字符的字节，用<code>\\x##</code>显示。</p>\n<p>反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是<code>bytes</code>。要把<code>bytes</code>变为<code>str</code>，就需要用<code>decode()</code>方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b'ABC'</span>.decode(<span class=\"string\">'ascii'</span>)</span><br><span class=\"line\"><span class=\"string\">'ABC'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span>.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"><span class=\"string\">'中文'</span></span><br></pre></td></tr></table></figure><p>如果<code>bytes</code>中包含无法解码的字节，<code>decode()</code>方法会报错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b'\\xe4\\xb8\\xad\\xff'</span>.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  ...</span><br><span class=\"line\">UnicodeDecodeError: <span class=\"string\">'utf-8'</span> codec can<span class=\"string\">'t decode byte 0xff in position 3: invalid start byte</span></span><br></pre></td></tr></table></figure><p>如果<code>bytes</code>中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b'\\xe4\\xb8\\xad\\xff'</span>.decode(<span class=\"string\">'utf-8'</span>, errors=<span class=\"string\">'ignore'</span>)</span><br><span class=\"line\"><span class=\"string\">'中'</span></span><br></pre></td></tr></table></figure><p>要计算<code>str</code>包含多少个字符，可以用<code>len()</code>函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(<span class=\"string\">'ABC'</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(<span class=\"string\">'中文'</span>)</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure><p><code>len()</code>函数计算的是<code>str</code>的字符数，如果换成<code>bytes</code>，<code>len()</code>函数就计算字节数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(<span class=\"string\">b'ABC'</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(<span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span>)</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(<span class=\"string\">'中文'</span>.encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure><p>可见，<strong>1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节</strong>。</p>\n<p>在操作字符串时，我们经常遇到<code>str</code>和<code>bytes</code>的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对<code>str</code>和<code>bytes</code>进行转换。</p>\n<p>由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p>第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；</p>\n<p>第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。</p>\n<p>申明了UTF-8编码并不意味着你的<code>.py</code>文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用UTF-8 without BOM编码：</p>\n<p><img src=\"https://www.liaoxuefeng.com/files/attachments/1008802356788736\" class=\"φcy\" alt=\"set-encoding-in-notepad++\"></p>\n<p>如果<code>.py</code>文件本身使用UTF-8编码，并且也申明了<code># -*- coding: utf-8 -*-</code>，打开命令提示符测试就可以正常显示中文：</p>\n<p><img src=\"https://www.liaoxuefeng.com/files/attachments/1008802515054144\" class=\"φcy\" alt=\"py-chinese-test-in-cmd\"></p>\n<h3 id=\"格式化\">格式化<a href=\"#格式化\" title=\"格式化\"></a></h3><p>最后一个常见的问题是如何输出格式化的字符串。我们经常会输出类似<code>&#39;亲爱的xxx你好！你xx月的话费是xx，余额是xx&#39;</code>之类的字符串，而xxx的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。</p>\n<p><img src=\"https://www.liaoxuefeng.com/files/attachments/928817906446432/0\" class=\"φcy\" alt=\"py-str-format\"></p>\n<p>在Python中，采用的格式化方式和C语言是一致的，用<code>%</code>实现，举例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; &#39;Hello, %s&#39; % &#39;world&#39;</span><br><span class=\"line\">&#39;Hello, world&#39;</span><br><span class=\"line\">&gt;&gt;&gt; &#39;Hi, %s, you have $%d.&#39; % (&#39;Michael&#39;, 1000000)</span><br><span class=\"line\">&#39;Hi, Michael, you have $1000000.&#39;</span><br></pre></td></tr></table></figure><p>你可能猜到了，<code>%</code>运算符就是用来格式化字符串的。在字符串内部，<code>%s</code>表示用字符串替换，<code>%d</code>表示用整数替换，有几个<code>%?</code>占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个<code>%?</code>，括号可以省略。</p>\n<p>常见的占位符有：</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th align=\"left\">占位符</th><th align=\"left\">替换内容</th></tr>\n</thead><tbody><tr>\n<td align=\"left\">%d</td><td align=\"left\">整数</td></tr>\n<tr>\n<td align=\"left\">%f</td><td align=\"left\">浮点数</td></tr>\n<tr>\n<td align=\"left\">%s</td><td align=\"left\">字符串</td></tr>\n<tr>\n<td align=\"left\">%x</td><td align=\"left\">十六进制整数</td></tr>\n</tbody></table></div></div><p>其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数：</p>\n","prev":{"title":"python主要函数","link":"posts/d8c26074"},"next":{"title":"计算机四级网络工程师思维导图--常考重点","link":"posts/b384d89a"},"plink":"https://dxsummer.gitee.io/posts/99832f47/","toc":[{"id":"第一个python程序","title":"第一个Python程序","index":"1","children":[{"id":"输入、输出","title":"输入、输出","index":"1.1","children":[{"id":"输出","title":"输出","index":"1.1.1"},{"id":"输入","title":"输入","index":"1.1.2"}]}]},{"id":"python基础","title":"Python基础","index":"2","children":[{"id":"数据类型和变量","title":"数据类型和变量","index":"2.1","children":[{"id":"整数","title":"整数","index":"2.1.1"},{"id":"浮点数","title":"浮点数","index":"2.1.2"},{"id":"字符串","title":"字符串","index":"2.1.3"},{"id":"布尔值","title":"布尔值","index":"2.1.4"},{"id":"空值","title":"空值","index":"2.1.5"},{"id":"变量","title":"变量","index":"2.1.6"},{"id":"常量","title":"常量","index":"2.1.7"},{"id":"小结","title":"小结","index":"2.1.8"}]},{"id":"字符串和编码","title":"字符串和编码","index":"2.2","children":[{"id":"字符编码","title":"字符编码","index":"2.2.1"}]},{"id":"python的字符串","title":"Python的字符串","index":"2.3"},{"id":"格式化","title":"格式化","index":"2.4"}]}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/99832f47/\" title=\"Python基础1\">https://dxsummer.gitee.io/posts/99832f47/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2021年3月20日","updated":"2021年3月31日"}}