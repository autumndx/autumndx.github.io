{"title":"数据结构(蓝桥杯)","date":"2022-03-11T12:44:49.000Z","date_formatted":{"ll":"2022年3月11日","L":"2022/03/11","MM-DD":"03-11"},"link":"posts/10b828c8","comments":true,"tags":["Java"],"categories":["Java"],"updated":"2022-03-22T12:13:41.932Z","content":"<h1 id=\"算法分析\">算法分析<a href=\"#算法分析\" title=\"算法分析\"></a></h1><h2 id=\"时间复杂度分析\">时间复杂度分析<a href=\"#时间复杂度分析\" title=\"时间复杂度分析\"></a></h2><p><code>System.currentTimeMillis()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"sum:\"</span> + sum);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(end - start);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"空间复杂度分析\">空间复杂度分析<a href=\"#空间复杂度分析\" title=\"空间复杂度分析\"></a></h2><h3 id=\"java中常见内存占用\">java中常见内存占用<a href=\"#java中常见内存占用\" title=\"java中常见内存占用\"></a></h3><p>1.基本数据类型内存占用情况:</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>数据类型</th><th>内存占用字节数</th></tr>\n</thead><tbody><tr>\n<td>byte</td><td>1</td></tr>\n<tr>\n<td>short</td><td>2</td></tr>\n<tr>\n<td>int</td><td>4</td></tr>\n<tr>\n<td>long</td><td>8</td></tr>\n<tr>\n<td>float</td><td>4</td></tr>\n<tr>\n<td>double</td><td>8</td></tr>\n<tr>\n<td>boolean</td><td>1</td></tr>\n<tr>\n<td>char</td><td>2</td></tr>\n</tbody></table></div></div><p>2.计算机访问内存的方式都是一次一个字节</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203121441247.png\" class=\"φcy\" alt=\"QQ20220312-143406@2x\"></p>\n<p>3.一个引用(机器地址)需要8个字节表示:</p>\n<p>例如: <code>Date date = new Date()</code>,则<code>date</code>这个变量需要占用<strong><font color=\"red\">8个字节</font></strong>来表示</p>\n<p>4.创建一个对象，比如<code>new Date()</code>，除了<code>Date</code>对象内部存储的数据(例如年月日等信息)占用的内存，该对象本身也 有内存开销，每个对象的自身开销是<strong><font color=\"red\">16个字节</font></strong>，用来保存对象的头信息。</p>\n<p>5.一般内存的使用，<strong><font color=\"red\">如果不够8个字节，都会被自动填充为8字节</font></strong>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">通过<span class=\"keyword\">new</span> A() 创建一个对象的内存占用如下：</span><br><span class=\"line\">\t<span class=\"number\">1</span>. 整型成员变量a占用<span class=\"number\">4</span>个字节</span><br><span class=\"line\">\t<span class=\"number\">2</span>. 对象本身占用<span class=\"number\">16</span>个字节</span><br><span class=\"line\">那么创建该对象总共需要<span class=\"number\">20</span>个字节，但由于不是以<span class=\"number\">8</span>为单位，会自动填充为<span class=\"number\">24</span>个字节</span><br></pre></td></tr></table></figure><p>6.java中数组被被限定为对象，他们一般都会因为记录长度而需要额外的内存，一个原始数据类型的数组一般需要<strong><font color=\"red\"> 24字节</font></strong>的头信息 (<strong>16个自己的对象开销，4字节用于保存长度以及4个填充字节</strong>)  再加上保存值所需的内存。</p>\n<h3 id=\"算法的空间复杂度\">算法的空间复杂度<a href=\"#算法的空间复杂度\" title=\"算法的空间复杂度\"></a></h3><p>案例:</p>\n<p>对指定的数组元素进行反转，并返回反转的内容。</p>\n<p>解法一:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] reverse1(<span class=\"keyword\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = arr.length;<span class=\"comment\">// 申请4个字节</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;<span class=\"comment\">// 申请4个字节</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> start = <span class=\"number\">0</span>, end = n - <span class=\"number\">1</span>; start &lt;= end; start++, end--) &#123;</span><br><span class=\"line\">        temp = arr[start];</span><br><span class=\"line\">        arr[start] = arr[end];</span><br><span class=\"line\">        arr[end] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>解法二:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] reverse2(<span class=\"keyword\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = arr.length;<span class=\"comment\">// 申请4个字节</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n]; <span class=\"comment\">// 申请n*4个字节+数组自身头信息开销24个字节</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        temp[n - <span class=\"number\">1</span> - i] = arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>忽略判断条件占用的内存，我们得出的内存占用情况如下: </p>\n<p>算法一: </p>\n<p>不管传入的数组大小为多少，始终额外申请<strong>4+4=8个字节;</strong> </p>\n<p>算法二:</p>\n<p><strong>4+4n+24=4n+28;</strong> </p>\n<p>根据大O推导法则，算法一的空间复杂度为O(1),算法二的空间复杂度为O(n),所以从空间占用的角度讲，算法一要优于算法二。 </p>\n<p>由于java中有内存垃圾回收机制，并且jvm对程序的内存占用也有优化(例如即时编译)，我们无法精确的评估一个java程序的内存占用情况，但是了解了java的基本内存占用，使我们可以对java程序的内存占用情况进行估算。 </p>\n<p>由于现在的计算机设备内存一般都比较大，基本上个人计算机都是4G起步，大的可以达到32G，所以内存占用一般情况下并不是我们算法的瓶颈，普通情况下直接说复杂度，默认为算法的时间复杂度。</p>\n<p>但是，如果你做的程序是嵌入式开发，尤其是一些传感器设备上的内置程序，由于这些设备的内存很小，一般为几 kb，这个时候对算法的空间复杂度就有要求了，但是一般做java开发的，基本上都是服务器开发，一般不存在这样 的问题。</p>\n<h1 id=\"排序\">排序<a href=\"#排序\" title=\"排序\"></a></h1><h2 id=\"简单排序\">简单排序<a href=\"#简单排序\" title=\"简单排序\"></a></h2><p>在java的开发工具包jdk中，已经给我们提供了很多数据结构与算法的实现，比如List，Set，Map，Math等等，都 是以API的方式提供，这种方式的好处在于一次编写，多处使用。我们借鉴jdk的方式，也把算法封装到某个类中， 那如果是这样，在我们写java代码之前，就需要先进行API的设计，设计好之后，再对这些API进行实现。</p>\n<p>就比如我们先设计一套API如下:</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类名</th><th>ArrayList</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>ArrayList():创建ArrayList对象</td></tr>\n<tr>\n<td>成员方法</td><td>1.  <code>boolean add(E e)</code>:向集合中添加元素<br>2.  <code>E remove(int index)</code>:从集合中删除指定的元素</td></tr>\n</tbody></table></div></div><h3 id=\"comparable接口介绍\">Comparable接口介绍<a href=\"#comparable接口介绍\" title=\"Comparable接口介绍\"></a></h3><p>由于我们这里要讲排序，所以肯定会在元素之间进行比较，而Java提供了一个接口Comparable就是用来定义排序 规则的，在这里我们以案例的形式对Comparable接口做一个简单的回顾。</p>\n<p>需求: 1.定义一个学生类Student，具有年龄age和姓名username两个属性，并通过Comparable接口提供比较规则;</p>\n<p> 2.定义测试类Test，在测试类Test中定义测试方法<code>Comparable getMax(Comparable c1,Comparable c2)</code>完成测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 学生类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Student</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsername</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUsername</span><span class=\"params\">(String username)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Student&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"username='\"</span> + username + <span class=\"string\">'\\''</span> + <span class=\"string\">\", age=\"</span> + age +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定义比较规则</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Student o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getAge() - o.getAge();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Student stu1 = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">        stu1.setUsername(<span class=\"string\">\"zhangsan\"</span>);</span><br><span class=\"line\">        stu1.setAge(<span class=\"number\">17</span>);</span><br><span class=\"line\">        Student stu2 = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">        stu2.setUsername(<span class=\"string\">\"lisi\"</span>);</span><br><span class=\"line\">        stu2.setAge(<span class=\"number\">19</span>);</span><br><span class=\"line\">        Comparable max = getMax(stu1, stu2);</span><br><span class=\"line\">        System.out.println(max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试方法，获取两个元素中的较大值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Comparable <span class=\"title\">getMax</span><span class=\"params\">(Comparable c1, Comparable c2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = c1.compareTo(c2);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c1;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"冒泡排序\">冒泡排序<a href=\"#冒泡排序\" title=\"冒泡排序\"></a></h3><p>冒泡排序(Bubble Sort)，是一种计算机科学领域的较简单的排序算法。 需求:</p>\n<p>排序前:{4,5,6,3,2,1}</p>\n<p>排序后:{1,2,3,4,5,6} </p>\n<p>排序原理:</p>\n<ol><li>比较相邻的元素。如果前一个元素比后一个元素大，就交换这两个元素的位置。</li>\n<li>对每一对相邻元素做同样的工作，从开始第一对元素到结尾的最后一对元素。最终最后位置的元素就是最大值。</li>\n</ol><p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203141100466.gif\" class=\"φcy\" alt=\"img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203121710381.png\" class=\"φcy\" alt=\"QQ20220312-170929@2x\"></p>\n<p>冒泡排序API设计:</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类名</th><th>Bubble</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>Bubble() : 创建Bubble对象</td></tr>\n<tr>\n<td>成员方法</td><td>1.<code>public static void sort(Comparable[] a)</code>:对数组内的元素进行排序<br>2.<code>private static boolean greater(Comparable v,Comparable w)</code>:判断v是否大于w<br>3.<code>private static void exch(Comparable[] a,int i,int j)</code>:交换a数组中，索引i和索引j处的值</td></tr>\n</tbody></table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 排序代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bubble</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 对数组a中的元素进行排序</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = a.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (greater(a[j], a[j + <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">                    exch(a, j, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 比较v元素是否大于w元素</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">greater</span><span class=\"params\">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v.compareTo(w) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 数组元素i和j交换位置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        Comparable t = a[i];</span><br><span class=\"line\">        a[i] = a[j];</span><br><span class=\"line\">        a[j] = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Integer[] a = &#123; <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">        Bubble.sort(a);</span><br><span class=\"line\">        System.out.println(Arrays.toString(a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong>冒泡排序的时间复杂度分析</strong> 冒泡排序使用了双层for循环，其中内层循环的循环体是真正完成排序的代码，所以， 我们分析冒泡排序的时间复杂度，主要分析一下内层循环体的执行次数即可。</p>\n<p>在最坏情况下，也就是假如要排序的元素为{6,5,4,3,2,1}逆序，那么: </p>\n<p>元素比较的次数为:</p>\n<p>(N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2;</p>\n<p>元素交换的次数为:</p>\n<p>(N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2;</p>\n<p>总执行次数为:</p>\n<p>(N^2/2-N/2)+(N^2/2-N/2)=N^2-N; </p>\n<p>按照大O推导法则，保留函数中的最高阶项那么最终冒泡排序的<strong><font color=\"red\">时间复杂度为O(N^2)</font></strong></p>\n<h3 id=\"选择排序\">选择排序<a href=\"#选择排序\" title=\"选择排序\"></a></h3><p>选择排序是一种更加简单直观的排序方法。</p>\n<p><strong>需求:</strong></p>\n<p>排序前:{4,6,8,7,9,2,10,1} </p>\n<p>排序后:{1,2,4,5,7,8,9,10}</p>\n<p><strong>排序原理:</strong></p>\n<ol><li>每一次遍历的过程中，都<strong>假定第一个索引处的元素是最小值，和其他索引处的值依次进行比较</strong>，如果当前索引处 的值大于其他某个索引处的值，则假定其他某个索引出的值为最小值，最后可以找到最小值所在的索引</li>\n<li>交换第一个索引处和最小值所在的索引处的值</li>\n</ol><p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203141613605.gif\" class=\"φcy\" alt=\"img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203122139281.png\" class=\"φcy\" alt=\"QQ20220312-213801@2x\"></p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类别</th><th>Selection</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>Selection():创建Selection对象</td></tr>\n<tr>\n<td>成员方法</td><td>1.<code>public static void sort(Comparable[] a)</code>:对数组内的元素进行排序<br/>2.<code>private static boolean greater(Comparable v,Comparable w)</code>:判断v是否大于w <br/>3.<code>private static void exch(Comparable[] a,int i,int j)</code>:交换a数组中，索引i和索引j处的值</td></tr>\n</tbody></table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 排序代码</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Selection</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 对数组a中的元素进行排序</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= a.length - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 假定本次遍历，最小 值 所在的索引是i</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> minIndex = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; a.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (greater(a[minIndex], a[j])) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 跟换最小值 所 在的索引</span></span><br><span class=\"line\">                    minIndex = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 交换i索引处和minIndex索引处的值</span></span><br><span class=\"line\">            exch(a, i, minIndex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 比较v元素是否大于w元素</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">greater</span><span class=\"params\">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v.compareTo(w) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 数组元素i和j交换位置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        Comparable t = a[i];</span><br><span class=\"line\">        a[i] = a[j];</span><br><span class=\"line\">        a[j] = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Integer[] a = &#123; <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">        Selection.sort(a);</span><br><span class=\"line\">        System.out.println(Arrays.toString(a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong>选择排序的时间复杂度分析:</strong></p>\n<p>选择排序使用了双层for循环，其中外层循环完成了数据交换，内层循环完成了数据比较，所以我们分别统计数据交换次数和数据比较次数:</p>\n<p>数据比较次数:</p>\n<p>(N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2;</p>\n<p>数据交换次数:</p>\n<p>N-1 </p>\n<p>时间复杂度:N^2/2-N/2+(N-1)=N^2/2+N/2-1;</p>\n<p>根据大O推导法则，保留最高阶项，去除常数因子，<strong><font color=\"red\">时间复杂度为O(N^2)</font></strong>;</p>\n<h3 id=\"插入排序\">插入排序<a href=\"#插入排序\" title=\"插入排序\"></a></h3><p>插入排序(Insertion sort)是一种简单直观且稳定的排序算法。</p>\n<p>需求: 排序前:{4,3,2,10,12,1,5,6} 排序后:{1,2,3,4,5,6,10,12}</p>\n<p>排序原理:</p>\n<p>1.把所有的元素分为两组，已经排序的和未排序的; </p>\n<p>2.找到未排序的组中的第一个元素，向已经排序的组中进行插入;</p>\n<p>3.倒叙遍历已经排序的元素，依次和待插入的元素进行比较，直到找到一个元素小于等于待插入元素，那么就把待 插入元素放到这个位置，其他的元素向后移动一位;</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203141622614.gif\" class=\"φcy\" alt=\"img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203122250093.png\" class=\"φcy\" alt=\"QQ20220312-225015@2x\"></p>\n<p>插入排序API设计:</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类别</th><th>Insertion</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>Insertion():创建Insertion对象</td></tr>\n<tr>\n<td>成员方法</td><td>1.public static void sort(Comparable[] a):对数组内的元素进行排序<br/>2.private static boolean greater(Comparable v,Comparable w):判断v是否大于w <br/> 3.private static void exch(Comparable[] a,int i,int j):交换a数组中，索引i和索引j处的值</td></tr>\n</tbody></table></div></div><p>插入排序代码实现:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Insertion</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 对数组a中的元素进行排序</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当前元素为a[i],依次和i前面的元素比较，找到一个小于等于a[i]的元素</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (greater(a[j - <span class=\"number\">1</span>], a[j])) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 交换元素</span></span><br><span class=\"line\">                    exch(a, j - <span class=\"number\">1</span>, j);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 找到了该元素，结束</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 比较v元素是否大于w元素</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">greater</span><span class=\"params\">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v.compareTo(w) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 数组元素i和j交换位置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        Comparable t = a[i];</span><br><span class=\"line\">        a[i] = a[j];</span><br><span class=\"line\">        a[j] = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Integer[] a = &#123; <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> &#125;;</span><br><span class=\"line\">        Insertion.sort(a);</span><br><span class=\"line\">        System.out.println(Arrays.toString(a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong>插入排序的时间复杂度分析</strong></p>\n<p>插入排序使用了双层for循环，其中内层循环的循环体是真正完成排序的代码，所以，我们分析插入排序的时间复 杂度，主要分析一下内层循环体的执行次数即可。</p>\n<p>最坏情况，也就是待排序的数组元素为{12,10,6,5,4,3,2,1}，那么: </p>\n<p>比较的次数为: </p>\n<p>(N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2; </p>\n<p>交换的次数为:</p>\n<p>(N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2; </p>\n<p>总执行次数为:</p>\n<p>(N^2/2-N/2)+(N^2/2-N/2)=N^2-N; </p>\n<p>按照大O推导法则，保留函数中的最高阶项那么最终插入排序的<strong><font color = \"red\">时间复杂度为O(N^2)</font></strong>.</p>\n<h2 id=\"高级排序\">高级排序<a href=\"#高级排序\" title=\"高级排序\"></a></h2><p>之前我们学习过基础排序，包括冒泡排序，选择排序还有插入排序，并且对他们在最坏情况下的时间复杂度做了分 析，发现都是O(N^2)，而平方阶通过我们之前学习算法分析我们知道，<strong>随着输入规模的增大，时间成本将急剧上升，所以这些基本排序方法不能处理更大规模的问题</strong>，接下来我们学习一些高级的排序算法，争取降低算法的时间 复杂度最高阶次幂。</p>\n<h3 id=\"希尔排序\">希尔排序<a href=\"#希尔排序\" title=\"希尔排序\"></a></h3><p>希尔排序<font color=\"red\"><strong>是插入排序的一种</strong></font>，又称“缩小增量排序”，是插入排序算法的一种更高效的改进版本</p>\n<p>前面学习插入排序的时候，我们会发现一个很不友好的事儿，如果已排序的分组元素为{2,5,7,9,10}，未排序的分组 元素为{1,8}，那么下一个待插入元素为1，我们需要拿着1从后往前，依次和10,9,7,5,2进行交换位置，才能完成真 正的插入，每次交换只能和相邻的元素交换位置。那如果我们要提高效率，直观的想法就是一次交换，能把1放到 更前面的位置，比如一次交换就能把1插到2和5之间，这样一次交换1就向前走了5个位置，可以减少交换的次数， 这样的需求如何实现呢?接下来我们来看看希尔排序的原理。</p>\n<p><strong>需求:</strong> </p>\n<p>排序前:{9,1,2,5,7,4,8,6,3,5} </p>\n<p>排序后:{1,2,3,4,5,5,6,7,8,9}</p>\n<p><strong>排序原理:</strong> </p>\n<ol><li>选定一个增长量h，按照增长量h作为数据分组的依据，对数据进行分组; </li>\n<li>对分好组的每一组数据完成插入排序;</li>\n<li>减小增长量，最小减为1，重复第二步操作。</li>\n</ol><p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203141627106.gif\" class=\"φcy\" alt=\"img\"></p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203131843974.png\" alt=\"QQ20220313-160451@2x\" style=\"zoom:50%;\" /><p><strong>增长量h的确定:增长量h的值每一固定的规则，我们这里采用以下规则:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> h = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(h&lt;数组的长度/<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    h=<span class=\"number\">2</span>*h+<span class=\"number\">1</span>; <span class=\"comment\">// 1 3 7 15</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 循环结束后我们就可以确定h的最大值</span></span><br><span class=\"line\">h的减小规则：</span><br><span class=\"line\">\t\th=h/<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure><p><strong>希尔排序的API设计:</strong></p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类别</th><th>shell</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>Shell():创建Shell对象</td></tr>\n<tr>\n<td>成员方法</td><td>1.<code>public static void sort(Comparable[] a)</code>:对数组内的元素进行排序<br/>2.<code>private static boolean greater(Comparable v,Comparable w)</code>:判断v是否大于w<br/>3.<code>private static void exch(Comparable[] a,int i,int j)</code>:交换a数组中，索引i和索引j处的值</td></tr>\n</tbody></table></div></div><p><strong>希尔排序的代码实现:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shell</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        对数组a中的元素进行排序</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> N = a.length;</span><br><span class=\"line\">        <span class=\"comment\">// 确定增长量h的最大值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> h = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (h &lt; N / <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            h = h * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当增长量h小于1，排序结束</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (h &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找到待插入的元素</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = h; i &lt; N; i++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// a[i]就是待插入的元素</span></span><br><span class=\"line\">                <span class=\"comment\">//把a[i]插入到a[i-h],a[i-2h],a[i-3h]...序列中</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt;= h; j -= h) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//a[j]就是待插入元素，依次和a[j-h],a[j-2h],a[j-3h]进行比较，如果a[j]小，那么 交换位置，如果不小于，a[j]大，则插入完成。</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (greater(a[j - h], a[j])) &#123;</span><br><span class=\"line\">                        exch(a, j, j - h);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            h /= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        比较v元素是否大于w元素</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">greater</span><span class=\"params\">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v.compareTo(w) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        数组元素i和j交换位置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        Comparable t = a[i];</span><br><span class=\"line\">        a[i] = a[j];</span><br><span class=\"line\">        a[j] = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Integer[] a = &#123;<span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        Shell.sort(a);</span><br><span class=\"line\">        System.out.println(Arrays.toString(a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong>希尔排序的时间复杂度分析</strong></p>\n<p>在希尔排序中，增长量h并没有固定的规则，有很多论文研究了各种不同的递增序列，但都无法证明某个序列是最 好的，对于希尔排序的时间复杂度分析，已经超出了我们课程设计的范畴，所以在这里就不做分析了。</p>\n<p>我们可以使用事后分析法对希尔排序和插入排序做性能比较。</p>\n<p>在资料的测试数据文件夹下有一个reverse_shell_insertion.txt文件，里面存放的是从100000到1的逆向数据，我们 可以根据这个批量数据完成测试。测试的思想:在执行排序前前记录一个时间，在排序完成后记录一个时间，两个 时间的时间差就是排序的耗时。</p>\n<p><strong>希尔排序和插入排序性能比较测试代码:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SortCompare</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//读取reverse_arr.txt文件</span></span><br><span class=\"line\">        BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"reverse_shell_insertion.txt\"</span>)));</span><br><span class=\"line\">        String line = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//把每一个数字存入到集合中</span></span><br><span class=\"line\">            list.add(Integer.valueOf(line));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        reader.close();</span><br><span class=\"line\">        <span class=\"comment\">//把集合转换成数组</span></span><br><span class=\"line\">        Integer[] arr = <span class=\"keyword\">new</span> Integer[list.size()];</span><br><span class=\"line\">        list.toArray(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">        testInsertion(arr);<span class=\"comment\">//使用插入排序耗时:20859</span></span><br><span class=\"line\">        testShell(arr);<span class=\"comment\">//使用希尔排序耗时:31</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testInsertion</span><span class=\"params\">(Integer[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用插入排序完成测试</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        Insertion.sort(arr);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"使用插入排序耗时:\"</span> + (end - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testShell</span><span class=\"params\">(Integer[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用希尔排序完成测试</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        Shell.sort(arr);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"使用希尔排序耗时:\"</span> + (end - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>通过测试发现，在处理大批量数据时，希尔排序的性能确实高于插入排序。</p>\n<h3 id=\"归并排序\">归并排序<a href=\"#归并排序\" title=\"归并排序\"></a></h3><h4 id=\"递归\">递归<a href=\"#递归\" title=\"递归\"></a></h4><p><strong>定义:</strong></p>\n<p>定义方法时，在方法内部调用方法本身，称之为递归.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>&#123; </span><br><span class=\"line\">  \tSystem.out.println(<span class=\"string\">\"aaaa\"</span>); </span><br><span class=\"line\">  \tshow();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong>作用:</strong></p>\n<p>它通常把一个大型复杂的问题，层层转换为一个与原问题相似的，规模较小的问题来求解。递归策略只需要少量的程序就可以描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。</p>\n<p><strong>注意事项:</strong></p>\n<p> 在递归中，不能无限制的调用自己，必须要有边界条件，能够让递归结束，因为每一次递归调用都会在栈内存开辟新的空间，重新执行方法，如果递归的层级太深，很容易造成栈内存溢出。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203131949304.png\" class=\"φcy\" alt=\"QQ20220313-194833@2x\"></p>\n<p>需求: 请定义一个方法，使用递归完成求N的阶乘;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分析:</span><br><span class=\"line\"><span class=\"number\">1</span>!: <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span>!: <span class=\"number\">2</span>*<span class=\"number\">1</span>=<span class=\"number\">2</span>*<span class=\"number\">1</span>!</span><br><span class=\"line\"><span class=\"number\">3</span>!: <span class=\"number\">3</span>*<span class=\"number\">2</span>*<span class=\"number\">1</span>=<span class=\"number\">3</span>*<span class=\"number\">2</span>!</span><br><span class=\"line\"><span class=\"number\">4</span>!: <span class=\"number\">4</span>*<span class=\"number\">3</span>*<span class=\"number\">2</span>*<span class=\"number\">1</span>=<span class=\"number\">4</span>*<span class=\"number\">3</span>!</span><br><span class=\"line\">...</span><br><span class=\"line\">n!: n*(n-<span class=\"number\">1</span>)*(n-<span class=\"number\">2</span>)...*<span class=\"number\">2</span>*<span class=\"number\">1</span>=n*(n-<span class=\"number\">1</span>)!</span><br><span class=\"line\">所以，假设有一个方法factorial(n)用来求n的阶乘，那么n的阶乘还可以表示为n*factorial(n-<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure><p><strong>代码实现:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = factorial(<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n * factorial(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"归并排序-1\">归并排序<a href=\"#归并排序-1\" title=\"归并排序\"></a></h4><p>归并排序是建立在归并操作上的一种有效的排序算法，该算法是采用分治法的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列;即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p>\n<p><strong>需求:</strong> </p>\n<p>排序前:{8,4,5,7,1,3,6,2} </p>\n<p>排序后:{1,2,3,4,5,6,7,8} </p>\n<p><strong>排序原理:</strong></p>\n<p>1.尽可能的一组数据拆分成两个元素相等的子组，并对每一个子组继续拆分，直到拆分后的每个子组的元素个数是1为止。</p>\n<p>2.将相邻的两个子组进行合并成一个有序的大组; </p>\n<p>3.不断的重复步骤2，直到最终只有一个组为止。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203141742607.gif\" class=\"φcy\" alt=\"img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203132000258.png\" class=\"φcy\" alt=\"QQ20220313-195956@2x\"></p>\n<p><strong>归并排序API设计:</strong></p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类别</th><th>Merge</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>Merge():创建Merge对象</td></tr>\n<tr>\n<td>成员方法</td><td>1.<code>public static void sort(Comparable[] a)</code>:对数组内的元素进行排序<br/>2.<code>private static void sort(Comparable[] a, int lo, int hi)</code>:对数组a中从索引lo到索引hi之间的元素进 行排序<br/>3.<code>private static void merge(Comparable[] a, int lo, int mid, int hi)</code>:从索引lo到所以mid为一个子 组，从索引mid+1到索引hi为另一个子组，把数组a中的这两个子组的数据合并成一个有序的大组(从 索引lo到索引hi)<br/>4.<code>private static boolean less(Comparable v,Comparable w)</code>:判断v是否小于w<br/>5.<code>private static void exch(Comparable[] a,int i,int j)</code>:交换a数组中，索引i和索引j处的值</td></tr>\n<tr>\n<td>成员变量</td><td>1.<code>private static Comparable[] assist</code>:完成归并操作需要的辅助数组</td></tr>\n</tbody></table></div></div><p><strong>归并原理:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排序代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Merge</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Comparable[] assist;<span class=\"comment\">//归并所需要的辅助数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        对数组a中的元素进行排序 </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span> </span>&#123;</span><br><span class=\"line\">        assist = <span class=\"keyword\">new</span> Comparable[a.length];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hi = a.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        sort(a, lo, hi);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">        对数组a中从lo到hi的元素进行排序</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hi &lt;= lo) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = lo + (hi - lo) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//对lo到mid之间的元素进行排序;</span></span><br><span class=\"line\">        sort(a, lo, mid);</span><br><span class=\"line\">        <span class=\"comment\">//对mid+1到hi之间的元素进行排序;</span></span><br><span class=\"line\">        sort(a, mid + <span class=\"number\">1</span>, hi);</span><br><span class=\"line\">        <span class=\"comment\">//对lo到mid这组数据和mid到hi这组数据进行归并 </span></span><br><span class=\"line\">        merge(a, lo, mid, hi);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">        对数组中，从lo到mid为一组，从mid+1到hi为一组，对这两组数据进行归并</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//lo到mid这组数据和mid+1到hi这组数据归并到辅助数组assist对应的索引处 </span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = lo;<span class=\"comment\">//定义一个指针，指向assist数组中开始填充数据的索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> p1 = lo;<span class=\"comment\">//定义一个指针，指向第一组数据的第一个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> p2 = mid + <span class=\"number\">1</span>;<span class=\"comment\">//定义一个指针，指向第二组数据的第一个元素</span></span><br><span class=\"line\">        <span class=\"comment\">//比较左边小组和右边小组中的元素大小，哪个小，就把哪个数据填充到assist数组中 </span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= hi) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (less(a[p1], a[p2])) &#123;</span><br><span class=\"line\">                assist[i++] = a[p1++];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                assist[i++] = a[p2++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//上面的循环结束后，如果退出循环的条件是p1&lt;=mid，则证明左边小组中的数据已经归并完毕，如果退 出循环的条件是p2&lt;=hi,则证明右边小组的数据已经填充完毕;</span></span><br><span class=\"line\">        <span class=\"comment\">//所以需要把未填充完毕的数据继续填充到assist中</span></span><br><span class=\"line\">      \t<span class=\"comment\">//下面两个循环，只会执行其中的一个 </span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p1 &lt;= mid) &#123;</span><br><span class=\"line\">            assist[i++] = a[p1++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p2 &lt;= hi) &#123;</span><br><span class=\"line\">            assist[i++] = a[p2++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//到现在为止，assist数组中，从lo到hi的元素是有序的，再把数据拷贝到a数组中对应的索引处</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = lo; index &lt;= hi; index++) &#123;</span><br><span class=\"line\">            a[index] = assist[index];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        比较v元素是否小于w元素</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v.compareTo(w) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">        数组元素i和j交换位置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        Comparable t = a[i];</span><br><span class=\"line\">        a[i] = a[j];</span><br><span class=\"line\">        a[j] = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Integer[] arr = &#123;<span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">        Merge.sort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong>归并排序时间复杂度分析:</strong></p>\n<p>归并排序是分治思想的最典型的例子，上面的算法中，对a[lo…hi]进行排序，先将它分为a[lo…mid]和a[mid+1…hi] 两部分，分别通过递归调用将他们单独排序，最后将有序的子数组归并为最终的排序结果。该递归的出口在于如果 一个数组不能再被分为两个子数组，那么就会执行merge进行归并，在归并的时候判断元素的大小进行排序。</p>\n<p>用树状图来描述归并，如果一个数组有8个元素，那么它将每次除以2找最小的子数组，共拆log8次，值为3，所以 树共有3层,那么自顶向下第k层有2^k个子数组，每个数组的长度为2^(3-k)，归并最多需要2^(3-k)次比较。因此每层 的比较次数为 2^k * 2^(3-k)=2^3,那么3层总共为 3*2^3。</p>\n<p>假设元素的个数为n，那么使用归并排序拆分的次数为log2(n),所以共log2(n)层，那么使用log2(n)替换上面3<em>2^3中 的3这个层数，最终得出的归并排序的时间复杂度为:log2(n)\\</em> 2^(log2(n))=log2(n)*n,根据大O推导法则，忽略底 数，最终归并排序的时间复杂度为O(nlogn);</p>\n<p><strong>归并排序的缺点:</strong></p>\n<p>需要申请额外的数组空间，导致空间复杂度提升，是典型的以空间换时间的操作。</p>\n<p><strong>归并排序与希尔排序性能测试:</strong></p>\n<p>之前我们通过测试可以知道希尔排序的性能是由于插入排序的，那现在学习了归并排序后，归并排序的效率与希尔排序的效率哪个高呢?我们使用同样的测试方式来完成一样这两个排序算法之间的性能比较。</p>\n<p>在资料的测试数据文件夹下有一个reverse_arr.txt文件，里面存放的是从1000000到1的逆向数据，我们可以根据 这个批量数据完成测试。测试的思想:在执行排序前前记录一个时间，在排序完成后记录一个时间，两个时间的时 间差就是排序的耗时。</p>\n<p><strong>希尔排序和插入排序性能比较测试代码:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SortCompare</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//读取a.txt文件</span></span><br><span class=\"line\">        BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"reverse_merge_shell.txt\"</span>)));</span><br><span class=\"line\">        String line = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//把每一个数字存入到集合中 </span></span><br><span class=\"line\">            list.add(Integer.valueOf(line));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        reader.close();</span><br><span class=\"line\">        <span class=\"comment\">//把集合转换成数组</span></span><br><span class=\"line\">        Integer[] arr = <span class=\"keyword\">new</span> Integer[list.size()];</span><br><span class=\"line\">        list.toArray(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">        testMerge(arr);<span class=\"comment\">//使用归并排序耗时:1200 </span></span><br><span class=\"line\">        testShell(arr);<span class=\"comment\">//使用希尔排序耗时:1277</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testMerge</span><span class=\"params\">(Integer[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用插入排序完成测试</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        Merge.sort(arr);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"使用归并排序耗时:\"</span> + (end - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testShell</span><span class=\"params\">(Integer[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用希尔排序完成测试</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        Shell.sort(arr);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"使用希尔排序耗时:\"</span> + (end - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>通过测试，发现希尔排序和归并排序在处理大批量数据时差别不是很大。</p>\n<h3 id=\"快速排序\">快速排序<a href=\"#快速排序\" title=\"快速排序\"></a></h3><p>快速排序是对冒泡排序的一种改进。它的基本思想是:通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>\n<p><strong>需求:</strong></p>\n<p>排序前:{6, 1, 2, 7, 9, 3, 4, 5, 8}</p>\n<p>排序后:{1, 2, 3, 4, 5, 6, 7, 8, 9}</p>\n<p><strong>排序原理:</strong> </p>\n<ol><li>首先设定一个分界值，通过该分界值将数组分成左右两部分;</li>\n<li>将大于或等于分界值的数据放到到数组右边，小于分界值的数据放到数组的左边。此时左边部分中各元素都小于 或等于分界值，而右边部分中各元素都大于或等于分界值;</li>\n<li>然后，左边和右边的数据可以独立排序。对于左侧的数组数据，又可以取一个分界值，将该部分数据分成左右两 部分，同样在左边放置较小值，右边放置较大值。右侧的数组数据也可以做类似处理。</li>\n<li>重复上述过程，可以看出，这是一个递归定义。通过递归将左侧部分排好序后，再递归排好右侧部分的顺序。当 左侧和右侧两个部分的数据排完序后，整个数组的排序也就完成了。</li>\n</ol><p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203141940143.gif\" class=\"φcy\" alt=\"img\"></p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203140818320.png\" alt=\"QQ20220314-081115@2x\" style=\"zoom: 50%;\" /><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类别</th><th>Quick</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>Quick():创建Quick对象</td></tr>\n<tr>\n<td>成员方法</td><td>1.public static void sort(Comparable[] a):对数组内的元素进行排序<br/>2.private static void sort(Comparable[] a, int lo, int hi):对数组a中从索引lo到索引hi之间的元素 进行排序<br/>3.public static int partition(Comparable[] a,int lo,int hi):对数组a中，从索引 lo到索引 hi之间的元 素进行分组，并返回分组界限对应的索引<br/>4.private static boolean less(Comparable v,Comparable w):判断v是否小于w<br/>5.private static void exch(Comparable[] a,int i,int j):交换a数组中，索引i和索引j处的值</td></tr>\n</tbody></table></div></div><p><strong>切分原理:</strong></p>\n<p>把一个数组切分成两个子数组的基本思想: </p>\n<p>1.找一个基准值，用两个指针分别指向数组的头部和尾部; </p>\n<p>2.先从尾部向头部开始搜索一个比基准值小的元素，搜索到即停止，并记录指针的位置; </p>\n<p>3.再从头部向尾部开始搜索一个比基准值大的元素，搜索到即停止，并记录指针的位置; </p>\n<p>4.交换当前左边指针位置和右边指针位置的元素; </p>\n<p>5.重复2,3,4步骤，直到左边指针的值大于右边指针的值停止。</p>\n<p> <strong>快速排序代码实现:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排序代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Quick</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hi = a.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        sort(a, lo, hi);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hi &lt;= lo) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//对a数组中，从lo到hi的元素进行切分</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> partition = partition(a, lo, hi);</span><br><span class=\"line\">        <span class=\"comment\">//对左边分组中的元素进行排序</span></span><br><span class=\"line\">        <span class=\"comment\">//对右边分组中的元素进行排序</span></span><br><span class=\"line\">        sort(a, lo, partition - <span class=\"number\">1</span>);</span><br><span class=\"line\">        sort(a, partition + <span class=\"number\">1</span>, hi);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\">        Comparable key = a[lo];<span class=\"comment\">//把最左边的元素当做基准值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = lo;<span class=\"comment\">//定义一个左侧指针，初始指向最左边的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = hi + <span class=\"number\">1</span>;<span class=\"comment\">//定义一个右侧指针，初始指向左右侧的元素下一个位置 //进行切分</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//先从右往左扫描，找到一个比基准值小的元素</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (less(key, a[--right])) &#123;<span class=\"comment\">//循环停止，证明找到了一个比基准值小的元素</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (right == lo) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;<span class=\"comment\">//已经扫描到最左边了，无需继续扫描</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//再从左往右扫描，找一个比基准值大的元素</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (less(a[++left], key)) &#123;<span class=\"comment\">//循环停止，证明找到了一个比基准值大的元素</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (left == hi) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;<span class=\"comment\">//已经扫描到了最右边了，无需继续扫描</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left &gt;= right) &#123; <span class=\"comment\">//扫描完了所有元素，结束循环</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//交换left和right索引处的元素</span></span><br><span class=\"line\">                exch(a, left, right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//交换最后rigth索引处和基准值所在的索引处的值</span></span><br><span class=\"line\">        exch(a, lo, right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> right;<span class=\"comment\">//right就是切分的界限</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 数组元素i和j交换位置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        Comparable t = a[i];</span><br><span class=\"line\">        a[i] = a[j];</span><br><span class=\"line\">        a[j] = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 比较v元素是否小于w元素</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v.compareTo(w) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Integer[] arr = &#123;<span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">        Quick.sort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong>快速排序和归并排序的区别:</strong></p>\n<p>快速排序是另外一种分治的排序算法，它将一个数组分成两个子数组，将两部分独立的排序。快速排序和归并排序是互补的:<strong>归并排序</strong>将数组分成两个子数组分别排序，并将有序的子数组归并从而将整个数组排序，而<strong>快速排序</strong>的方式则是当两个数组都有序时，整个数组自然就有序了。在<strong>归并排序</strong>中，一个数组被等分为两半，归并调用发生在处理整个数组之前，在<strong>快速排序</strong>中，切分数组的位置取决于数组的内容，递归调用发生在处理整个数组之后。</p>\n<p><strong>快速排序时间复杂度分析:</strong></p>\n<p>快速排序的一次切分从两头开始交替搜索，直到left和right重合，因此，一次切分算法的时间复杂度为O(n),但整个 快速排序的时间复杂度和切分的次数相关。</p>\n<p>最优情况:每一次切分选择的基准数字刚好将当前序列等分。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203141042812.png\" alt=\"QQ20220314-104209@2x\" style=\"zoom:50%;\" /><p>如果我们把数组的切分看做是一个树，那么上图就是它的最优情况的图示，共切分了logn次，所以，最优情况下快 速排序的时间复杂度为O(nlogn);</p>\n<p>最坏情况:每一次切分选择的基准数字是当前序列中最大数或者最小数，这使得每次切分都会有一个子组，那么总 共就得切分n次，所以，最坏情况下，快速排序的时间复杂度为O(n^2);</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203141044922.png\" alt=\"QQ20220314-104337@2x\" style=\"zoom:50%;\" /><p>平均情况:每一次切分选择的基准数字不是最大值和最小值，也不是中值，这种情况我们也可以用数学归纳法证明，快速排序的时间复杂度为O(nlogn),由于数学归纳法有很多数学相关的知识，容易使我们混乱，所以这里就不对 平均情况的时间复杂度做证明了。</p>\n<h3 id=\"排序的稳定性\">排序的稳定性<a href=\"#排序的稳定性\" title=\"排序的稳定性\"></a></h3><p><strong>稳定性的定义:</strong></p>\n<p>数组arr中有若干元素，其中A元素和B元素相等，并且A元素在B元素前面，如果使用某种排序算法排序后，能够保 证A元素依然在B元素的前面，可以说这个该算法是稳定的。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203142025472.png\" alt=\"QQ20220314-202433@2x-2\" style=\"zoom:50%;\" /><p><strong>稳定性的意义:</strong></p>\n<p>如果一组数据只需要一次排序，则稳定性一般是没有意义的，如果一组数据需要多次排序，稳定性是有意义的。例如要排序的内容是一组商品对象，第一次排序按照价格由低到高排序，第二次排序按照销量由高到低排序，如果第二次排序使用稳定性算法，就可以使得相同销量的对象依旧保持着价格高低的顺序展现，只有销量不同的对象才需要重新排序。这样既可以保持第一次排序的原有意义，而且可以减少系统开销。</p>\n<p><strong>第一次按照价格从低到高排序:</strong></p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>商品名称</th><th>价格</th><th>销量</th></tr>\n</thead><tbody><tr>\n<td>三星Note9</td><td>3999</td><td>21</td></tr>\n<tr>\n<td>华为mate30</td><td>4999</td><td>65</td></tr>\n<tr>\n<td>华为p30</td><td>5999</td><td>65</td></tr>\n<tr>\n<td>Iphone 11</td><td>6899</td><td>32</td></tr>\n</tbody></table></div></div><p><strong>第二次按照销量进行从高到低排序:</strong></p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>商品名称</th><th>价格</th><th>销量</th></tr>\n</thead><tbody><tr>\n<td>华为mate30</td><td>4999</td><td>65</td></tr>\n<tr>\n<td>华为p30</td><td>5999</td><td>65</td></tr>\n<tr>\n<td>Iphone 11</td><td>6899</td><td>32</td></tr>\n<tr>\n<td>三星Note9</td><td>3999</td><td>21</td></tr>\n</tbody></table></div></div><p><strong>常见排序算法的稳定性:</strong></p>\n<p><strong>冒泡排序:</strong></p>\n<p>只有当arr[i]&gt;arr[i+1]的时候，才会交换元素的位置，而相等的时候并不交换位置，所以冒泡排序是一种稳定排序 算法。</p>\n<p><strong>选择排序:</strong></p>\n<p>选择排序是给每个位置选择当前元素最小的,例如有数据{5(1)，8 ，5(2)， 2， 9 },第一遍选择到的最小元素为2，所以5(1)会和2进行交换位置，此时5(1)到了5(2)后面，破坏了稳定性，所以选择排序是一种不稳定的排序算法。 </p>\n<p><strong>插入排序:</strong></p>\n<p>比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么把要插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。</p>\n<p><strong>希尔排序:</strong></p>\n<p>希尔排序是按照不同步长对元素进行插入排序 ,虽然一次插入排序是稳定的，不会改变相同元素的相对顺序，但在 不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以希尔排序是不 稳定的。</p>\n<p><strong>归并排序:</strong></p>\n<p>归并排序在归并的过程中，只有arr[i]&lt;arr[i+1]的时候才会交换位置，如果两个元素相等则不会交换位置，所以它并不会破坏稳定性，归并排序是稳定的。</p>\n<p><strong>快速排序:</strong></p>\n<p>快速排序需要一个基准值，在基准值的右侧找一个比基准值小的元素，在基准值的左侧找一个比基准值大的元素，然后交换这两个元素，此时会破坏稳定性，所以快速排序是一种不稳定的算法。</p>\n<h1 id=\"线性表\">线性表<a href=\"#线性表\" title=\"线性表\"></a></h1><p>线性表是最基本、最简单、也是最常用的一种数据结构。一个线性表是n个具有相同特性的数据元素的有限序列。</p>\n<p><strong>前驱元素:</strong> </p>\n<p>若A元素在B元素的前面，则称A为B的前驱元素</p>\n<p><strong>后继元素:</strong> </p>\n<p>若B元素在A元素的后面，则称B为A的后继元素</p>\n<p><strong>线性表的特征:</strong> 数据元素之间具有一种“一对一”的逻辑关系。</p>\n<ol><li><p>第一个数据元素没有前驱，这个数据元素被称为头结点;</p>\n</li>\n<li><p>最后一个数据元素没有后继，这个数据元素被称为尾结点;</p>\n</li>\n<li><p>除了第一个和最后一个数据元素外，其他数据元素有且仅有一个前驱和一个后继。</p>\n</li>\n</ol><p>如果把线性表用数学语言来定义，则可以表示为(a1,…ai-1,ai,ai+1,…an)，ai-1领先于ai,ai领先于ai+1，称ai-1是ai的 前驱元素，ai+1是ai的后继元素</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203142107890.png\" alt=\"QQ20220314-210633@2x-2\" style=\"zoom:50%;\" /><p><strong>线性表的分类:</strong></p>\n<p>线性表中数据存储的方式可以是顺序存储，也可以是链式存储，按照数据的存储方式不同，可以把线性表分为顺序表和链表。</p>\n<h2 id=\"顺序表\">顺序表<a href=\"#顺序表\" title=\"顺序表\"></a></h2><p>顺序表是在计算机内存中以数组的形式保存的线性表，线性表的顺序存储是指用一组地址连续的存储单元，依次存储线性表中的各个元素、使得线性表中再逻辑结构上响铃的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203142110323.png\" alt=\"QQ20220314-210956@2x-2\" style=\"zoom:50%;\" /><h3 id=\"顺序表的实现\">顺序表的实现<a href=\"#顺序表的实现\" title=\"顺序表的实现\"></a></h3><p><strong>顺序表API设计:</strong></p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类别</th><th>SequenceList</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>SequenceList(int capacity):创建容量为capacity的SequenceList对象</td></tr>\n<tr>\n<td>成员方法</td><td>1.public void clear():空置线性表<br/>2.publicboolean isEmpty():判断线性表是否为空，是返回true，否返回false<br/>3.public int length():获取线性表中元素的个数<br/>4.public T get(int i):读取并返回线性表中的第i个元素的值<br/>5.public void insert(int i,T t):在线性表的第i个元素之前插入一个值为t的数据元素。<br/>6.public void insert(T t):向线性表中添加一个元素t<br/>7.public T remove(int i):删除并返回线性表中第i个数据元素。<br/>8.public int indexOf(T t):返回线性表中首次出现的指定的数据元素的位序号，若不存在，则返 回-1</td></tr>\n<tr>\n<td>成员变量</td><td>1.private T[] eles:存储元素的数组<br/>2.private int N:当前线性表的长度</td></tr>\n</tbody></table></div></div><p><strong>顺序表的代码实现:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//顺序表代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SequenceList</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//存储元素的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T[] eles; <span class=\"comment\">//记录当前顺序表中的元素个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SequenceList</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        eles = (T[]) <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将一个线性表置为空表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断当前线性表是否为空表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取线性表的长度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取指定位置的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= N) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"当前元素不存在!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eles[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//向线型表中添加元素t</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (N == eles.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"当前表已满\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        eles[N++] = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//在i元素处插入元素t</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> i, T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == eles.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"当前表已满\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt; N) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"插入的位置不合法\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//把i位置空出来，i位置及其后面的元素依次向后移动一位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = N; index &gt; i; index--) &#123;</span><br><span class=\"line\">            eles[index] = eles[index - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//把t放到i位置处</span></span><br><span class=\"line\">        eles[i] = t;</span><br><span class=\"line\">        <span class=\"comment\">//元素数量+1</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除指定位置i处的元素，并返回该元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt; N - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"当前要删除的元素不存在\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//记录i位置处的元素</span></span><br><span class=\"line\">        T result = eles[i];</span><br><span class=\"line\">        <span class=\"comment\">//把i位置后面的元素都向前移动一位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = i; index &lt; N - <span class=\"number\">1</span>; index++) &#123;</span><br><span class=\"line\">            eles[index] = eles[index + <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//当前元素数量-1</span></span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查找t元素第一次出现的位置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"查找的元素不合法\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (eles[i].equals(t)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SequenceListTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建顺序表对象</span></span><br><span class=\"line\">        SequenceList&lt;String&gt; sl = <span class=\"keyword\">new</span> SequenceList&lt;&gt;(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"comment\">//测试插入</span></span><br><span class=\"line\">        sl.insert(<span class=\"string\">\"姚明\"</span>);</span><br><span class=\"line\">        sl.insert(<span class=\"string\">\"科比\"</span>);</span><br><span class=\"line\">        sl.insert(<span class=\"string\">\"麦迪\"</span>);</span><br><span class=\"line\">        sl.insert(<span class=\"number\">1</span>, <span class=\"string\">\"詹姆斯\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//测试获取</span></span><br><span class=\"line\">        String getResult = sl.get(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"获取索引1处的结果为:\"</span> + getResult); <span class=\"comment\">//测试删除</span></span><br><span class=\"line\">        String removeResult = sl.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"删除的元素是:\"</span> + removeResult);</span><br><span class=\"line\">        <span class=\"comment\">//测试清空</span></span><br><span class=\"line\">        sl.clear();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"清空后的线性表中的元素个数为:\"</span> + sl.length());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"顺序表的遍历\">顺序表的遍历<a href=\"#顺序表的遍历\" title=\"顺序表的遍历\"></a></h3><p>一般作为容器存储数据，都需要向外部提供遍历的方式，因此我们需要给顺序表提供遍历方式。</p>\n<p>在java中，遍历集合的方式一般都是用的是foreach循环，如果想让我们的SequenceList也能支持foreach循环，则 需要做如下操作:</p>\n<ol><li>让SequenceList实现Iterable接口，重写iterator方法; </li>\n<li>在SequenceList内部提供一个内部类SIterator,实现Iterator接口，重写hasNext方法和next方法;</li>\n</ol><p>代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//顺序表代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SequenceList</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储元素的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T[] eles; </span><br><span class=\"line\">  \t<span class=\"comment\">// 记录当前顺序表中的元素个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SequenceList</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        eles = (T[]) <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将一个线性表置为空表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断当前线性表是否为空表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取线性表的长度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取指定位置的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= N) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"当前元素不存在!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eles[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向线型表中添加元素t</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (N == eles.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"当前表已满\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        eles[N++] = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在i元素处插入元素t</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> i, T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == eles.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"当前表已满\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt; N) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"插入的位置不合法\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 把i位置空出来，i位置及其后面的元素依次向后移动一位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = N; index &gt; i; index--) &#123;</span><br><span class=\"line\">            eles[index] = eles[index - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 把t放到i位置处</span></span><br><span class=\"line\">        eles[i] = t;</span><br><span class=\"line\">        <span class=\"comment\">// 元素数量+1</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除指定位置i处的元素，并返回该元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt; N - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"当前要删除的元素不存在\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 记录i位置处的元素</span></span><br><span class=\"line\">        T result = eles[i];</span><br><span class=\"line\">        <span class=\"comment\">// 把i位置后面的元素都向前移动一位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = i; index &lt; N - <span class=\"number\">1</span>; index++) &#123;</span><br><span class=\"line\">            eles[index] = eles[index + <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当前元素数量-1</span></span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查找t元素第一次出现的位置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"查找的元素不合法\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (eles[i].equals(t)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打印当前线性表的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showEles</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            System.out.print(eles[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;T&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SIterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cur;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SIterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.cur = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cur &lt; N;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> eles[cur++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SequenceList&lt;String&gt; squence = <span class=\"keyword\">new</span> SequenceList&lt;&gt;(<span class=\"number\">5</span>); <span class=\"comment\">// 测试遍历</span></span><br><span class=\"line\">        squence.insert(<span class=\"number\">0</span>, <span class=\"string\">\"姚明\"</span>);</span><br><span class=\"line\">        squence.insert(<span class=\"number\">1</span>, <span class=\"string\">\"科比\"</span>);</span><br><span class=\"line\">        squence.insert(<span class=\"number\">2</span>, <span class=\"string\">\"麦迪\"</span>);</span><br><span class=\"line\">        squence.insert(<span class=\"number\">3</span>, <span class=\"string\">\"艾佛森\"</span>);</span><br><span class=\"line\">        squence.insert(<span class=\"number\">4</span>, <span class=\"string\">\"卡特\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s : squence) &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"顺序表容量可变\">顺序表容量可变<a href=\"#顺序表容量可变\" title=\"顺序表容量可变\"></a></h3><p>在之前的实现中，当我们使用SequenceList时，先new SequenceList(5)创建一个对象，创建对象时就需要指定容 器的大小，初始化指定大小的数组来存储元素，当我们插入元素时，如果已经插入了5个元素，还要继续插入数 据，则会报错，就不能插入了。这种设计不符合容器的设计理念，因此我们在设计顺序表时，应该考虑它的容量的 伸缩性。</p>\n<p>考虑容器的容量伸缩性，其实就是改变存储数据元素的数组的大小，那我们需要考虑什么时候需要改变数组的大小?</p>\n<ol><li><p><strong>添加元素时:</strong> </p>\n<p>添加元素时，应该检查当前数组的大小是否能容纳新的元素，如果不能容纳，则需要创建新的容量更大的数组，我们这里创建一个是原数组两倍容量的新数组存储元素。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203151725435.png\" alt=\"QQ20220315-172435@2x-2\" style=\"zoom:50%;\" /></li>\n<li><p><strong>移除元素时:</strong></p>\n<p>移除元素时，应该检查当前数组的大小是否太大，比如正在用100个容量的数组存储10个元素，这样就会造成内存 空间的浪费，应该创建一个容量更小的数组存储元素。如果我们发现数据元素的数量不足数组容量的1/4，则创建 一个是原数组容量的1/2的新数组存储元素。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203151726147.png\" alt=\"QQ20220315-172627@2x-2\" style=\"zoom:50%;\" /></li>\n</ol><p><strong>顺序表的容量可变代码:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//顺序表代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SequenceList</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储元素的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T[] eles;</span><br><span class=\"line\">    <span class=\"comment\">// 记录当前顺序表中的元素个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SequenceList</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        eles = (T[]) <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将一个线性表置为空表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断当前线性表是否为空表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取线性表的长度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取指定位置的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= N) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"当前元素不存在!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eles[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向线型表中添加元素t</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (N == eles.length) &#123;</span><br><span class=\"line\">            resize(eles.length * <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        eles[N++] = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在i元素处插入元素t</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> i, T t)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt; N) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"插入的位置不合法\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 元素已经放满了数组，需要扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (N == eles.length) &#123;</span><br><span class=\"line\">            resize(eles.length * <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 把i位置空出来，i位置及其后面的元素依次向后移动一位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = N; index &gt; i; index--) &#123;</span><br><span class=\"line\">            eles[index] = eles[index - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 把t放到i位置处</span></span><br><span class=\"line\">        eles[i] = t;</span><br><span class=\"line\">        <span class=\"comment\">// 元素数量+1</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除指定位置i处的元素，并返回该元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt; N - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"当前要删除的元素不存在\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 记录i位置处的元素</span></span><br><span class=\"line\">        T result = eles[i];</span><br><span class=\"line\">        <span class=\"comment\">// 把i位置后面的元素都向前移动一位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = i; index &lt; N - <span class=\"number\">1</span>; index++) &#123;</span><br><span class=\"line\">            eles[index] = eles[index + <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当前元素数量-1</span></span><br><span class=\"line\">        N--;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当元素已经不足数组大小的1/4，则重置数组的大小</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (N &gt; <span class=\"number\">0</span> &amp;&amp; N &lt; eles.length / <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            resize(eles.length / <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查找t元素第一次出现的位置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"查找的元素不合法\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (eles[i].equals(t)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打印当前线性表的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showEles</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            System.out.print(eles[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;T&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SIterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cur;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SIterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.cur = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cur &lt; N;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> eles[cur++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 改变容量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> newSize)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 记录旧数组</span></span><br><span class=\"line\">        T[] temp = eles;</span><br><span class=\"line\">        <span class=\"comment\">// 创建新数组</span></span><br><span class=\"line\">        eles = (T[]) <span class=\"keyword\">new</span> Object[newSize];</span><br><span class=\"line\">        <span class=\"comment\">// 把旧数组中的元素拷贝到新数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            eles[i] = temp[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">capacity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eles.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SequenceList&lt;String&gt; squence = <span class=\"keyword\">new</span> SequenceList&lt;&gt;(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 测试遍历</span></span><br><span class=\"line\">        squence.insert(<span class=\"number\">0</span>, <span class=\"string\">\"姚明\"</span>);</span><br><span class=\"line\">        squence.insert(<span class=\"number\">1</span>, <span class=\"string\">\"科比\"</span>);</span><br><span class=\"line\">        squence.insert(<span class=\"number\">2</span>, <span class=\"string\">\"麦迪\"</span>);</span><br><span class=\"line\">        squence.insert(<span class=\"number\">3</span>, <span class=\"string\">\"艾佛森\"</span>);</span><br><span class=\"line\">        squence.insert(<span class=\"number\">4</span>, <span class=\"string\">\"卡特\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(squence.capacity());</span><br><span class=\"line\"></span><br><span class=\"line\">        squence.insert(<span class=\"number\">5</span>, <span class=\"string\">\"aa\"</span>);</span><br><span class=\"line\">        System.out.println(squence.capacity());</span><br><span class=\"line\">        squence.insert(<span class=\"number\">5</span>, <span class=\"string\">\"aa\"</span>);</span><br><span class=\"line\">        squence.insert(<span class=\"number\">5</span>, <span class=\"string\">\"aa\"</span>);</span><br><span class=\"line\">        squence.insert(<span class=\"number\">5</span>, <span class=\"string\">\"aa\"</span>);</span><br><span class=\"line\">        squence.insert(<span class=\"number\">5</span>, <span class=\"string\">\"aa\"</span>);</span><br><span class=\"line\">        squence.insert(<span class=\"number\">5</span>, <span class=\"string\">\"aa\"</span>);</span><br><span class=\"line\">        System.out.println(squence.capacity());</span><br><span class=\"line\">        squence.remove(<span class=\"number\">1</span>);</span><br><span class=\"line\">        squence.remove(<span class=\"number\">1</span>);</span><br><span class=\"line\">        squence.remove(<span class=\"number\">1</span>);</span><br><span class=\"line\">        squence.remove(<span class=\"number\">1</span>);</span><br><span class=\"line\">        squence.remove(<span class=\"number\">1</span>);</span><br><span class=\"line\">        squence.remove(<span class=\"number\">1</span>);</span><br><span class=\"line\">        squence.remove(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(squence.capacity());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"顺序表的时间复杂度\">顺序表的时间复杂度<a href=\"#顺序表的时间复杂度\" title=\"顺序表的时间复杂度\"></a></h3><p>get(i):不难看出，不论数据元素量N有多大，只需要一次eles[i]就可以获取到对应的元素，所以时间复杂度为O(1);</p>\n<p>insert(int i,T t):每一次插入，都需要把i位置后面的元素移动一次，随着元素数量N的增大，移动的元素也越多，时 间复杂为O(n);</p>\n<p>remove(int i):每一次删除，都需要把i位置后面的元素移动一次，随着数据量N的增大,移动的元素也越多，时间复 杂度为O(n);</p>\n<p>由于顺序表的底层由数组实现，数组的长度是固定的，所以在操作的过程中涉及到了容器扩容操作。这样会导致顺序表在使用过程中的时间复杂度不是线性的，在某些需要扩容的结点处，耗时会突增，尤其是元素越多，这个问题越明显</p>\n<h3 id=\"java中arraylist实现\">java中ArrayList实现<a href=\"#java中arraylist实现\" title=\"java中ArrayList实现\"></a></h3><p>java中ArrayList集合的底层也是一种顺序表，使用数组实现，同样提供了增删改查以及扩容等功能。 </p>\n<ol><li><p>是否用数组实现; 是</p>\n</li>\n<li><p>有没有扩容操作; 有</p>\n</li>\n<li><p>有没有提供遍历方式;  有</p>\n</li>\n</ol><h2 id=\"链表\">链表<a href=\"#链表\" title=\"链表\"></a></h2><p>之前我们已经使用顺序存储结构实现了线性表，我们会发现虽然顺序表的查询很快，时间复杂度为O(1),但是增删的 效率是比较低的，因为每一次增删操作都伴随着大量的数据元素移动。这个问题有没有解决方案呢?有，我们可以 使用另外一种存储结构实现线性表，链式存储结构。</p>\n<p>链表是一种物理存储单元上非连续、非顺序的存储结构，其物理结构不能只管的表示数据元素的逻辑顺序，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列的结点(链表中的每一个元素称为结点)组成，结点可以在运行时动态生成。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203151943599.png\" alt=\"QQ20220315-194301@2x-2\" style=\"zoom:50%;\" /><p> 那我们如何使用链表呢?按照面向对象的思想，我们可以设计一个类，来描述结点这个事物，用一个属性描述这个结点存储的元素，用来另外一个属性描述这个结点的下一个结点</p>\n<p><strong>结点API设计:</strong></p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类名</th><th>Node</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>Node(T t,Node next) : 创建Node对象</td></tr>\n<tr>\n<td>成员变量</td><td>T item:存储数据<br/>Node next:指向下一个结点</td></tr>\n</tbody></table></div></div><p><strong>结点类实现:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储元素</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T item;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指向下一个结点</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(T item, Node next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong>生成链表:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">//构建结点</span></span><br><span class=\"line\">    Node&lt;Integer&gt; first = <span class=\"keyword\">new</span> Node&lt;Integer&gt;(<span class=\"number\">11</span>, <span class=\"keyword\">null</span>); </span><br><span class=\"line\">    Node&lt;Integer&gt; second = <span class=\"keyword\">new</span> Node&lt;Integer&gt;(<span class=\"number\">13</span>, <span class=\"keyword\">null</span>); </span><br><span class=\"line\">    Node&lt;Integer&gt; third = <span class=\"keyword\">new</span> Node&lt;Integer&gt;(<span class=\"number\">12</span>, <span class=\"keyword\">null</span>); </span><br><span class=\"line\">    Node&lt;Integer&gt; fourth = <span class=\"keyword\">new</span> Node&lt;Integer&gt;(<span class=\"number\">8</span>, <span class=\"keyword\">null</span>); </span><br><span class=\"line\">    Node&lt;Integer&gt; fifth = <span class=\"keyword\">new</span> Node&lt;Integer&gt;(<span class=\"number\">9</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//生成链表</span></span><br><span class=\"line\">    first.next = second; </span><br><span class=\"line\">    second.next = third; </span><br><span class=\"line\">    third.next = fourth; </span><br><span class=\"line\">    fourth.next = fifth;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"单向链表\">单向链表<a href=\"#单向链表\" title=\"单向链表\"></a></h3><p>单向链表是链表的一种，它由多个结点组成，每个结点都由一个数据域和一个指针域组成，数据域用来存储数据，指针域用来指向其后继结点。链表的头结点的数据域不存储数据，指针域指向第一个真正存储数据的结点。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203151958901.png\" class=\"φcy\" alt=\"QQ20220315-195758@2x-2\"></p>\n<h4 id=\"单向链表api设计\">单向链表API设计<a href=\"#单向链表api设计\" title=\"单向链表API设计\"></a></h4><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类名</th><th>LinkList</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>LinkList() : 创建LinkList 对象</td></tr>\n<tr>\n<td>成员方法</td><td>1.public void clear():空置线性表<br/>2.publicboolean isEmpty():判断线性表是否为空，是返回true，否返回false<br/>3.public int length():获取线性表中元素的个数<br/>4.public T get(int i):读取并返回线性表中的第i个元素的值<br/>5.public void insert(T t):往线性表中添加一个元素;<br/>6.public void insert(int i,T t):在线性表的第i个元素之前插入一个值为t的数据元素。<br/>7.public T remove(int i):删除并返回线性表中第i个数据元素。<br/>8.public int indexOf(T t):返回线性表中首次出现的指定的数据元素的位序号，若不存在，则返回-1。</td></tr>\n<tr>\n<td>成员内部类</td><td>private class Node:结点类</td></tr>\n<tr>\n<td>成员变量</td><td>1.private Node head:记录首结点<br/>2.private int N:记录链表的长度</td></tr>\n</tbody></table></div></div><h4 id=\"单向链表代码实现\">单向链表代码实现<a href=\"#单向链表代码实现\" title=\"单向链表代码实现\"></a></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//单向列表代码</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkList</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录头结点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node head;</span><br><span class=\"line\">    <span class=\"comment\">// 记录链表的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化头结点</span></span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> Node(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 清空链表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        head.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        head.item = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取链表的长度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断链表是否为空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取指定位置i出的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= N) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"位置不合法!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node n = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; i; index++) &#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向链表中添加元素t</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 找到最后一个节点</span></span><br><span class=\"line\">        Node n = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node newNode = <span class=\"keyword\">new</span> Node(t, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        n.next = newNode;</span><br><span class=\"line\">        <span class=\"comment\">// 链表长度+1</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向指定位置i处，添加元素t</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> i, T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// if (i &lt; 0 || i &gt;= N) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">// throw new RuntimeException(\"位置不合法!\");</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 寻找位置i之前的结点</span></span><br><span class=\"line\">        Node pre = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt;= i - <span class=\"number\">1</span>; index++) &#123;</span><br><span class=\"line\">            pre = pre.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 位置i的结点</span></span><br><span class=\"line\">        Node curr = pre.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 构建新的结点，让新结点指向位置i的结点</span></span><br><span class=\"line\">        Node newNode = <span class=\"keyword\">new</span> Node(t, curr);</span><br><span class=\"line\">        <span class=\"comment\">// 让之前的结点指向新结点</span></span><br><span class=\"line\">        pre.next = newNode;</span><br><span class=\"line\">        <span class=\"comment\">// 长度+1</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除指定位置i处的元素，并返回被删除的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= N) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"位置不合法\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 寻找i之前的元素</span></span><br><span class=\"line\">        Node pre = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt;= i - <span class=\"number\">1</span>; index++) &#123;</span><br><span class=\"line\">            pre = pre.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当前i位置的结点</span></span><br><span class=\"line\">        Node curr = pre.next;</span><br><span class=\"line\">        <span class=\"comment\">// 前一个结点指向下一个结点，删除当前结点</span></span><br><span class=\"line\">        pre.next = curr.next;</span><br><span class=\"line\">        <span class=\"comment\">// 长度-1</span></span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查找元素t在链表中第一次出现的位置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        Node n = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; n.next != <span class=\"keyword\">null</span>; i++) &#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n.item.equals(t)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 结点类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 存储数据</span></span><br><span class=\"line\">        T item;</span><br><span class=\"line\">        <span class=\"comment\">// 下一个结点</span></span><br><span class=\"line\">        Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(T item, Node next)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;T&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LIterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node n;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LIterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.n = head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.next != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        LinkList&lt;String&gt; list = <span class=\"keyword\">new</span> LinkList&lt;&gt;();</span><br><span class=\"line\">        list.insert(<span class=\"number\">0</span>, <span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">        list.insert(<span class=\"number\">1</span>, <span class=\"string\">\"李四\"</span>);</span><br><span class=\"line\">        list.insert(<span class=\"number\">2</span>, <span class=\"string\">\"王五\"</span>);</span><br><span class=\"line\">        list.insert(<span class=\"number\">3</span>, <span class=\"string\">\"赵六\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 测试length方法</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s : list) &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(list.length());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"-------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 测试get方法</span></span><br><span class=\"line\">        System.out.println(list.get(<span class=\"number\">2</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 测试remove方法</span></span><br><span class=\"line\">        String remove = list.remove(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(remove);</span><br><span class=\"line\">        System.out.println(list.length());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"----------------\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s : list) &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"双向链表\">双向链表<a href=\"#双向链表\" title=\"双向链表\"></a></h3><p>双向链表也叫双向表，是链表的一种，它由多个结点组成，每个结点都由一个数据域和两个指针域组成，数据域用 来存储数据，其中一个指针域用来指向其后继结点，另一个指针域用来指向前驱结点。链表的头结点的数据域不存 储数据，指向前驱结点的指针域值为null，指向后继结点的指针域指向第一个真正存储数据的结点。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203152351447.png\" class=\"φcy\" alt=\"QQ20220315-235114@2x-2\"></p>\n<p>按照面向对象的思想，我们需要设计一个类，来描述结点这个事物。由于结点是属于链表的，所以我们把结点类作 为链表类的一个内部类来实现</p>\n<h4 id=\"结点api设计\">结点API设计<a href=\"#结点api设计\" title=\"结点API设计\"></a></h4><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类名</th><th>Node</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>Node(T t,Node pre,Node next) : 创建Node对象</td></tr>\n<tr>\n<td>成员变量</td><td>T item:存储数据<br/>Node next:指向下一个结点<br/>Node pre:指向上一个结点</td></tr>\n</tbody></table></div></div><h4 id=\"双向链表api设计\">双向链表API设计<a href=\"#双向链表api设计\" title=\"双向链表API设计\"></a></h4><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类名</th><th>TowWayLinkList</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>TowWayLinkList():创建TowWayLinkList对象</td></tr>\n<tr>\n<td>成员方法</td><td>1.public void clear():空置线性表<br/>2.publicboolean isEmpty():判断线性表是否为空，是返回true，否返回false<br/>3.public int length():获取线性表中元素的个数<br/>4.public T get(int i):读取并返回线性表中的第i个元素的值<br/>5.public void insert(T t) : 往线性表中添加一个元素;<br/>6.public void insert(int i,T t):在线性表的第i个元素之前插入一个值为t的数据元素。<br/>7.public T remove(int i):删除并返回线性表中第i个数据元素。<br/>8.public int indexOf(T t):返回线性表中首次出现的指定的数据元素的位序号，若不存在，则 返回-1。<br/>9.public T getFirst():获取第一个元素<br/>10.public T getLast():获取最后一个元素<br/></td></tr>\n<tr>\n<td>成员内部 类</td><td>private class Node:结点类</td></tr>\n<tr>\n<td>成员变量</td><td>1.private Node first:记录首结点<br/>2.private Node last:记录尾结点<br/>3.private int N:记录链表的长度</td></tr>\n</tbody></table></div></div><h4 id=\"双向链表代码实现\">双向链表代码实现<a href=\"#双向链表代码实现\" title=\"双向链表代码实现\"></a></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//双向链表代码</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TowWayLinkList</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首结点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 最后一个结点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node last;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TowWayLinkList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        last = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> Node(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 清空链表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        last = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        head.next = last;</span><br><span class=\"line\">        head.pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        head.item = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取链表长度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断链表是否为空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 插入元素t</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (last == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            last = <span class=\"keyword\">new</span> Node(t, head, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            head.next = last;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Node oldLast = last;</span><br><span class=\"line\">            Node node = <span class=\"keyword\">new</span> Node(t, oldLast, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            oldLast.next = node;</span><br><span class=\"line\">            last = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 长度+1</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向指定位置i处插入元素t</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> i, T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= N) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"位置不合法\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 找到位置i的前一个结点</span></span><br><span class=\"line\">        Node pre = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; i; index++) &#123;</span><br><span class=\"line\">            pre = pre.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当前结点</span></span><br><span class=\"line\">        Node curr = pre.next;</span><br><span class=\"line\">        <span class=\"comment\">// 构建新结点</span></span><br><span class=\"line\">        Node newNode = <span class=\"keyword\">new</span> Node(t, pre, curr);</span><br><span class=\"line\">        curr.pre = newNode;</span><br><span class=\"line\">        pre.next = newNode;</span><br><span class=\"line\">        <span class=\"comment\">// 长度+1</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取指定位置i处的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= N) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"位置不合法\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 寻找当前结点</span></span><br><span class=\"line\">        Node curr = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; i; index++) &#123;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找到元素t在链表中第一次出现的位置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        Node n = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; n.next != <span class=\"keyword\">null</span>; i++) &#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n.item.equals(t)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除位置i处的元素，并返回该元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= N) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"位置不合法\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 寻找i位置的前一个元素</span></span><br><span class=\"line\">        Node pre = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; i; index++) &#123;</span><br><span class=\"line\">            pre = pre.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// i位置的元素</span></span><br><span class=\"line\">        Node curr = pre.next;</span><br><span class=\"line\">        <span class=\"comment\">// i位置的下一个元素</span></span><br><span class=\"line\">        Node curr_next = curr.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        pre.next = curr_next;</span><br><span class=\"line\">        curr_next.pre = pre;</span><br><span class=\"line\">        <span class=\"comment\">// 长度-1;</span></span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取第一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getFirst</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.next.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取最后一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getLast</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> last.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;T&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TIterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node n;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TIterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.n = head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.next != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 结点类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(T item, Node pre, Node next)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.pre = pre;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 存储数据</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> T item;</span><br><span class=\"line\">        <span class=\"comment\">// 指向上一个结点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node pre;</span><br><span class=\"line\">        <span class=\"comment\">// 指向下一个结点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        TowWayLinkList&lt;String&gt; list = <span class=\"keyword\">new</span> TowWayLinkList&lt;&gt;();</span><br><span class=\"line\">        list.insert(<span class=\"string\">\"乔峰\"</span>);</span><br><span class=\"line\">        list.insert(<span class=\"string\">\"虚竹\"</span>);</span><br><span class=\"line\">        list.insert(<span class=\"string\">\"段誉\"</span>);</span><br><span class=\"line\">        list.insert(<span class=\"number\">1</span>, <span class=\"string\">\"鸠摩智\"</span>);</span><br><span class=\"line\">        list.insert(<span class=\"number\">3</span>, <span class=\"string\">\"叶二娘\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String str : list) &#123;</span><br><span class=\"line\">            System.out.println(str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"----------------------\"</span>);</span><br><span class=\"line\">        String tow = list.get(<span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(tow);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"-------------------------\"</span>);</span><br><span class=\"line\">        String remove = list.remove(<span class=\"number\">3</span>);</span><br><span class=\"line\">        System.out.println(remove);</span><br><span class=\"line\">        System.out.println(list.length());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"--------------------\"</span>);</span><br><span class=\"line\">        System.out.println(list.getFirst());</span><br><span class=\"line\">        System.out.println(list.getLast());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"java中linkedlist实现\">java中LinkedList实现<a href=\"#java中linkedlist实现\" title=\"java中LinkedList实现\"></a></h4><p>java中LinkedList集合也是使用双向链表实现，并提供了增删改查等相关方法</p>\n<ol><li><p>底层是否用双向链表实现; </p>\n</li>\n<li><p>结点类是否有三个域</p>\n</li>\n</ol><h3 id=\"链表的复杂度分析\">链表的复杂度分析<a href=\"#链表的复杂度分析\" title=\"链表的复杂度分析\"></a></h3><p>get(int i):每一次查询，都需要从链表的头部开始，依次向后查找，随着数据元素N的增多，比较的元素越多，时间复杂度为O(n)</p>\n<p>insert(int i,T t):每一次插入，需要先找到i位置的前一个元素，然后完成插入操作，随着数据元素N的增多，查找的元素越多，时间复杂度为O(n);</p>\n<p>remove(int i):每一次移除，需要先找到i位置的前一个元素，然后完成插入操作，随着数据元素N的增多，查找的元素越多，时间复杂度为O(n) </p>\n<p>相比较顺序表，链表插入和删除的时间复杂度虽然一样，但仍然有很大的优势，因为链表的物理地址是不连续的，它不需要预先指定存储空间大小，或者在存储过程中涉及到扩容等操作,,同时它并没有涉及的元素的交换。 </p>\n<p>相比较顺序表，链表的查询操作性能会比较低。因此，<font color=\"red\"><strong>如果我们的程序中查询操作比较多，建议使用顺序表，增删操作比较多，建议使用链表。</strong></font></p>\n<h3 id=\"链表反转\">链表反转<a href=\"#链表反转\" title=\"链表反转\"></a></h3><p>单链表的反转，是面试中的一个高频题目。 </p>\n<p><strong>需求:</strong></p>\n<p>原链表中数据为:1-&gt;2-&gt;3&gt;4</p>\n<p>反转后链表中数据为:4-&gt;3-&gt;2-&gt;1 </p>\n<p><strong>反转API:</strong></p>\n<p><code>public void reverse()</code>:对整个链表反转</p>\n<p><code>public Node reverse(Node curr)</code>:反转链表中的某个结点curr,并把反转后的curr结点返回</p>\n<p>使用递归可以完成反转，递归反转其实就是从原链表的第一个存数据的结点开始，依次递归调用反转每一个结点，直到把最后一个结点反转完毕，整个链表就反转完毕。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203161942697.png\" class=\"φcy\" alt=\"QQ20220316-194122@2x-2\"></p>\n<p><strong>代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//单向列表代码</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkList</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录头结点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node head;</span><br><span class=\"line\">    <span class=\"comment\">// 记录链表的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化头结点</span></span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> Node(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 清空链表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        head.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        head.item = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取链表的长度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断链表是否为空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取指定位置i出的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= N) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"位置不合法!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node n = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; i; index++) &#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向链表中添加元素t</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 找到最后一个节点</span></span><br><span class=\"line\">        Node n = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node newNode = <span class=\"keyword\">new</span> Node(t, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        n.next = newNode;</span><br><span class=\"line\">        <span class=\"comment\">// 链表长度+1</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向指定位置i处，添加元素t</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> i, T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// if (i &lt; 0 || i &gt;= N) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">// throw new RuntimeException(\"位置不合法!\");</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 寻找位置i之前的结点</span></span><br><span class=\"line\">        Node pre = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt;= i - <span class=\"number\">1</span>; index++) &#123;</span><br><span class=\"line\">            pre = pre.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 位置i的结点</span></span><br><span class=\"line\">        Node curr = pre.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 构建新的结点，让新结点指向位置i的结点</span></span><br><span class=\"line\">        Node newNode = <span class=\"keyword\">new</span> Node(t, curr);</span><br><span class=\"line\">        <span class=\"comment\">// 让之前的结点指向新结点</span></span><br><span class=\"line\">        pre.next = newNode;</span><br><span class=\"line\">        <span class=\"comment\">// 长度+1</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除指定位置i处的元素，并返回被删除的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= N) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"位置不合法\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 寻找i之前的元素</span></span><br><span class=\"line\">        Node pre = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt;= i - <span class=\"number\">1</span>; index++) &#123;</span><br><span class=\"line\">            pre = pre.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当前i位置的结点</span></span><br><span class=\"line\">        Node curr = pre.next;</span><br><span class=\"line\">        <span class=\"comment\">// 前一个结点指向下一个结点，删除当前结点</span></span><br><span class=\"line\">        pre.next = curr.next;</span><br><span class=\"line\">        <span class=\"comment\">// 长度-1</span></span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查找元素t在链表中第一次出现的位置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        Node n = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; n.next != <span class=\"keyword\">null</span>; i++) &#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n.item.equals(t)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 结点类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 存储数据</span></span><br><span class=\"line\">        T item;</span><br><span class=\"line\">        <span class=\"comment\">// 下一个结点</span></span><br><span class=\"line\">        Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(T item, Node next)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;T&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LIterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node n;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LIterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.n = head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.next != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (N == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当前是空链表，不需要反转</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        reverse(head.next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param curr 当前遍历的结点</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * @return 反转后当前结点上一个结点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">reverse</span><span class=\"params\">(Node curr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 已经到了最后一个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curr.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 反转后，头结点应该指向原链表中的最后一个元素</span></span><br><span class=\"line\">            head.next = curr;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当前结点的上一个结点</span></span><br><span class=\"line\">        Node pre = reverse(curr.next);</span><br><span class=\"line\">        pre.next = curr; </span><br><span class=\"line\">        <span class=\"comment\">// 当前结点的下一个结点设为null</span></span><br><span class=\"line\">        curr.next = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">        <span class=\"comment\">// 返回当前结点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        LinkList&lt;String&gt; list = <span class=\"keyword\">new</span> LinkList&lt;&gt;();</span><br><span class=\"line\">        list.insert(<span class=\"number\">0</span>, <span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">        list.insert(<span class=\"number\">1</span>, <span class=\"string\">\"李四\"</span>);</span><br><span class=\"line\">        list.insert(<span class=\"number\">2</span>, <span class=\"string\">\"王五\"</span>);</span><br><span class=\"line\">        list.insert(<span class=\"number\">3</span>, <span class=\"string\">\"赵六\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 测试length方法</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s : list) &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"链表长度：\"</span>+list.length());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"-------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 单链表翻转</span></span><br><span class=\"line\">        list.reverse();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"----------------\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s : list) &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"快慢指针\">快慢指针<a href=\"#快慢指针\" title=\"快慢指针\"></a></h3><p>快慢指针指的是定义两个指针，这两个指针的移动速度一块一慢，以此来制造出自己想要的差值，这个差值可以然我们找到链表上相应的结点。一般情况下，<strong>快指针的移动步长为慢指针的两倍</strong> </p>\n<h4 id=\"中间值问题\">中间值问题<a href=\"#中间值问题\" title=\"中间值问题\"></a></h4><p>我们先来看下面一段代码，然后完成需求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Node&lt;String&gt; first = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"aa\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; second = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"bb\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; third = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"cc\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; fourth = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"dd\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; fifth = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"ee\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; six = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"ff\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; seven = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"gg\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 完成结点之间的指向</span></span><br><span class=\"line\">        first.next = second;</span><br><span class=\"line\">        second.next = third;</span><br><span class=\"line\">        third.next = fourth;</span><br><span class=\"line\">        fourth.next = fifth;</span><br><span class=\"line\">        fifth.next = six;</span><br><span class=\"line\">        six.next = seven;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查找中间值</span></span><br><span class=\"line\">        String mid = getMid(first);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"中间值为:\"</span> + mid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @param first 链表的首结点</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 链表的中间结点的值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMid</span><span class=\"params\">(Node&lt;String&gt; first)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定义两个指针</span></span><br><span class=\"line\">        Node&lt;String&gt; fast = first;</span><br><span class=\"line\">        Node&lt;String&gt; slow = first;</span><br><span class=\"line\">        <span class=\"comment\">// 使用两个指针遍历链表，当快指针指向的结点没有下一个结点了，就可以结束了，慢指针指向的节点为中间值</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            fast = fast.next.next;</span><br><span class=\"line\">            slow = slow.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> slow.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 结点类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储数据</span></span><br><span class=\"line\">        T item;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 下一个结点</span></span><br><span class=\"line\">        Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(T item, Node next)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong>需求:</strong> </p>\n<p>请完善测试类Test中的getMid方法，可以找出链表的中间元素值并返回。</p>\n<p>利用快慢指针，我们把一个链表看成一个跑道，假设a的速度是b的两倍，那么当a跑完全程后，b刚好跑一半，以 此来达到找到中间节点的目的。</p>\n<p>如下图，最开始，slow与fast指针都指向链表第一个节点，然后slow每次移动一个指针，fast每次移动两个指针。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203162231068.png\" alt=\"QQ20220316-223105@2x-2\" style=\"zoom: 50%;\" /><p><strong>代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * @param first 链表的首结点</span></span><br><span class=\"line\"><span class=\"comment\">    * @return 链表的中间结点的值</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMid</span><span class=\"params\">(Node&lt;String&gt; first)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义两个指针</span></span><br><span class=\"line\">    Node&lt;String&gt; fast = first;</span><br><span class=\"line\">    Node&lt;String&gt; slow = first;</span><br><span class=\"line\">    <span class=\"comment\">// 使用两个指针遍历链表，当快指针指向的结点没有下一个结点了，就可以结束了，慢指针指向的节点为中间值</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow.item;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"单向链表是否有环问题\">单向链表是否有环问题<a href=\"#单向链表是否有环问题\" title=\"单向链表是否有环问题\"></a></h4><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203162238268.png\" alt=\"QQ20220316-223758@2x-2\" style=\"zoom:50%;\" /><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Node&lt;String&gt; first = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"aa\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; second = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"bb\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; third = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"cc\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; fourth = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"dd\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; fifth = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"ee\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; six = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"ff\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; seven = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"gg\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 完成结点之间的指向</span></span><br><span class=\"line\">        first.next = second;</span><br><span class=\"line\">        second.next = third;</span><br><span class=\"line\">        third.next = fourth;</span><br><span class=\"line\">        fourth.next = fifth;</span><br><span class=\"line\">        fifth.next = six;</span><br><span class=\"line\">        six.next = seven;</span><br><span class=\"line\">        <span class=\"comment\">// 产生环</span></span><br><span class=\"line\">        seven.next = third;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断链表是否有环</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> circle = isCircle(first);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"first链表中是否有环:\"</span> + circle);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断链表中是否有环</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * @param first 链表首结点</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * @return ture为有环，false为无环</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isCircle</span><span class=\"params\">(Node&lt;String&gt; first)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定义快慢指针</span></span><br><span class=\"line\">        Node&lt;String&gt; fast = first;</span><br><span class=\"line\">        Node&lt;String&gt; slow = first;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历链表，如果快慢指针指向了同一个结点，则证明有环</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 变换fast和slow</span></span><br><span class=\"line\">            fast = fast.next.next;</span><br><span class=\"line\">            slow = slow.next;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fast.equals(slow)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 结点类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储数据</span></span><br><span class=\"line\">        T item;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 下一个结点</span></span><br><span class=\"line\">        Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(T item, Node next)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>需求: 请完善测试类Test中的isCircle方法，返回链表中是否有环。</p>\n<p>使用快慢指针的思想，还是把链表比作一条跑道，链表中有环，那么这条跑道就是一条圆环跑道，在一条圆环跑道中，两个人有速度差，那么迟早两个人会相遇，只要相遇那么就说明有环。</p>\n<h4 id=\"有环链表入口问题\">有环链表入口问题<a href=\"#有环链表入口问题\" title=\"有环链表入口问题\"></a></h4><p><strong><font color=\"red\">图片cc就是入口</font></strong></p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203162238268.png\" alt=\"QQ20220316-223758@2x-2\" style=\"zoom:50%;\" /><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Node&lt;String&gt; first = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"aa\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; second = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"bb\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; third = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"cc\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; fourth = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"dd\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; fifth = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"ee\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; six = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"ff\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;String&gt; seven = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"gg\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 完成结点之间的指向</span></span><br><span class=\"line\">        first.next = second;</span><br><span class=\"line\">        second.next = third;</span><br><span class=\"line\">        third.next = fourth;</span><br><span class=\"line\">        fourth.next = fifth;</span><br><span class=\"line\">        fifth.next = six;</span><br><span class=\"line\">        six.next = seven;</span><br><span class=\"line\">        <span class=\"comment\">// 产生环</span></span><br><span class=\"line\">        seven.next = third;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断链表是否有环</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> circle = isCircle(first);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"first链表中是否有环:\"</span> + circle);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查找环的入口结点</span></span><br><span class=\"line\">        Node&lt;String&gt; entrance = getEntrance(first);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"first链表中环的入口结点元素为:\"</span> + entrance.item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断链表中是否有环</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * @param first 链表首结点</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * @return ture为有环，false为无环</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isCircle</span><span class=\"params\">(Node&lt;String&gt; first)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定义快慢指针</span></span><br><span class=\"line\">        Node&lt;String&gt; fast = first;</span><br><span class=\"line\">        Node&lt;String&gt; slow = first;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历链表，如果快慢指针指向了同一个结点，则证明有环</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 变换fast和slow</span></span><br><span class=\"line\">            fast = fast.next.next;</span><br><span class=\"line\">            slow = slow.next;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fast.equals(slow)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查找有环链表中环的入口结点 * <span class=\"doctag\">@param</span> first 链表首结点</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 环的入口结点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">getEntrance</span><span class=\"params\">(Node&lt;String&gt; first)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定义快慢指针</span></span><br><span class=\"line\">        Node&lt;String&gt; fast = first;</span><br><span class=\"line\">        Node&lt;String&gt; slow = first;</span><br><span class=\"line\">        Node&lt;String&gt; temp = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历链表，先找到环（快慢指针相遇），准备一个临时指针，指向链表的首结点，继续遍历，直到慢指针和临时指针相遇，那么相遇时所指向的结点就是环的入口</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 变换快慢指针</span></span><br><span class=\"line\">            fast = fast.next.next;</span><br><span class=\"line\">            slow = slow.next;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 判断快慢指针是否相遇</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fast.equals(slow)) &#123;</span><br><span class=\"line\">                temp = first;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 让临时结点变换</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                temp = temp.next;</span><br><span class=\"line\">                <span class=\"comment\">// 判断临时指针是否和慢指针相遇</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp.equals(slow)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 结点类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储数据</span></span><br><span class=\"line\">        T item;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 下一个结点</span></span><br><span class=\"line\">        Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(T item, Node next)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>需求: 请完善Test类中的getEntrance方法，查找有环链表中环的入口结点。</p>\n<p>当快慢指针相遇时，我们可以判断到链表中有环，这时重新设定一个新指针指向链表的起点，且步长与慢指针一样 为1，则慢指针与“新”指针相遇的地方就是环的入口。证明这一结论牵涉到数论的知识，这里略，只讲实现。</p>\n<h3 id=\"循环列表\">循环列表<a href=\"#循环列表\" title=\"循环列表\"></a></h3><p>循环链表，顾名思义，链表整体要形成一个圆环状。在单向链表中，最后一个节点的指针为null，不指向任何结点，因为没有下一个元素了。要实现循环链表，我们只需要让单向链表的最后一个节点的指针指向头结点即可。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203171337692.png\" class=\"φcy\" alt=\"QQ20220317-132952@2x-2\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 构建结点</span></span><br><span class=\"line\">        Node&lt;Integer&gt; first = <span class=\"keyword\">new</span> Node&lt;Integer&gt;(<span class=\"number\">1</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; second = <span class=\"keyword\">new</span> Node&lt;Integer&gt;(<span class=\"number\">2</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; third = <span class=\"keyword\">new</span> Node&lt;Integer&gt;(<span class=\"number\">3</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; fourth = <span class=\"keyword\">new</span> Node&lt;Integer&gt;(<span class=\"number\">4</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; fifth = <span class=\"keyword\">new</span> Node&lt;Integer&gt;(<span class=\"number\">5</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; six = <span class=\"keyword\">new</span> Node&lt;Integer&gt;(<span class=\"number\">6</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Node&lt;Integer&gt; seven = <span class=\"keyword\">new</span> Node&lt;Integer&gt;(<span class=\"number\">7</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 构建单链表</span></span><br><span class=\"line\">        first.next = second;</span><br><span class=\"line\">        second.next = third;</span><br><span class=\"line\">        third.next = fourth;</span><br><span class=\"line\">        fourth.next = fifth;</span><br><span class=\"line\">        fifth.next = six;</span><br><span class=\"line\">        six.next = seven;</span><br><span class=\"line\">        <span class=\"comment\">// 构建循环链表,让最后一个结点指向第一个结点</span></span><br><span class=\"line\">        seven.next = first;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"约瑟夫问题\">约瑟夫问题<a href=\"#约瑟夫问题\" title=\"约瑟夫问题\"></a></h3><p><strong>问题描述:</strong></p>\n<p>传说有这样一个故事，在罗马人占领乔塔帕特后，39 个犹太人与约瑟夫及他的朋友躲到一个洞中，39个犹太人决 定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，第一个人从1开始报数，依次往后，如果有人报数到3，那么这个人就必须自杀，然后再由他的下一个人重新从1开始报数，直到所有人都自杀身亡 为止。然而约瑟夫和他的朋友并不想遵从。于是，约瑟夫要他的朋友先假装遵从，他将朋友与自己安排在第16个与 第31个位置，从而逃过了这场死亡游戏 。</p>\n<p><strong>问题转换:</strong> </p>\n<p>41个人坐一圈，第一个人编号为1，第二个人编号为2，第n个人编号为n。 </p>\n<p>1.编号为1的人开始从1报数，依次向后，报数为3的那个人退出圈; </p>\n<p>2.自退出那个人开始的下一个人再次从1开始报数，以此类推; </p>\n<p>3.求出最后退出的那个人的编号。</p>\n<p><strong>图示:</strong></p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203171439822.png\" alt=\"QQ20220317-143843@2x-2\" style=\"zoom:50%;\" /><p><strong>解题思路:</strong></p>\n<p>1.构建含有41个结点的单向循环链表，分别存储1~41的值，分别代表这41个人; 】</p>\n<p>2.使用计数器count，记录当前报数的值;</p>\n<p>3.遍历链表，每循环一次，count++; </p>\n<p>4.判断count的值，如果是3，则从链表中删除这个结点并打印结点的值，把count重置为0;</p>\n<p><strong>代码:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.构建循环链表</span></span><br><span class=\"line\">        Node&lt;Integer&gt; first = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 记录前一个结点</span></span><br><span class=\"line\">        Node&lt;Integer&gt; pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">41</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第一个元素</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                first = <span class=\"keyword\">new</span> Node&lt;&gt;(i, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                pre = first;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 如果不是第一个结点</span></span><br><span class=\"line\">            Node&lt;Integer&gt; node = <span class=\"keyword\">new</span> Node&lt;&gt;(i, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            pre.next = node;</span><br><span class=\"line\">            pre = node;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 如果是最后一个结点，那么需要让最后一个结点的下一个结点变为first，变为循环链表了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">41</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 构建循环链表，让最后一个结点指向第一个结点</span></span><br><span class=\"line\">                pre.next = first;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2.使用count，记录当前的报数值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 3.遍历链表，每循环一次，count++</span></span><br><span class=\"line\">        <span class=\"comment\">// 记录每一次遍历拿到的结点，默认从首结点开始</span></span><br><span class=\"line\">        Node&lt;Integer&gt; n = first;</span><br><span class=\"line\">        <span class=\"comment\">// 记录当前结点的上一个结点</span></span><br><span class=\"line\">        Node&lt;Integer&gt; before = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n != n.next) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 4.判断count的值，如果是3，则从链表中删除这个结点并打印结点的值，把count重置为0;</span></span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 删除当前结点</span></span><br><span class=\"line\">                before.next = n.next;</span><br><span class=\"line\">                System.out.print(n.item + <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                count = <span class=\"number\">0</span>;</span><br><span class=\"line\">                n = n.next;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                before = n;</span><br><span class=\"line\">                n = n.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/* 打印剩余的最后那个人 */</span></span><br><span class=\"line\">        System.out.println(n.item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 结点类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储数据</span></span><br><span class=\"line\">        T item;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 下一个结点</span></span><br><span class=\"line\">        Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(T item, Node next)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"栈\">栈<a href=\"#栈\" title=\"栈\"></a></h2><h3 id=\"栈概述\">栈概述<a href=\"#栈概述\" title=\"栈概述\"></a></h3><h4 id=\"生活中的栈\">生活中的栈<a href=\"#生活中的栈\" title=\"生活中的栈\"></a></h4><p>存储货物或供旅客住宿的地方,可引申为仓库、中转站 。例如我们现在生活中的酒店，在古时候叫客栈，是供旅客 休息的地方，旅客可以进客栈休息，休息完毕后就离开客栈。</p>\n<h4 id=\"计算机中的栈\">计算机中的栈<a href=\"#计算机中的栈\" title=\"计算机中的栈\"></a></h4><p>我们把生活中的栈的概念引入到计算机中，就是供数据休息的地方，它是一种数据结构，数据既可以进入到栈中，又可以从栈中出去。</p>\n<p>栈是一种基于<strong>先进后出(FILO)的数据结构</strong>，是一种只能在一端进行插入和删除操作的特殊线性表。它按照先进后出 的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据(最后一 个数据被第一个读出来)。</p>\n<p>我们称数据进入到栈的动作为<strong>压栈</strong>，数据从栈中出去的动作为<strong>弹栈</strong>。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203172011597.png\" alt=\"QQ20220317-201026@2x-2\" style=\"zoom:50%;\" /><h3 id=\"栈的实现\">栈的实现<a href=\"#栈的实现\" title=\"栈的实现\"></a></h3><h4 id=\"栈api设计\">栈API设计<a href=\"#栈api设计\" title=\"栈API设计\"></a></h4><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类名</th><th>Stack</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>Stack):创建Stack对象</td></tr>\n<tr>\n<td>成员方法</td><td>1.public boolean isEmpty():判断栈是否为空，是返回true，否返回false <br/>2.public int size():获取栈中元素的个数<br/>3.public T pop():弹出栈顶元素<br/>4.public void push(T t):向栈中压入元素t</td></tr>\n<tr>\n<td>成员变量</td><td>1.private Node head:记录首结点<br/>2.private int N:当前栈的元素个数</td></tr>\n</tbody></table></div></div><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203172329676.png\" alt=\"QQ20220317-232622@2x-2\" style=\"zoom:50%;\" /><h4 id=\"栈代码实现\">栈代码实现<a href=\"#栈代码实现\" title=\"栈代码实现\"></a></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//栈代码</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录首结点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node head;</span><br><span class=\"line\">    <span class=\"comment\">// 栈中元素的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stack</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> Node(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断当前栈中元素个数是否为0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N == <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 把t元素压入栈</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        Node oldNext = head.next;</span><br><span class=\"line\">        Node node = <span class=\"keyword\">new</span> Node(t, oldNext);</span><br><span class=\"line\">        head.next = node;</span><br><span class=\"line\">        <span class=\"comment\">// 个数+1</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 弹出栈顶元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Node oldNext = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldNext == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 删除首个元素</span></span><br><span class=\"line\">        head.next = head.next.next;</span><br><span class=\"line\">        <span class=\"comment\">// 个数-1</span></span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldNext.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取栈中元素的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;T&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SIterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node n = head;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.next != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> T item;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(T item, Node next)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Stack&lt;String&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        stack.push(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">        stack.push(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">        stack.push(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">        stack.push(<span class=\"string\">\"d\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String str : stack) &#123;</span><br><span class=\"line\">            System.out.println(str + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"-----------------------------\"</span>);</span><br><span class=\"line\">        String result = stack.pop();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"弹出了元素:\"</span> + result);</span><br><span class=\"line\">        System.out.println(stack.size());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"案例\">案例<a href=\"#案例\" title=\"案例\"></a></h3><h4 id=\"括号匹配问题\">括号匹配问题<a href=\"#括号匹配问题\" title=\"括号匹配问题\"></a></h4><p>问题描述:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个字符串，里边可能包含<span class=\"string\">\"()\"</span>小括号和其他字符，请编写程序检查该字符串的中的小括号是否成对出现。</span><br><span class=\"line\"></span><br><span class=\"line\">例如:</span><br><span class=\"line\"><span class=\"string\">\"(上海)(长安)\"</span>:正确匹配 </span><br><span class=\"line\"><span class=\"string\">\"上海((长安))\"</span>:正确匹配 </span><br><span class=\"line\"><span class=\"string\">\"上海(长安(北京)(深圳)南京)\"</span>:正确匹配 </span><br><span class=\"line\"><span class=\"string\">\"上海(长安))\"</span>:错误匹配 </span><br><span class=\"line\"><span class=\"string\">\"((上海)长安\"</span>:错误匹配</span><br></pre></td></tr></table></figure><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203172123813.png\" alt=\"1-2\" style=\"zoom:67%;\" /><p>示例代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BracketsMatch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\"(上海(长安)())\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> match = isMatch(str);</span><br><span class=\"line\">        System.out.println(str + <span class=\"string\">\"中的括号是否匹配:\"</span> + match);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断str中的括号是否匹配</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * @param str 括号组成的字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * @return 如果匹配，返回true，如果不匹配，返回false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.创建一个栈用来存储左括号</span></span><br><span class=\"line\">        Stack&lt;String&gt; chars = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 2.从左往右遍历字符串，拿到每一个字符</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">            String currChar = str.charAt(i) + <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 3.判断该字符是不是左括号，如果是，放入栈中存储</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (currChar.equals(<span class=\"string\">\"(\"</span>)) &#123;</span><br><span class=\"line\">                chars.push(currChar);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currChar.equals(<span class=\"string\">\")\"</span>)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 4.判断该字符是不是右括号，如果不是，继续下一次循</span></span><br><span class=\"line\">                <span class=\"comment\">// 5.如果该字符是右括号，则从栈中弹出一个元素t;</span></span><br><span class=\"line\">                String t = chars.pop();</span><br><span class=\"line\">                <span class=\"comment\">// 6.判断元素t是否为null，如果不是，则证明有对应的左括号，如果不是，则证明没有对应的</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (t == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 7.循环结束后，判断栈中还有没有剩余的左括号，如果有，则不匹配，如果没有，则匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chars.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录首结点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node head;</span><br><span class=\"line\">    <span class=\"comment\">// 栈中元素的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stack</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> Node(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断当前栈中元素个数是否为0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N == <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 把t元素压入栈</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        Node oldNext = head.next;</span><br><span class=\"line\">        Node node = <span class=\"keyword\">new</span> Node(t, oldNext);</span><br><span class=\"line\">        head.next = node;</span><br><span class=\"line\">        <span class=\"comment\">// 个数+1</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 弹出栈顶元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Node oldNext = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldNext == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 删除首个元素</span></span><br><span class=\"line\">        head.next = head.next.next;</span><br><span class=\"line\">        <span class=\"comment\">// 个数-1</span></span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldNext.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取栈中元素的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;T&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SIterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node n = head;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.next != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> T item;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(T item, Node next)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"逆波兰表达式求值问题\">逆波兰表达式求值问题<a href=\"#逆波兰表达式求值问题\" title=\"逆波兰表达式求值问题\"></a></h4><p>逆波兰表达式求值问题是我们计算机中经常遇到的一类问题，要研究明白这个问题，首先我们得搞清楚什么是逆波兰表达式?要搞清楚逆波兰表达式，我们得从中缀表达式说起。</p>\n<p><strong>中缀表达式:</strong></p>\n<p>中缀表达式就是我们平常生活中使用的表达式，例如:1+3*2,2-(1+3)等等，中缀表达式的特点是:二元运算符总 是置于两个操作数中间。</p>\n<p>中缀表达式是人们最喜欢的表达式方式，因为简单，易懂。但是对于计算机来说就不是这样了，因为中缀表达式的运算顺序不具有规律性。不同的运算符具有不同的优先级，如果计算机执行中缀表达式，需要解析表达式语义，做大量的优先级相关操作。</p>\n<p><strong>逆波兰表达式(后缀表达式):</strong></p>\n<p>逆波兰表达式是波兰逻辑学家J・卢卡西维兹(J・ Lukasewicz)于1929年首先提出的一种表达式的表示方法，后缀表达式的特点:运算符总是放在跟它相关的操作数之后。</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>中缀表达式</th><th>逆波兰表达式</th></tr>\n</thead><tbody><tr>\n<td>a+b</td><td>ab+</td></tr>\n<tr>\n<td>a+(b-c)</td><td>abc-+</td></tr>\n<tr>\n<td>a+(b-c)*d</td><td>abc-d*+</td></tr>\n<tr>\n<td>a*(b-c)+d</td><td>abc-*d+</td></tr>\n</tbody></table></div></div><p><strong>需求:</strong></p>\n<p>给定一个只包含加减乘除四种运算的逆波兰表达式的数组表示方式，求出该逆波兰表达式的结果。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203172224220.png\" alt=\"QQ20220317-222114@2x-2\" style=\"zoom:50%;\" /><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReversePolishNotation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 中缀表达式3*(17-15)+18/6的逆波兰表达式如下</span></span><br><span class=\"line\">        String[] notation = &#123; <span class=\"string\">\"3\"</span>, <span class=\"string\">\"17\"</span>, <span class=\"string\">\"15\"</span>, <span class=\"string\">\"-\"</span>, <span class=\"string\">\"*\"</span>, <span class=\"string\">\"18\"</span>, <span class=\"string\">\"6\"</span>, <span class=\"string\">\"/\"</span>, <span class=\"string\">\"+\"</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = caculate(notation);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"逆波兰表达式的结果为:\"</span> + result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @param notaion 逆波兰表达式的数组表示方式</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * @return 逆波兰表达式的计算结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">caculate</span><span class=\"params\">(String[] notaion)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.创建一个栈对象oprands存储操作数</span></span><br><span class=\"line\">        Stack&lt;Integer&gt; oprands = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 2.从左往右遍历逆波兰表达式，得到每一个字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; notaion.length; i++) &#123;</span><br><span class=\"line\">            String curr = notaion[i];</span><br><span class=\"line\">            <span class=\"comment\">// 3.判断该字符串是不是运算符，如果不是，把该该操作数压入oprands栈中</span></span><br><span class=\"line\">            Integer o1;</span><br><span class=\"line\">            Integer o2;</span><br><span class=\"line\">            Integer result;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (curr) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"+\"</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// 4.如果是运算符，则从oprands栈中弹出两个操作数o1,o2</span></span><br><span class=\"line\">                    o1 = oprands.pop();</span><br><span class=\"line\">                    o2 = oprands.pop();</span><br><span class=\"line\">                    <span class=\"comment\">// 5.使用该运算符计算o1和o2，得到结果result</span></span><br><span class=\"line\">                    result = o2 + o1;</span><br><span class=\"line\">                    <span class=\"comment\">// 6.把该结果压入oprands栈中</span></span><br><span class=\"line\">                    oprands.push(result);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"-\"</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// 4.如果是运算符，则从oprands栈中弹出两个操作数o1,o2</span></span><br><span class=\"line\">                    o1 = oprands.pop();</span><br><span class=\"line\">                    o2 = oprands.pop();</span><br><span class=\"line\">                    <span class=\"comment\">// 5.使用该运算符计算o1和o2，得到结果result</span></span><br><span class=\"line\">                    result = o2 - o1;</span><br><span class=\"line\">                    <span class=\"comment\">// 6.把该结果压入oprands栈中</span></span><br><span class=\"line\">                    oprands.push(result);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"*\"</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// 4.如果是运算符，则从oprands栈中弹出两个操作数o1,o2</span></span><br><span class=\"line\">                    o1 = oprands.pop();</span><br><span class=\"line\">                    o2 = oprands.pop();</span><br><span class=\"line\">                    <span class=\"comment\">// 5.使用该运算符计算o1和o2，得到结果result</span></span><br><span class=\"line\">                    result = o2 * o1;</span><br><span class=\"line\">                    <span class=\"comment\">// 6.把该结果压入oprands栈中</span></span><br><span class=\"line\">                    oprands.push(result);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"/\"</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// 4.如果是运算符，则从oprands栈中弹出两个操作数o1,o2</span></span><br><span class=\"line\">                    o1 = oprands.pop();</span><br><span class=\"line\">                    o2 = oprands.pop();</span><br><span class=\"line\">                    <span class=\"comment\">// 5.使用该运算符计算o1和o2，得到结果result</span></span><br><span class=\"line\">                    result = o2 / o1;</span><br><span class=\"line\">                    <span class=\"comment\">// 6.把该结果压入oprands栈中</span></span><br><span class=\"line\">                    oprands.push(result);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    oprands.push(Integer.parseInt(curr));</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 7.遍历结束后，拿出栈中最终的结果返回</span></span><br><span class=\"line\">        Integer result = oprands.pop();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 栈代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录首结点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node head;</span><br><span class=\"line\">    <span class=\"comment\">// 栈中元素的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stack</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> Node(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断当前栈中元素个数是否为0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N == <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 把t元素压入栈</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        Node oldNext = head.next;</span><br><span class=\"line\">        Node node = <span class=\"keyword\">new</span> Node(t, oldNext);</span><br><span class=\"line\">        head.next = node;</span><br><span class=\"line\">        <span class=\"comment\">// 个数+1</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 弹出栈顶元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Node oldNext = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldNext == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 删除首个元素</span></span><br><span class=\"line\">        head.next = head.next.next;</span><br><span class=\"line\">        <span class=\"comment\">// 个数-1</span></span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldNext.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取栈中元素的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;T&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SIterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node n = head;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.next != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> T item;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(T item, Node next)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"队列\">队列<a href=\"#队列\" title=\"队列\"></a></h2><p>队列是一种基于先进先出(FIFO)的数据结构，是一种只能在一端进行插入,在另一端进行删除操作的特殊线性表，它按照先进先出的原则存储数据，先进入的数据，在读取数据时先读被读出来。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203172245645.png\" alt=\"QQ20220317-224247@2x-2\" style=\"zoom:50%;\" /><h3 id=\"队列的api设计\">队列的API设计<a href=\"#队列的api设计\" title=\"队列的API设计\"></a></h3><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类名</th><th>Queue</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>Queue():创建Queue对象</td></tr>\n<tr>\n<td>成员方法</td><td>1.public boolean isEmpty():判断队列是否为空，是返回true，否返回false<br/>2.public int size():获取队列中元素的个数<br/>3.public T dequeue():从队列中拿出一个元素<br/>4.public void enqueue(T t):往队列中插入一个元素</td></tr>\n<tr>\n<td>成员变量</td><td>1.private Node head:记录首结点<br/>2.private int N:当前栈的元素个数<br/>3.private Node last:记录最后一个结点</td></tr>\n</tbody></table></div></div><h3 id=\"队列的实现\">队列的实现<a href=\"#队列的实现\" title=\"队列的实现\"></a></h3><p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203190001844.png\" class=\"φcy\" alt=\"QQ20220319-000054@2x-2\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//队列代码</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录首结点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node head;</span><br><span class=\"line\">    <span class=\"comment\">// 记录最后一个结点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node last;</span><br><span class=\"line\">    <span class=\"comment\">// 记录队列中元素的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Queue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> Node(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        last = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回队列中元素的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向队列中插入元素t</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">enqueue</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (last == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            last = <span class=\"keyword\">new</span> Node(t, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            head.next = last;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Node oldLast = last;</span><br><span class=\"line\">            last = <span class=\"keyword\">new</span> Node(t, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            oldLast.next = last;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 个数+1</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从队列中拿出一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">dequeue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node oldFirst = head.next;</span><br><span class=\"line\">        head.next = oldFirst.next;</span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            last = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldFirst.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;T&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> QIterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node n = head;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.next != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> T item;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(T item, Node next)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Queue&lt;String&gt; queue = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">        queue.enqueue(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">        queue.enqueue(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">        queue.enqueue(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">        queue.enqueue(<span class=\"string\">\"d\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String str : queue) &#123;</span><br><span class=\"line\">            System.out.println(str + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"-----------------------------\"</span>);</span><br><span class=\"line\">        String result = queue.dequeue();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"出列了元素:\"</span> + result);</span><br><span class=\"line\">        System.out.println(queue.size());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"符号表\">符号表<a href=\"#符号表\" title=\"符号表\"></a></h1><p>符号表最主要的目的就是将一个键和一个值联系起来，符号表能够将存储的数据元素是一个键和一个值共同组成的键值对数据，我们可以根据键来查找对应的值。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203181701507.png\" alt=\"QQ20220318-170119@2x-2\" style=\"zoom:50%;\" /><p>符号表中，键具有唯一性。 </p>\n<p>符号表在实际生活中的使用场景是非常广泛的，见下表:</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>应用</th><th>查找目的</th><th>键</th><th>值</th></tr>\n</thead><tbody><tr>\n<td>字典</td><td>找出单词的释义</td><td>单词</td><td>释义</td></tr>\n<tr>\n<td>图书索引</td><td>找出某个术语相关的页码</td><td>术语</td><td>一串页码</td></tr>\n<tr>\n<td>网络搜索</td><td>找出某个关键字对应的网页</td><td>关键字</td><td>网页名称</td></tr>\n</tbody></table></div></div><h2 id=\"符号表api设计\">符号表API设计<a href=\"#符号表api设计\" title=\"符号表API设计\"></a></h2><p>结点类:</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类名</th><th>Node&lt;Key,Value&gt;</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>Node(Key key,Value value,Node next):创建Node对象</td></tr>\n<tr>\n<td>成员变量</td><td>1.public Key key:存储键<br/>2.public Value value:存储值<br/>3.public Node next:存储下一个结点</td></tr>\n</tbody></table></div></div><p>符号表:</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类名</th><th>SymbolTable&lt;Key,Value&gt;</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>SymbolTable():创建SymbolTable对象</td></tr>\n<tr>\n<td>成员方法</td><td>1.public Value get(Key key):根据键key，找对应的值<br/>2.public void put(Key key,Value val):向符号表中插入一个键值对<br/>3.public void delete(Key key):删除键为key的键值对<br/>4.public int size():获取符号表的大小</td></tr>\n<tr>\n<td>成员变量</td><td>1.private Node head:记录首结点<br/>2.private int N:记录符号表中键值对的个数</td></tr>\n</tbody></table></div></div><h2 id=\"符号表实现\">符号表实现<a href=\"#符号表实现\" title=\"符号表实现\"></a></h2><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203190016725.png\" alt=\"QQ20220319-001631@2x-2\" style=\"zoom: 50%;\" /><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//符号表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SymbolTable</span>&lt;<span class=\"title\">Key</span>, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录首结点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node head; <span class=\"comment\">// 记录符号表中元素的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SymbolTable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> Node(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取符号表中键值对的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 往符号表中插入键值对</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先从符号表中查找键为key的键值对</span></span><br><span class=\"line\">        Node n = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n.key.equals(key)) &#123;</span><br><span class=\"line\">                n.value = value;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 符号表中没有键为key的键值对</span></span><br><span class=\"line\">        Node oldFirst = head.next;</span><br><span class=\"line\">        Node newFirst = <span class=\"keyword\">new</span> Node(key, value, oldFirst);</span><br><span class=\"line\">        head.next = newFirst;</span><br><span class=\"line\">        <span class=\"comment\">// 个数+1</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除符号表中键为key的键值对</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        Node n = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n.next.key.equals(key)) &#123;</span><br><span class=\"line\">                n.next = n.next.next;</span><br><span class=\"line\">                N--;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从符号表中获取key对应的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        Node n = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n.key.equals(key)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> n.value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 键</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Key key;</span><br><span class=\"line\">        <span class=\"comment\">// 值</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Value value;</span><br><span class=\"line\">        <span class=\"comment\">// 下一个结点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, Node next)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SymbolTable&lt;Integer, String&gt; st = <span class=\"keyword\">new</span> SymbolTable&lt;&gt;();</span><br><span class=\"line\">        st.put(<span class=\"number\">1</span>, <span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">        st.put(<span class=\"number\">3</span>, <span class=\"string\">\"李四\"</span>);</span><br><span class=\"line\">        st.put(<span class=\"number\">5</span>, <span class=\"string\">\"王五\"</span>);</span><br><span class=\"line\">        System.out.println(st.size());</span><br><span class=\"line\">        st.put(<span class=\"number\">1</span>, <span class=\"string\">\"老三\"</span>);</span><br><span class=\"line\">        System.out.println(st.get(<span class=\"number\">1</span>));</span><br><span class=\"line\">        System.out.println(st.size());</span><br><span class=\"line\">        st.delete(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(st.size());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"有序符号表\">有序符号表<a href=\"#有序符号表\" title=\"有序符号表\"></a></h2><p>刚才实现的符号表，我们可以称之为无序符号表，因为在插入的时候，并没有考虑键值对的顺序，而在实际生活中，有时候我们需要根据键的大小进行排序，插入数据时要考虑顺序，那么接下来我们就实现一下有序符号表。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//有序符号表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderSymbolTable</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录首结点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node head;</span><br><span class=\"line\">    <span class=\"comment\">// 记录符号表中元素的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OrderSymbolTable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> Node(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取符号表中键值对的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 往符号表中插入键值对</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 记录当前结点</span></span><br><span class=\"line\">        Node curr = head.next;</span><br><span class=\"line\">        <span class=\"comment\">// 记录上一个结点</span></span><br><span class=\"line\">        Node pre = head;</span><br><span class=\"line\">        <span class=\"comment\">// 1.如果key大于当前结点的key，则一直寻找下一个结点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span> &amp;&amp; key.compareTo(curr.key) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            pre = curr;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2.如果当前结点curr的key和将要插入的key一样，则替换</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curr != <span class=\"keyword\">null</span> &amp;&amp; curr.key.compareTo(key) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            curr.value = value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3.没有找到相同的key，把新结点插入到curr之前</span></span><br><span class=\"line\">        Node newNode = <span class=\"keyword\">new</span> Node(key, value, curr);</span><br><span class=\"line\">        pre.next = newNode;</span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">// 删除符号表中键为key的键值对</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        Node n = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n.next.key.equals(key)) &#123;</span><br><span class=\"line\">                n.next = n.next.next;</span><br><span class=\"line\">                N--;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从符号表中获取key对应的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        Node n = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n.key.equals(key)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> n.value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123; <span class=\"comment\">// 键</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Key key; <span class=\"comment\">// 值</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Value value; <span class=\"comment\">// 下一个结点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, Node next)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        OrderSymbolTable&lt;Integer, String&gt; bt = <span class=\"keyword\">new</span> OrderSymbolTable&lt;&gt;();</span><br><span class=\"line\">        bt.put(<span class=\"number\">4</span>, <span class=\"string\">\"二哈\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"number\">3</span>, <span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"number\">1</span>, <span class=\"string\">\"李四\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"number\">1</span>, <span class=\"string\">\"aa\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        bt.put(<span class=\"number\">5</span>, <span class=\"string\">\"王五\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"二叉树入门\">二叉树入门<a href=\"#二叉树入门\" title=\"二叉树入门\"></a></h1><p>之前我们实现的符号表中，不难看出，符号表的增删查操作，随着元素个数N的增多，其耗时也是线性增多的，时 间复杂度都是O(n),为了提高运算效率，接下来我们学习树这种数据结构。</p>\n<h2 id=\"树的基本定义\">树的基本定义<a href=\"#树的基本定义\" title=\"树的基本定义\"></a></h2><p>树是我们计算机中非常重要的一种数据结构，同时使用树这种数据结构，可以描述现实生活中的很多事物，例如家谱、单位的组织架构、等等。</p>\n<p>树是由n(n&gt;=1)个有限结点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就 是说它是根朝上，而叶朝下的。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203182130096.png\" alt=\"QQ20220318-213012@2x-2\" style=\"zoom:50%;\" /><p>树具有以下特点:</p>\n<p>1.每个结点有零个或多个子结点;</p>\n<p>2.没有父结点的结点为根结点;</p>\n<p>3.每一个非根结点只有一个父结点; </p>\n<p>4.每个结点及其后代结点整体上可以看做是一棵树，称为当前结点的父结点的一个子树;</p>\n<h2 id=\"树的相关术语\">树的相关术语<a href=\"#树的相关术语\" title=\"树的相关术语\"></a></h2><p><strong>结点的度:</strong></p>\n<p>一个结点含有的子树的个数称为该结点的度;</p>\n<p><strong>叶结点:</strong> </p>\n<p>度为0的结点称为叶结点，也可以叫做终端结点</p>\n<p><strong>分支结点:</strong> </p>\n<p>度不为0的结点称为分支结点，也可以叫做非终端结点</p>\n<p><strong>结点的层次:</strong> </p>\n<p>从根结点开始，根结点的层次为1，根的直接后继层次为2，以此类推</p>\n<p><strong>结点的层序编号:</strong></p>\n<p>将树中的结点，按照从上层到下层，同层从左到右的次序排成一个线性序列，把他们编成连续的自然数。</p>\n<p><strong>树的度:</strong></p>\n<p>树中所有结点的度的最大值 </p>\n<p><strong>树的高度(深度):</strong></p>\n<p>树中结点的最大层次</p>\n<p><strong>森林:</strong></p>\n<p>m(m&gt;=0)个互不相交的树的集合，将一颗非空树的根结点删去，树就变成一个森林;给森林增加一个统一的根 结点，森林就变成一棵树</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203182133831.png\" alt=\"QQ20220318-213307@2x-2\" style=\"zoom:50%;\" /><p><strong>孩子结点:</strong></p>\n<p> 一个结点的直接后继结点称为该结点的孩子结点</p>\n<p><strong>双亲结点(父结点):</strong> </p>\n<p>一个结点的直接前驱称为该结点的双亲结点</p>\n<p><strong>兄弟结点:</strong></p>\n<p>同一双亲结点的孩子结点间互称兄弟结点</p>\n<h2 id=\"二叉树的基本定义\">二叉树的基本定义<a href=\"#二叉树的基本定义\" title=\"二叉树的基本定义\"></a></h2><p>二叉树就是度不超过2的树(每个结点最多有两个子结点)</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203182135846.png\" alt=\"QQ20220318-213459@2x-2\" style=\"zoom:50%;\" /><p><strong>满二叉树:</strong> </p>\n<p>一个二叉树，如果每一个层的结点树都达到最大值，则这个二叉树就是满二叉树。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203182136902.png\" alt=\"QQ20220318-213639@2x-2\" style=\"zoom:50%;\" /><p><strong>完全二叉树:</strong> </p>\n<p>叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203182138796.png\" alt=\"QQ20220318-213752@2x-2\" style=\"zoom:50%;\" /><h2 id=\"二叉查找树的创建\">二叉查找树的创建<a href=\"#二叉查找树的创建\" title=\"二叉查找树的创建\"></a></h2><h3 id=\"二叉树的结点类\">二叉树的结点类<a href=\"#二叉树的结点类\" title=\"二叉树的结点类\"></a></h3><p>根据对图的观察，我们发现二叉树其实就是由一个一个的结点及其之间的关系组成的，按照面向对象的思想，我们设计一个结点类来描述结点这个事物。</p>\n<p><strong>结点类API设计:</strong></p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类名</th><th>Node&lt;Key,Value&gt;</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>Node(Key key, Value value, Node left, Node right):创建Node对象</td></tr>\n<tr>\n<td>成员变量</td><td>1.public Node left:记录左子结点<br/>2.public Node right:记录右子结点<br/>3.public Key key:存储键<br/>4.public Value value:存储值</td></tr>\n</tbody></table></div></div><p> <strong>代码实现:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">Key</span>, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储键</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Key key;</span><br><span class=\"line\">    <span class=\"comment\">// 存储值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Value value;</span><br><span class=\"line\">    <span class=\"comment\">// 记录左子结点</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node left;</span><br><span class=\"line\">    <span class=\"comment\">// 记录右子结点</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, Node left, Node right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"二叉查找树api设计\">二叉查找树API设计<a href=\"#二叉查找树api设计\" title=\"二叉查找树API设计\"></a></h3><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类名</th><th>BinaryTree,Value value&gt;</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>BinaryTree():创建BinaryTree对象</td></tr>\n<tr>\n<td>成员变量</td><td>1.private Node root:记录根结点<br/>2.private int N:记录树中元素的个数</td></tr>\n<tr>\n<td>成员方法</td><td>1.public void put(Key key,Value value):向树中插入一个键值对<br/>2.private Node put(Node x, Key key, Value val):给指定树x上，添加键一个键值对，并返回添 加后的新树<br/>3.public Value get(Key key):根据key，从树中找出对应的值<br/>4.private Value get(Node x, Key key):从指定的树x中，找出key对应的值<br/>5.public void delete(Key key):根据key，删除树中对应的键值对<br/>6.private Node delete(Node x, Key key):删除指定树x上的键为key的键值对，并返回删除后的 新树<br/>7.public int size():获取树中元素的个数</td></tr>\n</tbody></table></div></div><h3 id=\"二叉查找树实现\">二叉查找树实现<a href=\"#二叉查找树实现\" title=\"二叉查找树实现\"></a></h3><p><strong>插入方法put实现思想:</strong></p>\n<ol><li>如果当前树中没有任何一个结点，则直接把新结点当做根结点使用 </li>\n<li>如果当前树不为空，则从根结点开始:<ul><li>如果新结点的key小于当前结点的key，则继续找当前结点的左子结点; </li>\n<li>如果新结点的key大于当前结点的key，则继续找当前结点的右子结点; </li>\n<li>如果新结点的key等于当前结点的key，则树中已经存在这样的结点，替换该结点的value值即可。</li>\n</ul></li>\n</ol><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203182153219.png\" alt=\"iShot2022-03-18 21.52.31-2\" style=\"zoom:50%;\" /><p><strong>查询方法get实现思想:</strong> </p>\n<p>从根节点开始:</p>\n<ol><li>如果要查询的key小于当前结点的key，则继续找当前结点的左子结点; </li>\n<li>如果要查询的key大于当前结点的key，则继续找当前结点的右子结点; </li>\n<li>如果要查询的key等于当前结点的key，则树中返回当前结点的value。</li>\n</ol><p><strong>删除方法delete实现思想:</strong></p>\n<ol><li><p>找到被删除结点;</p>\n</li>\n<li><p>找到被删除结点右子树中的最小结点minNode</p>\n</li>\n<li><p>删除右子树中的最小结点</p>\n</li>\n<li><p>让被删除结点的左子树称为最小结点minNode的左子树，让被删除结点的右子树称为最小结点minNode的右子树</p>\n</li>\n<li><p>让被删除结点的父节点指向最小结点minNode</p>\n</li>\n</ol><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203182205439.png\" alt=\"1-2\" style=\"zoom:50%;\" /><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//二叉树代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录根结点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\">    <span class=\"comment\">// 记录树中元素的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取树中元素的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向树中添加元素key-value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span> </span>&#123;</span><br><span class=\"line\">        root = put(root, key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向指定的树x中添加key-value,并返回添加元素后新的树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Node x, Key key, Value value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 个数+1</span></span><br><span class=\"line\">            N++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key, value, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key大于当前结点的key，继续找当前结点的右子结点</span></span><br><span class=\"line\">            x.right = put(x.right, key, value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key小于当前结点的key，继续找当前结点的左子结点</span></span><br><span class=\"line\">            x.left = put(x.left, key, value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key等于当前结点的key，把当前结点的value进行替换</span></span><br><span class=\"line\">            x.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询树中指定key对应的value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(root, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从指定的树x中，查找key对应的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key大于当前结点的key，则继续找当前结点的右子结点;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> get(x.right, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key小于当前结点的key，则继续找当前结点的左子结点;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> get(x.left, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key等于当前结点的key，则树中返回当前结点的value。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> x.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除树中key对应的value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        root = delete(root, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除指定树x中的key对应的value，并返回删除后的新树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">delete</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key大于当前结点的key，继续找当前结点的右子结点</span></span><br><span class=\"line\">            x.right = delete(x.right, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key小于当前结点的key，继续找当前结点的左子结点</span></span><br><span class=\"line\">            x.left = delete(x.left, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 个数-1</span></span><br><span class=\"line\">            N--;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key等于当前结点的key,当前x就是要删除的结点</span></span><br><span class=\"line\">            <span class=\"comment\">// 1.如果当前结点的右子树不存在，则直接返回当前结点的左子结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> x.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 2.如果当前结点的左子树不存在，则直接返回当前结点的右子结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> x.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.当前结点的左右子树都存在</span></span><br><span class=\"line\">            <span class=\"comment\">// 3.1找到右子树中最小的结点</span></span><br><span class=\"line\">            Node minNode = x.right;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (minNode.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                minNode = minNode.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.2删除右子树中最小的结点</span></span><br><span class=\"line\">            Node n = x.right;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (n.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (n.left.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    n.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    n = n.left;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.3让被删除结点的左子树称为最小结点minNode的左子树，让被删除结点的右子树称为最小结点 minNode的右子树</span></span><br><span class=\"line\">            minNode.left = x.left;</span><br><span class=\"line\">            minNode.right = x.right;</span><br><span class=\"line\">            <span class=\"comment\">// 3.4让被删除结点的父节点指向最小结点minNode</span></span><br><span class=\"line\">            x = minNode;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储键</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Key key;</span><br><span class=\"line\">        <span class=\"comment\">// 存储值</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Value value;</span><br><span class=\"line\">        <span class=\"comment\">// 记录左子结点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node left;</span><br><span class=\"line\">        <span class=\"comment\">// 记录右子结点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node right;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, Node left, Node right)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        BinaryTree&lt;Integer, String&gt; bt = <span class=\"keyword\">new</span> BinaryTree&lt;&gt;();</span><br><span class=\"line\">        bt.put(<span class=\"number\">4</span>, <span class=\"string\">\"二哈\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"number\">1</span>, <span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"number\">3</span>, <span class=\"string\">\"李四\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"number\">5</span>, <span class=\"string\">\"王五\"</span>);</span><br><span class=\"line\">        System.out.println(bt.size());</span><br><span class=\"line\">        bt.put(<span class=\"number\">1</span>, <span class=\"string\">\"老三\"</span>);</span><br><span class=\"line\">        System.out.println(bt.get(<span class=\"number\">1</span>));</span><br><span class=\"line\">        System.out.println(bt.size());</span><br><span class=\"line\">        bt.delete(<span class=\"number\">11</span>);</span><br><span class=\"line\">        System.out.println(bt.size());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"二叉查找树其他便捷方法\">二叉查找树其他便捷方法<a href=\"#二叉查找树其他便捷方法\" title=\"二叉查找树其他便捷方法\"></a></h3><h4 id=\"查找二叉树中最小的键\">查找二叉树中最小的键<a href=\"#查找二叉树中最小的键\" title=\"查找二叉树中最小的键\"></a></h4><p>在某些情况下，我们需要查找出树中存储所有元素的键的最小值，比如我们的树中存储的是学生的排名和姓名数据，那么需要查找出排名最低是多少名?这里我们设计如下两个方法来完成:</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>public Key min()</th><th>找出树中最小的键</th></tr>\n</thead><tbody><tr>\n<td>private Node min(Node x)</td><td>找出指定树x中，最小键所在的结点</td></tr>\n</tbody></table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 找出整个树中最小的键</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min(root).key;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 找出指定树x中最小的键所在的结点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">min</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(x.left);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"查找二叉树中最大的键\">查找二叉树中最大的键<a href=\"#查找二叉树中最大的键\" title=\"查找二叉树中最大的键\"></a></h4><p>在某些情况下，我们需要查找出树中存储所有元素的键的最大值，比如比如我们的树中存储的是学生的成绩和学生的姓名，那么需要查找出最高的分数是多少?这里我们同样设计两个方法来完成:</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>public Key max()</th><th>找出树中最大的键</th></tr>\n</thead><tbody><tr>\n<td>public Node max(Node x)</td><td>找出指定树x中，最大键所在的结点</td></tr>\n</tbody></table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 找出整个树中最大的键</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(root).key;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 找出指定树x中最大键所在的结点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">max</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(x.right);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"二叉树的基础遍历\">二叉树的基础遍历<a href=\"#二叉树的基础遍历\" title=\"二叉树的基础遍历\"></a></h2><p>很多情况下，我们可能需要像遍历数组数组一样，遍历树，从而拿出树中存储的每一个元素，由于树状结构和线性结构不一样，它没有办法从头开始依次向后遍历，所以存在如何遍历，也就是按照什么样的<strong>搜索路径</strong>进行遍历的问题。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203192003603.jpg\" alt=\"1647691367279-2\" style=\"zoom:50%;\" /><p>我们把树简单的画作上图中的样子，由一个根节点、一个左子树、一个右子树组成，那么按照根节点什么时候被访 问，我们可以把二叉树的遍历分为以下三种方式:</p>\n<ol><li><p><strong>前序遍历;</strong> 先访问根结点，然后再访问左子树，最后访问右子树 </p>\n</li>\n<li><p><strong>中序遍历;</strong> 先访问左子树，中间访问根节点，最后访问右子树 </p>\n</li>\n<li><p><strong>后序遍历;</strong> 先访问左子树，再访问右子树，最后访问根节点</p>\n<p>如果我们分别对下面的树使用三种遍历方式进行遍历，得到的结果如下:</p>\n</li>\n</ol><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203192017418.png\" alt=\"QQ20220319-201731@2x-2\" style=\"zoom:50%;\" /><h3 id=\"前序遍历\">前序遍历<a href=\"#前序遍历\" title=\"前序遍历\"></a></h3><p>我们在创建的树上，添加前序遍历的API:</p>\n<p><code>public Queue&lt;Key&gt; preErgodic()</code>:使用前序遍历，获取整个树中的所有键</p>\n<p><code>private void preErgodic(Node x,Queue&lt;Key&gt; keys)</code>:使用前序遍历，把指定树x中的所有键放入到keys队列中</p>\n<p>实现过程中，我们通过前序遍历，把,把每个结点的键取出，放入到队列中返回即可。 </p>\n<p><strong>实现步骤:</strong></p>\n<ol><li>把当前结点的key放入到队列中; </li>\n<li>找到当前结点的左子树，如果不为空，递归遍历左子树 </li>\n<li>找到当前结点的右子树，如果不为空，递归遍历右子树</li>\n</ol><p><strong>代码:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"><span class=\"keyword\">import</span> test1.Queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二叉树代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录根结点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\">    <span class=\"comment\">// 记录树中元素的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取树中元素的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向树中添加元素key-value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span> </span>&#123;</span><br><span class=\"line\">        root = put(root, key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向指定的树x中添加key-value,并返回添加元素后新的树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Node x, Key key, Value value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 个数+1</span></span><br><span class=\"line\">            N++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key, value, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key大于当前结点的key，继续找当前结点的右子结点</span></span><br><span class=\"line\">            x.right = put(x.right, key, value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key小于当前结点的key，继续找当前结点的左子结点</span></span><br><span class=\"line\">            x.left = put(x.left, key, value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key等于当前结点的key，把当前结点的value进行替换</span></span><br><span class=\"line\">            x.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询树中指定key对应的value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(root, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从指定的树x中，查找key对应的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key大于当前结点的key，则继续找当前结点的右子结点;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> get(x.right, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key小于当前结点的key，则继续找当前结点的左子结点;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> get(x.left, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key等于当前结点的key，则树中返回当前结点的value。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> x.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除树中key对应的value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        root = delete(root, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除指定树x中的key对应的value，并返回删除后的新树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">delete</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key大于当前结点的key，继续找当前结点的右子结点</span></span><br><span class=\"line\">            x.right = delete(x.right, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key小于当前结点的key，继续找当前结点的左子结点</span></span><br><span class=\"line\">            x.left = delete(x.left, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 个数-1</span></span><br><span class=\"line\">            N--;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key等于当前结点的key,当前x就是要删除的结点</span></span><br><span class=\"line\">            <span class=\"comment\">// 1.如果当前结点的右子树不存在，则直接返回当前结点的左子结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> x.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 2.如果当前结点的左子树不存在，则直接返回当前结点的右子结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> x.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.当前结点的左右子树都存在</span></span><br><span class=\"line\">            <span class=\"comment\">// 3.1找到右子树中最小的结点</span></span><br><span class=\"line\">            Node minNode = x.right;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (minNode.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                minNode = minNode.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.2删除右子树中最小的结点</span></span><br><span class=\"line\">            Node n = x.right;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (n.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (n.left.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    n.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    n = n.left;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.3让被删除结点的左子树称为最小结点minNode的左子树，让被删除结点的右子树称为最小结点 minNode的右子树</span></span><br><span class=\"line\">            minNode.left = x.left;</span><br><span class=\"line\">            minNode.right = x.right;</span><br><span class=\"line\">            <span class=\"comment\">// 3.4让被删除结点的父节点指向最小结点minNode</span></span><br><span class=\"line\">            x = minNode;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出整个树中最小的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(root).key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出指定树x中最小的键所在的结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">min</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> min(x.left);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出整个树中最大的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(root).key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出指定树x中最大键所在的结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">max</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max(x.right);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用前序遍历，获取整个树中的所有键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue&lt;Key&gt; <span class=\"title\">preErgodic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Key&gt; keys = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">        preErgodic(root, keys);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用前序遍历，把指定树x中的所有键放入到keys队列中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">preErgodic</span><span class=\"params\">(Node x, Queue&lt;Key&gt; keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 1.把当前结点的key放入到队列中;</span></span><br><span class=\"line\">        keys.enqueue(x.key);</span><br><span class=\"line\">        <span class=\"comment\">// 2.找到当前结点的左子树，如果不为空，递归遍历左子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            preErgodic(x.left, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3.找到当前结点的右子树，如果不为空，递归遍历右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            preErgodic(x.right, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储键</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Key key;</span><br><span class=\"line\">        <span class=\"comment\">// 存储值</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Value value;</span><br><span class=\"line\">        <span class=\"comment\">// 记录左子结点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node left;</span><br><span class=\"line\">        <span class=\"comment\">// 记录右子结点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node right;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, Node left, Node right)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        BinaryTree&lt;String, String&gt; bt = <span class=\"keyword\">new</span> BinaryTree&lt;&gt;();</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"E\"</span>, <span class=\"string\">\"5\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"B\"</span>, <span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"G\"</span>, <span class=\"string\">\"7\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"A\"</span>, <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"D\"</span>, <span class=\"string\">\"4\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"F\"</span>, <span class=\"string\">\"6\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"H\"</span>, <span class=\"string\">\"8\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"C\"</span>, <span class=\"string\">\"3\"</span>);</span><br><span class=\"line\">        Queue&lt;String&gt; queue = bt.preErgodic();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : queue) &#123;</span><br><span class=\"line\">            System.out.println(key + <span class=\"string\">\"-----\"</span> + bt.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"中序遍历\">中序遍历<a href=\"#中序遍历\" title=\"中序遍历\"></a></h3><p><code>public Queue&lt;Key&gt; midErgodic()</code>：使用中序遍历，获取整个树中的所有键</p>\n<p><code>public void midErgodic(Node x, Queue&lt;Key&gt; keys)</code>：使用中序遍历，把指定树x中的所有键放入到keys队列中</p>\n<p><strong>实现步骤：</strong></p>\n<ol><li>找到当前结点的左子树，如果不为空，递归遍历左子树</li>\n<li>把当前结点的key放入到队列中</li>\n<li>找到当前结点的右子树，如果不为空，递归遍历右子树</li>\n</ol><p><strong>代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> test1.Queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二叉树代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录根结点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\">    <span class=\"comment\">// 记录树中元素的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取树中元素的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向树中添加元素key-value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span> </span>&#123;</span><br><span class=\"line\">        root = put(root, key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向指定的树x中添加key-value,并返回添加元素后新的树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Node x, Key key, Value value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 个数+1</span></span><br><span class=\"line\">            N++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key, value, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key大于当前结点的key，继续找当前结点的右子结点</span></span><br><span class=\"line\">            x.right = put(x.right, key, value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key小于当前结点的key，继续找当前结点的左子结点</span></span><br><span class=\"line\">            x.left = put(x.left, key, value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key等于当前结点的key，把当前结点的value进行替换</span></span><br><span class=\"line\">            x.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询树中指定key对应的value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(root, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从指定的树x中，查找key对应的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key大于当前结点的key，则继续找当前结点的右子结点;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> get(x.right, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key小于当前结点的key，则继续找当前结点的左子结点;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> get(x.left, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key等于当前结点的key，则树中返回当前结点的value。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> x.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除树中key对应的value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        root = delete(root, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除指定树x中的key对应的value，并返回删除后的新树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">delete</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key大于当前结点的key，继续找当前结点的右子结点</span></span><br><span class=\"line\">            x.right = delete(x.right, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key小于当前结点的key，继续找当前结点的左子结点</span></span><br><span class=\"line\">            x.left = delete(x.left, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 个数-1</span></span><br><span class=\"line\">            N--;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key等于当前结点的key,当前x就是要删除的结点</span></span><br><span class=\"line\">            <span class=\"comment\">// 1.如果当前结点的右子树不存在，则直接返回当前结点的左子结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> x.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 2.如果当前结点的左子树不存在，则直接返回当前结点的右子结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> x.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.当前结点的左右子树都存在</span></span><br><span class=\"line\">            <span class=\"comment\">// 3.1找到右子树中最小的结点</span></span><br><span class=\"line\">            Node minNode = x.right;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (minNode.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                minNode = minNode.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.2删除右子树中最小的结点</span></span><br><span class=\"line\">            Node n = x.right;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (n.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (n.left.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    n.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    n = n.left;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.3让被删除结点的左子树称为最小结点minNode的左子树，让被删除结点的右子树称为最小结点 minNode的右子树</span></span><br><span class=\"line\">            minNode.left = x.left;</span><br><span class=\"line\">            minNode.right = x.right;</span><br><span class=\"line\">            <span class=\"comment\">// 3.4让被删除结点的父节点指向最小结点minNode</span></span><br><span class=\"line\">            x = minNode;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出整个树中最小的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(root).key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出指定树x中最小的键所在的结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">min</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> min(x.left);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出整个树中最大的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(root).key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出指定树x中最大键所在的结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">max</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max(x.right);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用前序遍历，获取整个树中的所有键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue&lt;Key&gt; <span class=\"title\">preErgodic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Key&gt; keys = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">        preErgodic(root, keys);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用前序遍历，把指定树x中的所有键放入到keys队列中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">preErgodic</span><span class=\"params\">(Node x, Queue&lt;Key&gt; keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 1.把当前结点的key放入到队列中;</span></span><br><span class=\"line\">        keys.enqueue(x.key);</span><br><span class=\"line\">        <span class=\"comment\">// 2.找到当前结点的左子树，如果不为空，递归遍历左子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            preErgodic(x.left, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3.找到当前结点的右子树，如果不为空，递归遍历右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            preErgodic(x.right, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用中序遍历获取树中所有的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue&lt;Key&gt; <span class=\"title\">midErgodic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Key&gt; keys = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">        midErgodic(root, keys);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用中序遍历，获取指定树x中所有的键，并存放到key中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">midErgodic</span><span class=\"params\">(Node x, Queue&lt;Key&gt; keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 先递归，把左子树中的键放到keys中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            midErgodic(x.left, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 把当前结点x的键放到keys中</span></span><br><span class=\"line\">        keys.enqueue(x.key);</span><br><span class=\"line\">        <span class=\"comment\">// 再递归，把右子树中的键放到keys中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            midErgodic(x.right, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储键</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Key key;</span><br><span class=\"line\">        <span class=\"comment\">// 存储值</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Value value;</span><br><span class=\"line\">        <span class=\"comment\">// 记录左子结点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node left;</span><br><span class=\"line\">        <span class=\"comment\">// 记录右子结点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node right;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, Node left, Node right)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        BinaryTree&lt;String, String&gt; bt = <span class=\"keyword\">new</span> BinaryTree&lt;&gt;();</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"E\"</span>, <span class=\"string\">\"5\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"B\"</span>, <span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"G\"</span>, <span class=\"string\">\"7\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"A\"</span>, <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"D\"</span>, <span class=\"string\">\"4\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"F\"</span>, <span class=\"string\">\"6\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"H\"</span>, <span class=\"string\">\"8\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"C\"</span>, <span class=\"string\">\"3\"</span>);</span><br><span class=\"line\">        Queue&lt;String&gt; queue = bt.midErgodic();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : queue) &#123;</span><br><span class=\"line\">            System.out.println(key + <span class=\"string\">\"-----\"</span> + bt.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"后序遍历\">后序遍历<a href=\"#后序遍历\" title=\"后序遍历\"></a></h3><p><code>public Queue&lt;Key&gt; afterErgodic()</code>: 使用后序遍历，获取整个树中的所有键</p>\n<p><code>public void afterErgodic(Node x, Queue&lt;Key&gt; keys)</code>: 使用后序遍历，把指定树x中的所有键放入到keys队列中</p>\n<p>实现步骤:</p>\n<ol><li>找到当前结点的左子树,如果不为空,递归遍历左子树</li>\n<li>找到当前结点的右子树,如果不为空,递归遍历右子树</li>\n<li>把当前结点的key放入到队列中;</li>\n</ol><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> test1.Queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二叉树代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录根结点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\">    <span class=\"comment\">// 记录树中元素的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取树中元素的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向树中添加元素key-value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span> </span>&#123;</span><br><span class=\"line\">        root = put(root, key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向指定的树x中添加key-value,并返回添加元素后新的树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Node x, Key key, Value value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 个数+1</span></span><br><span class=\"line\">            N++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key, value, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key大于当前结点的key，继续找当前结点的右子结点</span></span><br><span class=\"line\">            x.right = put(x.right, key, value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key小于当前结点的key，继续找当前结点的左子结点</span></span><br><span class=\"line\">            x.left = put(x.left, key, value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key等于当前结点的key，把当前结点的value进行替换</span></span><br><span class=\"line\">            x.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询树中指定key对应的value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(root, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从指定的树x中，查找key对应的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key大于当前结点的key，则继续找当前结点的右子结点;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> get(x.right, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key小于当前结点的key，则继续找当前结点的左子结点;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> get(x.left, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key等于当前结点的key，则树中返回当前结点的value。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> x.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除树中key对应的value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        root = delete(root, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除指定树x中的key对应的value，并返回删除后的新树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">delete</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key大于当前结点的key，继续找当前结点的右子结点</span></span><br><span class=\"line\">            x.right = delete(x.right, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key小于当前结点的key，继续找当前结点的左子结点</span></span><br><span class=\"line\">            x.left = delete(x.left, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 个数-1</span></span><br><span class=\"line\">            N--;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key等于当前结点的key,当前x就是要删除的结点</span></span><br><span class=\"line\">            <span class=\"comment\">// 1.如果当前结点的右子树不存在，则直接返回当前结点的左子结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> x.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 2.如果当前结点的左子树不存在，则直接返回当前结点的右子结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> x.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.当前结点的左右子树都存在</span></span><br><span class=\"line\">            <span class=\"comment\">// 3.1找到右子树中最小的结点</span></span><br><span class=\"line\">            Node minNode = x.right;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (minNode.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                minNode = minNode.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.2删除右子树中最小的结点</span></span><br><span class=\"line\">            Node n = x.right;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (n.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (n.left.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    n.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    n = n.left;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.3让被删除结点的左子树称为最小结点minNode的左子树，让被删除结点的右子树称为最小结点 minNode的右子树</span></span><br><span class=\"line\">            minNode.left = x.left;</span><br><span class=\"line\">            minNode.right = x.right;</span><br><span class=\"line\">            <span class=\"comment\">// 3.4让被删除结点的父节点指向最小结点minNode</span></span><br><span class=\"line\">            x = minNode;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出整个树中最小的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(root).key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出指定树x中最小的键所在的结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">min</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> min(x.left);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出整个树中最大的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(root).key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出指定树x中最大键所在的结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">max</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max(x.right);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用前序遍历，获取整个树中的所有键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue&lt;Key&gt; <span class=\"title\">preErgodic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Key&gt; keys = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">        preErgodic(root, keys);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用前序遍历，把指定树x中的所有键放入到keys队列中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">preErgodic</span><span class=\"params\">(Node x, Queue&lt;Key&gt; keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 1.把当前结点的key放入到队列中;</span></span><br><span class=\"line\">        keys.enqueue(x.key);</span><br><span class=\"line\">        <span class=\"comment\">// 2.找到当前结点的左子树，如果不为空，递归遍历左子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            preErgodic(x.left, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3.找到当前结点的右子树，如果不为空，递归遍历右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            preErgodic(x.right, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用中序遍历获取树中所有的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue&lt;Key&gt; <span class=\"title\">midErgodic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Key&gt; keys = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">        midErgodic(root, keys);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用中序遍历，获取指定树x中所有的键，并存放到key中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">midErgodic</span><span class=\"params\">(Node x, Queue&lt;Key&gt; keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 先递归，把左子树中的键放到keys中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            midErgodic(x.left, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 把当前结点x的键放到keys中</span></span><br><span class=\"line\">        keys.enqueue(x.key);</span><br><span class=\"line\">        <span class=\"comment\">// 再递归，把右子树中的键放到keys中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            midErgodic(x.right, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用后序遍历获取树中所有的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue&lt;Key&gt; <span class=\"title\">afterErgodic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Key&gt; keys = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">        afterErgodic(root, keys);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用后序遍历，获取指定树x中所有的键，并存放到key中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterErgodic</span><span class=\"params\">(Node x, Queue&lt;Key&gt; keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 先递归，把左子树中的键放到keys中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            afterErgodic(x.left, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 再递归，把右子树中的键放到keys中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            afterErgodic(x.right, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 把当前结点x的键放到keys中</span></span><br><span class=\"line\">        keys.enqueue(x.key);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储键</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Key key;</span><br><span class=\"line\">        <span class=\"comment\">// 存储值</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Value value;</span><br><span class=\"line\">        <span class=\"comment\">// 记录左子结点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node left;</span><br><span class=\"line\">        <span class=\"comment\">// 记录右子结点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node right;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, Node left, Node right)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        BinaryTree&lt;String, String&gt; bt = <span class=\"keyword\">new</span> BinaryTree&lt;&gt;();</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"E\"</span>, <span class=\"string\">\"5\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"B\"</span>, <span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"G\"</span>, <span class=\"string\">\"7\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"A\"</span>, <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"D\"</span>, <span class=\"string\">\"4\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"F\"</span>, <span class=\"string\">\"6\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"H\"</span>, <span class=\"string\">\"8\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"C\"</span>, <span class=\"string\">\"3\"</span>);</span><br><span class=\"line\">        Queue&lt;String&gt; queue = bt.afterErgodic();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : queue) &#123;</span><br><span class=\"line\">            System.out.println(key + <span class=\"string\">\"-----\"</span> + bt.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"二叉树的层序遍历\">二叉树的层序遍历<a href=\"#二叉树的层序遍历\" title=\"二叉树的层序遍历\"></a></h2><p>所谓的层序遍历,就是从根节点(第一层)开始,依次向下,获取每一层所有结点的值,有二叉树如下:</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203201439231.png\" alt=\"QQ20220320-143916@2x-2\" style=\"zoom:33%;\" /><p>那么层序遍历的结果是: EBGADFHC<br>我们在创建的树上,添加层序遍历的API :<br><code>public Queue&lt;Key&gt; layerErgodic()</code> :使用层序遍历,获取整个树中的所有键</p>\n<p><strong>实现步骤:</strong></p>\n<ol><li>创建队列,存储每一层的结点;</li>\n<li>使用循环从队列中弹出一个结点:<ul><li>获取当前结点的key ;</li>\n<li>如果当前结点的左子结点不为空,则把左子结点放入到队列中</li>\n<li>如果当前结点的右子结点不为空,则把右子结点放入到队列中</li>\n</ul></li>\n</ol><p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203201443218.png\" class=\"φcy\" alt=\"QQ20220320-144312@2x-2\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.Key;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> test1.Queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二叉树代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录根结点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\">    <span class=\"comment\">// 记录树中元素的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取树中元素的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向树中添加元素key-value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span> </span>&#123;</span><br><span class=\"line\">        root = put(root, key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向指定的树x中添加key-value,并返回添加元素后新的树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Node x, Key key, Value value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 个数+1</span></span><br><span class=\"line\">            N++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key, value, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key大于当前结点的key，继续找当前结点的右子结点</span></span><br><span class=\"line\">            x.right = put(x.right, key, value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key小于当前结点的key，继续找当前结点的左子结点</span></span><br><span class=\"line\">            x.left = put(x.left, key, value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key等于当前结点的key，把当前结点的value进行替换</span></span><br><span class=\"line\">            x.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询树中指定key对应的value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(root, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从指定的树x中，查找key对应的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key大于当前结点的key，则继续找当前结点的右子结点;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> get(x.right, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key小于当前结点的key，则继续找当前结点的左子结点;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> get(x.left, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key等于当前结点的key，则树中返回当前结点的value。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> x.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除树中key对应的value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        root = delete(root, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除指定树x中的key对应的value，并返回删除后的新树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">delete</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key大于当前结点的key，继续找当前结点的右子结点</span></span><br><span class=\"line\">            x.right = delete(x.right, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key小于当前结点的key，继续找当前结点的左子结点</span></span><br><span class=\"line\">            x.left = delete(x.left, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 个数-1</span></span><br><span class=\"line\">            N--;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key等于当前结点的key,当前x就是要删除的结点</span></span><br><span class=\"line\">            <span class=\"comment\">// 1.如果当前结点的右子树不存在，则直接返回当前结点的左子结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> x.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 2.如果当前结点的左子树不存在，则直接返回当前结点的右子结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> x.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.当前结点的左右子树都存在</span></span><br><span class=\"line\">            <span class=\"comment\">// 3.1找到右子树中最小的结点</span></span><br><span class=\"line\">            Node minNode = x.right;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (minNode.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                minNode = minNode.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.2删除右子树中最小的结点</span></span><br><span class=\"line\">            Node n = x.right;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (n.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (n.left.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    n.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    n = n.left;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.3让被删除结点的左子树称为最小结点minNode的左子树，让被删除结点的右子树称为最小结点 minNode的右子树</span></span><br><span class=\"line\">            minNode.left = x.left;</span><br><span class=\"line\">            minNode.right = x.right;</span><br><span class=\"line\">            <span class=\"comment\">// 3.4让被删除结点的父节点指向最小结点minNode</span></span><br><span class=\"line\">            x = minNode;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出整个树中最小的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(root).key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出指定树x中最小的键所在的结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">min</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> min(x.left);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出整个树中最大的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(root).key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出指定树x中最大键所在的结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">max</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max(x.right);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用前序遍历，获取整个树中的所有键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue&lt;Key&gt; <span class=\"title\">preErgodic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Key&gt; keys = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">        preErgodic(root, keys);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用前序遍历，把指定树x中的所有键放入到keys队列中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">preErgodic</span><span class=\"params\">(Node x, Queue&lt;Key&gt; keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 1.把当前结点的key放入到队列中;</span></span><br><span class=\"line\">        keys.enqueue(x.key);</span><br><span class=\"line\">        <span class=\"comment\">// 2.找到当前结点的左子树，如果不为空，递归遍历左子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            preErgodic(x.left, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3.找到当前结点的右子树，如果不为空，递归遍历右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            preErgodic(x.right, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用中序遍历获取树中所有的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue&lt;Key&gt; <span class=\"title\">midErgodic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Key&gt; keys = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">        midErgodic(root, keys);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用中序遍历，获取指定树x中所有的键，并存放到key中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">midErgodic</span><span class=\"params\">(Node x, Queue&lt;Key&gt; keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 先递归，把左子树中的键放到keys中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            midErgodic(x.left, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 把当前结点x的键放到keys中</span></span><br><span class=\"line\">        keys.enqueue(x.key);</span><br><span class=\"line\">        <span class=\"comment\">// 再递归，把右子树中的键放到keys中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            midErgodic(x.right, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用后序遍历获取树中所有的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue&lt;Key&gt; <span class=\"title\">afterErgodic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Key&gt; keys = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">        afterErgodic(root, keys);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用后序遍历，获取指定树x中所有的键，并存放到key中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterErgodic</span><span class=\"params\">(Node x, Queue&lt;Key&gt; keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 先递归，把左子树中的键放到keys中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            afterErgodic(x.left, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 再递归，把右子树中的键放到keys中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            afterErgodic(x.right, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 把当前结点x的键放到keys中</span></span><br><span class=\"line\">        keys.enqueue(x.key);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用层序遍历得到树中所有的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue&lt;Key&gt; <span class=\"title\">layerErgodic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Key&gt; keys = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">        Queue&lt;Node&gt; nodes = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">        nodes.enqueue(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!nodes.isEmpty()) &#123;</span><br><span class=\"line\">            Node x = nodes.dequeue();</span><br><span class=\"line\">            keys.enqueue(x.key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                nodes.enqueue(x.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                nodes.enqueue(x.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储键</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Key key;</span><br><span class=\"line\">        <span class=\"comment\">// 存储值</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Value value;</span><br><span class=\"line\">        <span class=\"comment\">// 记录左子结点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node left;</span><br><span class=\"line\">        <span class=\"comment\">// 记录右子结点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node right;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, Node left, Node right)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        BinaryTree&lt;String, String&gt; bt = <span class=\"keyword\">new</span> BinaryTree&lt;&gt;();</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"E\"</span>, <span class=\"string\">\"5\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"B\"</span>, <span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"G\"</span>, <span class=\"string\">\"7\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"A\"</span>, <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"D\"</span>, <span class=\"string\">\"4\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"F\"</span>, <span class=\"string\">\"6\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"H\"</span>, <span class=\"string\">\"8\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"C\"</span>, <span class=\"string\">\"3\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Queue&lt;String&gt; queue = bt.layerErgodic();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : queue) &#123;</span><br><span class=\"line\">            System.out.println(key + <span class=\"string\">\"-----\"</span> + bt.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"二叉树的最大深度问题\">二叉树的最大深度问题<a href=\"#二叉树的最大深度问题\" title=\"二叉树的最大深度问题\"></a></h2><p><strong>需求:</strong></p>\n<p>给定一棵树,请计算树的最大深度(树的根节点到最远叶子结点的最长路径上的结点数) ;</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203201642811.png\" alt=\"QQ20220320-164202@2x-2\" style=\"zoom:33%;\" /><p>上面这棵树的最大深度为4；</p>\n<p><strong>实现：</strong></p>\n<p><code>public int maxDepth()</code>：计算整个树的最大深度</p>\n<p><code>private int maxDepth(Node x)</code>：计算指定树x的最大深度</p>\n<p><strong>实现步骤：</strong></p>\n<ol><li><p>如果根结点为空,则最大深度为0 ;</p>\n</li>\n<li><p>计算左子树的最大深度;</p>\n</li>\n<li><p>计算右子树的最大深度;</p>\n</li>\n<li><p>当前树的最大深度=左子树的最大深度和右子树的最大深度中的较大者+1</p>\n</li>\n</ol><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.Key;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> test1.Queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二叉树代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span>&lt;<span class=\"title\">Key</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Key</span>&gt;, <span class=\"title\">Value</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录根结点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\">    <span class=\"comment\">// 记录树中元素的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取树中元素的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向树中添加元素key-value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Key key, Value value)</span> </span>&#123;</span><br><span class=\"line\">        root = put(root, key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向指定的树x中添加key-value,并返回添加元素后新的树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">put</span><span class=\"params\">(Node x, Key key, Value value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 个数+1</span></span><br><span class=\"line\">            N++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key, value, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key大于当前结点的key，继续找当前结点的右子结点</span></span><br><span class=\"line\">            x.right = put(x.right, key, value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key小于当前结点的key，继续找当前结点的左子结点</span></span><br><span class=\"line\">            x.left = put(x.left, key, value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key等于当前结点的key，把当前结点的value进行替换</span></span><br><span class=\"line\">            x.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询树中指定key对应的value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(root, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从指定的树x中，查找key对应的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Value <span class=\"title\">get</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key大于当前结点的key，则继续找当前结点的右子结点;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> get(x.right, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key小于当前结点的key，则继续找当前结点的左子结点;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> get(x.left, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要查询的key等于当前结点的key，则树中返回当前结点的value。</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> x.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除树中key对应的value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(Key key)</span> </span>&#123;</span><br><span class=\"line\">        root = delete(root, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除指定树x中的key对应的value，并返回删除后的新树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">delete</span><span class=\"params\">(Node x, Key key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cmp = key.compareTo(x.key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key大于当前结点的key，继续找当前结点的右子结点</span></span><br><span class=\"line\">            x.right = delete(x.right, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key小于当前结点的key，继续找当前结点的左子结点</span></span><br><span class=\"line\">            x.left = delete(x.left, key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 个数-1</span></span><br><span class=\"line\">            N--;</span><br><span class=\"line\">            <span class=\"comment\">// 新结点的key等于当前结点的key,当前x就是要删除的结点</span></span><br><span class=\"line\">            <span class=\"comment\">// 1.如果当前结点的右子树不存在，则直接返回当前结点的左子结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> x.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 2.如果当前结点的左子树不存在，则直接返回当前结点的右子结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> x.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.当前结点的左右子树都存在</span></span><br><span class=\"line\">            <span class=\"comment\">// 3.1找到右子树中最小的结点</span></span><br><span class=\"line\">            Node minNode = x.right;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (minNode.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                minNode = minNode.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.2删除右子树中最小的结点</span></span><br><span class=\"line\">            Node n = x.right;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (n.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (n.left.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    n.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    n = n.left;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.3让被删除结点的左子树称为最小结点minNode的左子树，让被删除结点的右子树称为最小结点 minNode的右子树</span></span><br><span class=\"line\">            minNode.left = x.left;</span><br><span class=\"line\">            minNode.right = x.right;</span><br><span class=\"line\">            <span class=\"comment\">// 3.4让被删除结点的父节点指向最小结点minNode</span></span><br><span class=\"line\">            x = minNode;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出整个树中最小的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">min</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(root).key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出指定树x中最小的键所在的结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">min</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> min(x.left);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出整个树中最大的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Key <span class=\"title\">max</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(root).key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找出指定树x中最大键所在的结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">max</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max(x.right);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用前序遍历，获取整个树中的所有键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue&lt;Key&gt; <span class=\"title\">preErgodic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Key&gt; keys = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">        preErgodic(root, keys);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用前序遍历，把指定树x中的所有键放入到keys队列中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">preErgodic</span><span class=\"params\">(Node x, Queue&lt;Key&gt; keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 1.把当前结点的key放入到队列中;</span></span><br><span class=\"line\">        keys.enqueue(x.key);</span><br><span class=\"line\">        <span class=\"comment\">// 2.找到当前结点的左子树，如果不为空，递归遍历左子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            preErgodic(x.left, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3.找到当前结点的右子树，如果不为空，递归遍历右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            preErgodic(x.right, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用中序遍历获取树中所有的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue&lt;Key&gt; <span class=\"title\">midErgodic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Key&gt; keys = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">        midErgodic(root, keys);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用中序遍历，获取指定树x中所有的键，并存放到key中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">midErgodic</span><span class=\"params\">(Node x, Queue&lt;Key&gt; keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 先递归，把左子树中的键放到keys中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            midErgodic(x.left, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 把当前结点x的键放到keys中</span></span><br><span class=\"line\">        keys.enqueue(x.key);</span><br><span class=\"line\">        <span class=\"comment\">// 再递归，把右子树中的键放到keys中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            midErgodic(x.right, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用后序遍历获取树中所有的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue&lt;Key&gt; <span class=\"title\">afterErgodic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Key&gt; keys = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">        afterErgodic(root, keys);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用后序遍历，获取指定树x中所有的键，并存放到key中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterErgodic</span><span class=\"params\">(Node x, Queue&lt;Key&gt; keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 先递归，把左子树中的键放到keys中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            afterErgodic(x.left, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 再递归，把右子树中的键放到keys中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            afterErgodic(x.right, keys);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 把当前结点x的键放到keys中</span></span><br><span class=\"line\">        keys.enqueue(x.key);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用层序遍历得到树中所有的键</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue&lt;Key&gt; <span class=\"title\">layerErgodic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Key&gt; keys = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">        Queue&lt;Node&gt; nodes = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">        nodes.enqueue(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!nodes.isEmpty()) &#123;</span><br><span class=\"line\">            Node x = nodes.dequeue();</span><br><span class=\"line\">            keys.enqueue(x.key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                nodes.enqueue(x.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                nodes.enqueue(x.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取整个树的最大深度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxDepth(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取指定树x的最大深度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(Node x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// x的最大深度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 左子树的最大深度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxL = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 右子树的最大深度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxR = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算x结点左子树的最大深度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            maxL = maxDepth(x.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 计算x结点右子树的最大深度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            maxR = maxDepth(x.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 比较左右子树最大深度，取较大值+1</span></span><br><span class=\"line\">        max = maxL &gt; maxR ? maxL + <span class=\"number\">1</span> : maxR + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存储键</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Key key;</span><br><span class=\"line\">        <span class=\"comment\">// 存储值</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Value value;</span><br><span class=\"line\">        <span class=\"comment\">// 记录左子结点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node left;</span><br><span class=\"line\">        <span class=\"comment\">// 记录右子结点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node right;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, Node left, Node right)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        BinaryTree&lt;String, String&gt; bt = <span class=\"keyword\">new</span> BinaryTree&lt;&gt;();</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"E\"</span>, <span class=\"string\">\"5\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"B\"</span>, <span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"G\"</span>, <span class=\"string\">\"7\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"A\"</span>, <span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"D\"</span>, <span class=\"string\">\"4\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"F\"</span>, <span class=\"string\">\"6\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"H\"</span>, <span class=\"string\">\"8\"</span>);</span><br><span class=\"line\">        bt.put(<span class=\"string\">\"C\"</span>, <span class=\"string\">\"3\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxDepth = bt.maxDepth();</span><br><span class=\"line\">        System.out.println(maxDepth);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"折纸问题\">折纸问题<a href=\"#折纸问题\" title=\"折纸问题\"></a></h2><p><strong>需求:</strong></p>\n<p>请把一段纸条竖着放在桌子. 上,然后从纸条的下边向上方对折1次,压出折痕后展开。此时折痕是凹下去的,即折痕突起的方向指向纸条的背面。如果从纸条的下边向上方连续对折2次,压出折痕后展开，此时有3条折痕,从上到下依次是“下折痕、下折痕和 上折痕。</p>\n<p>给定一个输入参数N ,代表纸条都从下边向.上方连续对折N次,请从上到下打印所有折痕的方向例如: N=1时,打印: down;  N=2时,打印:down down up</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203201941803.png\" class=\"φcy\" alt=\"QQ20220320-194054@2x-2\"></p>\n<p>分析:<br>我们把对折后的纸张翻过来,让粉色朝下,这时把第一-次对折产生的折痕看做是根结点 ,那第二二次对折产生的下折痕就是该结点的左子结点,而第二次对折产生的上折痕就是该结点的右子结点,这样我们就可以使用树型数据结构来描述对折后产生的折痕。</p>\n<p><strong>这棵树有这样的特点:</strong></p>\n<ol><li>根结点为下折痕;</li>\n<li>每一个结点的左子结点为下折痕;</li>\n<li>每一个结点的右子结点为上折痕;</li>\n</ol><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203201947883.png\" alt=\"QQ20220320-194641@2x-2\" style=\"zoom:50%;\" /><p><strong>实现步骤:</strong></p>\n<ol><li>定义结点类</li>\n<li>构建深度为N的折痕树;</li>\n<li>使用中序遍历,打印出树中所有结点的内容;</li>\n</ol><p><strong>构建深度为N的折痕树:</strong></p>\n<ol><li>第一 次对折，只有一条折痕,创建根结点;</li>\n<li>如果不是第一次对折,则使用队列保存根结点;</li>\n<li>循环遍历队列:<ul><li>从队列中拿出一个结点;</li>\n<li>如果这个结点的左子结点不为空,则把这个左子结点添加到队列中; </li>\n<li>如果这个结点的右子结点不为空,则把这个右子结点添加到队列中;</li>\n<li>判断当前结点的左子结点和右子结点都不为空,如果是,则需要为当前结点创建一个值为down的左子结点 ,一个值为up的右子结点.</li>\n</ul></li>\n</ol><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.w3c.dom.Node;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PageFoldingTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 模拟折纸过程，产生树</span></span><br><span class=\"line\">        Node&lt;String&gt; tree = creatTree(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历时，打印每个结点</span></span><br><span class=\"line\">        printTree(tree);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过模拟对折N次纸，产生树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node&lt;String&gt; <span class=\"title\">creatTree</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定义根节点</span></span><br><span class=\"line\">        Node&lt;String&gt; root = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1. 当前是第一次对折</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                root = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"string\">\"down\"</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 2. 当前不是第一次对折</span></span><br><span class=\"line\">            <span class=\"comment\">// 定义一个辅助队列，通过层序遍历的思想，找到叶子结点，叶子结点添加子节点</span></span><br><span class=\"line\">            Queue&lt;Node&gt; queue = <span class=\"keyword\">new</span> Queue&lt;&gt;();</span><br><span class=\"line\">            queue.enqueue(root);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 循环遍历队列</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 从队列中弹出一个结点</span></span><br><span class=\"line\">                Node&lt;String&gt; tmp = queue.dequeue();</span><br><span class=\"line\">                <span class=\"comment\">// 如果有左子节点，则把左子节点放入到队列中</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tmp.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    queue.enqueue(tmp.left);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 如果有右子节点，则把右子节点放入队列中</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tmp.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    queue.enqueue(tmp.right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 如果同时没有左子节点和右子节点，那么证明该结点是叶子结点，只需要给该节点添加左子节点和右子节点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tmp.left == <span class=\"keyword\">null</span> &amp;&amp; tmp.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    tmp.left = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"down\"</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    tmp.right = <span class=\"keyword\">new</span> Node&lt;String&gt;(<span class=\"string\">\"up\"</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printTree</span><span class=\"params\">(Node&lt;String&gt; root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 需要使用中序遍历完成</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 打印左子树的每个结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            printTree(root.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 打印当前结点</span></span><br><span class=\"line\">        System.out.print(root.item + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 打印右子树的每个结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            printTree(root.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 结点类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> T item; <span class=\"comment\">// 存储元素</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node left;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node right;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(T item, Node left, Node right)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"堆\">堆<a href=\"#堆\" title=\"堆\"></a></h1><h2 id=\"堆的定义\">堆的定义<a href=\"#堆的定义\" title=\"堆的定义\"></a></h2><p>堆是计算机科学中一类特殊的数据结构的统称，堆通常可以被看做是一棵完全二叉树的数组对象。</p>\n<p><strong>堆的特性:</strong></p>\n<ol><li>它是完全二叉树，<strong>除了树的最后一层结点不需要是满的，其它的每一层从左到右都是满的</strong>，如果最后一层结点不 是满的，那么要求左满右不满。</li>\n</ol><p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203202030904.png\" class=\"φcy\" alt=\"QQ20220320-203007@2x-2\"></p>\n<ol><li><p><strong>它通常用数组来实现。</strong></p>\n<p>具体方法就是将二叉树的结点按照层级顺序放入数组中，根结点在位置1，它的子结点在位置2和3，而子结点的子结点则分别在位置4,5,6和7，以此类推。</p>\n</li>\n</ol><p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203202032438.png\" class=\"φcy\" alt=\"QQ20220320-203154@2x-2\"></p>\n<p>   如果一个结点的位置为k，则它的父结点的位置为[k/2],而它的两个子结点的位置则分别为2k和2k+1。这样，在不使用指针的情况下，我们也可以通过计算数组的索引在树中上下移动:从a[k]向上一层，就令k等于k/2,向下一层就 令k等于2k或2k+1。</p>\n<ol><li><strong>每个结点都大于等于它的两个子结点。</strong>这里要注意堆中仅仅规定了每个结点大于等于它的两个子结点，但这两个 子结点的顺序并没有做规定，跟我们之前学习的二叉查找树是有区别的。</li>\n</ol><h2 id=\"堆的api设计\">堆的API设计<a href=\"#堆的api设计\" title=\"堆的API设计\"></a></h2><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类名</th><th>Heap</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>Heap(int capacity):创建容量为capacity的Heap对象</td></tr>\n<tr>\n<td>成员方法</td><td>1.private boolean less(int i,int j):判断堆中索引i处的元素是否小于索引j处的元素<br/>2.private void exch(int i,int j):交换堆中i索引和j索引处的值<br/>3.public T delMax():删除堆中最大的元素,并返回这个最大元素<br/>4.public void insert(T t):往堆中插入一个元素<br/>5.private void swim(int k):使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置<br/>6.private void sink(int k):使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置</td></tr>\n<tr>\n<td>成员变量</td><td>1.private T[] imtes : 用来存储元素的数组<br/>2.private int N:记录堆中元素的个数</td></tr>\n</tbody></table></div></div><h2 id=\"堆的实现\">堆的实现<a href=\"#堆的实现\" title=\"堆的实现\"></a></h2><h3 id=\"insert插入方法的实现\">insert插入方法的实现<a href=\"#insert插入方法的实现\" title=\"insert插入方法的实现\"></a></h3><p>堆是用数组完成数据元素的存储的，由于数组的底层是一串连续的内存地址，所以我们要往堆中插入数据，我们只 能往数组中从索引0处开始，依次往后存放数据，但是堆中对元素的顺序是有要求的，每一个结点的数据要大于等 于它的两个子结点的数据，所以每次插入一个元素，都会使得堆中的数据顺序变乱，这个时候我们就需要通过一些 方法让刚才插入的这个数据放入到合适的位置。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203202045578.png\" class=\"φcy\" alt=\"1-2\"></p>\n<p>所以，如果往堆中新插入元素，我们只需要不断的比较新结点a[k]和它的父结点a[k/2]的大小，然后根据结果完成 数据元素的交换，就可以完成堆的有序调整。</p>\n<h3 id=\"delmax删除最大元素方法的实现\">delMax删除最大元素方法的实现<a href=\"#delmax删除最大元素方法的实现\" title=\"delMax删除最大元素方法的实现\"></a></h3><p>由堆的特性我们可以知道，索引1处的元素，也就是根结点就是最大的元素，当我们把根结点的元素删除后，需要 有一个新的根结点出现，这时我们可以暂时把堆中最后一个元素放到索引1处，充当根结点，但是它有可能不满足 堆的有序性需求，这个时候我们就需要通过一些方法，让这个新的根结点放入到合适的位置。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203202204773.png\" class=\"φcy\" alt=\"1-3\"></p>\n<h3 id=\"堆的实现代码\">堆的实现代码<a href=\"#堆的实现代码\" title=\"堆的实现代码\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//堆代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Heap</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储堆中的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T[] items;</span><br><span class=\"line\">    <span class=\"comment\">// 记录堆中元素的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Heap</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        items = (T[]) <span class=\"keyword\">new</span> Comparable[capacity + <span class=\"number\">1</span>];</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断堆中索引i处的元素是否小于索引j处的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items[i].compareTo(items[j]) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 交换堆中i索引和j索引处的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        T tmp = items[i];</span><br><span class=\"line\">        items[i] = items[j];</span><br><span class=\"line\">        items[j] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 往堆中插入一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        items[++N] = t;</span><br><span class=\"line\">        swim(N);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除堆中最大的元素,并返回这个最大元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">delMax</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        T max = items[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 交换索引1处和索引N处的值</span></span><br><span class=\"line\">        exch(<span class=\"number\">1</span>, N);</span><br><span class=\"line\">        <span class=\"comment\">// 删除最后位置上的元素</span></span><br><span class=\"line\">        items[N] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        N--;<span class=\"comment\">// 个数-1</span></span><br><span class=\"line\">        sink(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果已经到了根结点，就不需要循环了</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 比较当前结点和其父结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (less(k / <span class=\"number\">2</span>, k)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 父结点小于当前结点，需要交换</span></span><br><span class=\"line\">                exch(k / <span class=\"number\">2</span>, k);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            k = k / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前已经是最底层了，就不需要循环了</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">2</span> * k &lt;= N) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找到子结点中的较大者</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> max;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">2</span> * k + <span class=\"number\">1</span> &lt;= N) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 存在右子结点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (less(<span class=\"number\">2</span> * k, <span class=\"number\">2</span> * k + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                    max = <span class=\"number\">2</span> * k + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    max = <span class=\"number\">2</span> * k;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 不存在右子结点</span></span><br><span class=\"line\">                max = <span class=\"number\">2</span> * k;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 比较当前结点和子结点中的较大者，如果当前结点不小，则结束循环</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!less(k, max)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 当前结点小，则交换，</span></span><br><span class=\"line\">            exch(k, max);</span><br><span class=\"line\">            k = max;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Heap&lt;String&gt; heap = <span class=\"keyword\">new</span> Heap&lt;String&gt;(<span class=\"number\">20</span>);</span><br><span class=\"line\">        heap.insert(<span class=\"string\">\"S\"</span>);</span><br><span class=\"line\">        heap.insert(<span class=\"string\">\"G\"</span>);</span><br><span class=\"line\">        heap.insert(<span class=\"string\">\"I\"</span>);</span><br><span class=\"line\">        heap.insert(<span class=\"string\">\"E\"</span>);</span><br><span class=\"line\">        heap.insert(<span class=\"string\">\"N\"</span>);</span><br><span class=\"line\">        heap.insert(<span class=\"string\">\"H\"</span>);</span><br><span class=\"line\">        heap.insert(<span class=\"string\">\"O\"</span>);</span><br><span class=\"line\">        heap.insert(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">        heap.insert(<span class=\"string\">\"T\"</span>);</span><br><span class=\"line\">        heap.insert(<span class=\"string\">\"P\"</span>);</span><br><span class=\"line\">        heap.insert(<span class=\"string\">\"R\"</span>);</span><br><span class=\"line\">        String del;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((del = heap.delMax()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.print(del + <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"堆排序\">堆排序<a href=\"#堆排序\" title=\"堆排序\"></a></h2><p>给定一个数组:</p>\n<p>String[] arr = {“S”,”O”,”R”,”T”,”E”,”X”,”A”,”M”,”P”,”L”,”E”}</p>\n<p>请对数组中的字符按从小到大排序。</p>\n<p><strong>实现步骤:</strong></p>\n<ol><li><p>构造堆;</p>\n</li>\n<li><p>得到堆顶元素，这个值就是最大值; </p>\n</li>\n<li><p>交换堆顶元素和数组中的最后一个元素，此时所有元素中的最大元素已经放到合适的位置; </p>\n</li>\n<li><p>对堆进行调整，重新让除了最后一个元素的剩余元素中的最大值放到堆顶; </p>\n</li>\n<li><p>重复2~4这个步骤，直到堆中剩一个元素为止。</p>\n</li>\n</ol><p><strong>API设计</strong></p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类名</th><th>HeapSort</th></tr>\n</thead><tbody><tr>\n<td>成员方法</td><td>1.public static void sort(Comparable[] source):对source数组中的数据从小到大排序<br/>2.private static void createHeap(Comparable[] source, Comparable[] heap):根据原数组 source，构造出堆heap<br/>3.private static boolean less(Comparable[] heap, int i, int j):判断heap堆中索引i处的元素是否 小于索引j处的元素<br/>4.private static void exch(Comparable[] heap, int i, int j):交换heap堆中i索引和j索引处的值<br/>5.private static void sink(Comparable[] heap, int target, int range):在heap堆中，对target处的 元素做下沉，范围是0~range。</td></tr>\n</tbody></table></div></div><h3 id=\"堆构造过程\">堆构造过程<a href=\"#堆构造过程\" title=\"堆构造过程\"></a></h3><p>堆的构造，最直观的想法就是另外再创建一个和新数组数组，然后从左往右遍历原数组，每得到一个元素后，添加到新数组中，并通过上浮，对堆进行调整，最后新的数组就是一个堆。</p>\n<p>上述的方式虽然很直观，也很简单，但是我们可以用更聪明一点的办法完成它。创建一个新数组，把原数组 0<del>length-1的数据拷贝到新数组的1</del>length处，再从新数组长度的一半处开始往1索引处扫描(从右往左)，然后 对扫描到的每一个元素做下沉调整即可。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203211448128.png\" class=\"φcy\" alt=\"1-2\"></p>\n<h3 id=\"堆排序过程\">堆排序过程<a href=\"#堆排序过程\" title=\"堆排序过程\"></a></h3><p>对构造好的堆，我们只需要做类似于堆的删除操作，就可以完成排序。</p>\n<ol><li><p>将堆顶元素和堆中最后一个元素交换位置; </p>\n</li>\n<li><p>通过对堆顶元素下沉调整堆，把最大的元素放到堆顶(此时最后一个元素不参与堆的调整，因为最大的数据已经到了数组的最右边) </p>\n</li>\n<li><p>重复1~2步骤，直到堆中剩最后一个元素。</p>\n</li>\n</ol><p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203211523299.jpg\" class=\"φcy\" alt=\"1-2\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对排序代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeapSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对source数组中的数据从小到大排序</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(Comparable[] source)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.创建一个比原数组大1的数组</span></span><br><span class=\"line\">        Comparable[] heap = <span class=\"keyword\">new</span> Comparable[source.length + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 2.构造堆</span></span><br><span class=\"line\">        createHeap(source, heap);</span><br><span class=\"line\">        <span class=\"comment\">// 3.堆排序</span></span><br><span class=\"line\">        <span class=\"comment\">// 3.1定义一个变量，记录heap中未排序的所有元素中最大的索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> N = heap.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (N != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 3.2交换heap中索引1处的元素和N处的元素</span></span><br><span class=\"line\">            exch(heap, <span class=\"number\">1</span>, N);</span><br><span class=\"line\">            N--;</span><br><span class=\"line\">            <span class=\"comment\">// 3.3对索引1处的元素在0~N范围内做下沉操作</span></span><br><span class=\"line\">            sink(heap, <span class=\"number\">1</span>, N);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 4.heap中的数据已经有序，拷贝到source中</span></span><br><span class=\"line\">        System.arraycopy(heap, <span class=\"number\">1</span>, source, <span class=\"number\">0</span>, source.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据原数组source，构造出堆heap</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createHeap</span><span class=\"params\">(Comparable[] source, Comparable[] heap)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.把source中的数据拷贝到heap中，从heap的1索引处开始填充</span></span><br><span class=\"line\">        System.arraycopy(source, <span class=\"number\">0</span>, heap, <span class=\"number\">1</span>, source.length);</span><br><span class=\"line\">        <span class=\"comment\">// 2.从heap索引的一半处开始倒叙遍历，对得到的每一个元素做下沉操作</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = (heap.length - <span class=\"number\">1</span>) / <span class=\"number\">2</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            sink(heap, i, heap.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断heap堆中索引i处的元素是否小于索引j处的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(Comparable[] heap, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> heap[i].compareTo(heap[j]) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 交换heap堆中i索引和j索引处的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(Comparable[] heap, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        Comparable tmp = heap[i];</span><br><span class=\"line\">        heap[i] = heap[j];</span><br><span class=\"line\">        heap[j] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在heap堆中，对target处的元素做下沉，范围是0~range</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(Comparable[] heap, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> range)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没有子结点了</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">2</span> * target &lt;= range) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1.找出target结点的两个子结点中的较大值</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> max = <span class=\"number\">2</span> * target;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">2</span> * target + <span class=\"number\">1</span> &lt;= range) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 存在右子结点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (less(heap, <span class=\"number\">2</span> * target, <span class=\"number\">2</span> * target + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                    max = <span class=\"number\">2</span> * target + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 2.如果当前结点的值小于子结点中的较大值，则交换</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!less(heap, target, max)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            exch(heap, target, max);</span><br><span class=\"line\">            <span class=\"comment\">// 3.更新target的值</span></span><br><span class=\"line\">            target = max;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String[] arr = &#123; <span class=\"string\">\"S\"</span>, <span class=\"string\">\"O\"</span>, <span class=\"string\">\"R\"</span>, <span class=\"string\">\"T\"</span>, <span class=\"string\">\"E\"</span>, <span class=\"string\">\"X\"</span>, <span class=\"string\">\"A\"</span>, <span class=\"string\">\"M\"</span>, <span class=\"string\">\"P\"</span>, <span class=\"string\">\"L\"</span>, <span class=\"string\">\"E\"</span> &#125;;</span><br><span class=\"line\">        HeapSort.sort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"优先队列\">优先队列<a href=\"#优先队列\" title=\"优先队列\"></a></h1><p>普通的队列是一种先进先出的数据结构，元素在队列尾追加，而从队列头删除。在某些情况下，我们可能需要找出队列中的最大值或者最小值，例如使用一个队列保存计算机的任务，一般情况下计算机的任务都是有优先级的，我们需要在这些计算机的任务中找出优先级最高的任务先执行，执行完毕后就需要把这个任务从队列中移除。普通的队列要完成这样的功能，需要每次遍历队列中的所有元素，比较并找出最大值，效率不是很高，这个时候，我们就可以使用一种特殊的队列来完成这种需求，优先队列。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203211946904.png\" class=\"φcy\" alt=\"QQ20220321-194553@2x-2\"></p>\n<p>优先队列按照其作用不同，可以分为以下两种: </p>\n<p><strong>最大优先队列:</strong> 可以获取并删除队列中最大的值 </p>\n<p><strong>最小优先队列:</strong> 可以获取并删除队列中最小的值</p>\n<h2 id=\"最大优先队列\">最大优先队列<a href=\"#最大优先队列\" title=\"最大优先队列\"></a></h2><p>我们之前学习过堆，而堆这种结构是可以方便的删除最大的值，所以，接下来我们可以基于堆区实现最大优先队列。</p>\n<h3 id=\"最大优先队列api设计\">最大优先队列API设计<a href=\"#最大优先队列api设计\" title=\"最大优先队列API设计\"></a></h3><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类名</th><th>MaxPriorityQueue</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>MaxPriorityQueue(int capacity):创建容量为capacity的MaxPriorityQueue对象</td></tr>\n<tr>\n<td>成员方法</td><td>1.private boolean less(int i,int j):判断堆中索引i处的元素是否小于索引j处的元素<br/>2.private void exch(int i,int j):交换堆中i索引和j索引处的值<br/>3.public T delMax():删除队列中最大的元素,并返回这个最大元素<br/>4.public void insert(T t):往队列中插入一个元素<br/>5.private void swim(int k):使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置<br/>6.private void sink(int k):使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置<br/>7.public int size():获取队列中元素的个数<br/>8.public boolean isEmpty():判断队列是否为空</td></tr>\n<tr>\n<td>成员变量</td><td>1.private T[] imtes : 用来存储元素的数组<br/>2.private int N:记录堆中元素的个数</td></tr>\n</tbody></table></div></div><h3 id=\"最大优先队列代码实现\">最大优先队列代码实现<a href=\"#最大优先队列代码实现\" title=\"最大优先队列代码实现\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最大优先队列代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxPriorityQueue</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储堆中的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T[] items;</span><br><span class=\"line\">    <span class=\"comment\">// 记录堆中元素的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MaxPriorityQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        items = (T[]) <span class=\"keyword\">new</span> Comparable[capacity + <span class=\"number\">1</span>];</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取队列中元素的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断堆中索引i处的元素是否小于索引j处的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items[i].compareTo(items[j]) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 交换堆中i索引和j索引处的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        T tmp = items[i];</span><br><span class=\"line\">        items[i] = items[j];</span><br><span class=\"line\">        items[j] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 往堆中插入一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        items[++N] = t;</span><br><span class=\"line\">        swim(N);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除堆中最大的元素,并返回这个最大元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">delMax</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        T max = items[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 交换索引1处和索引N处的值</span></span><br><span class=\"line\">        exch(<span class=\"number\">1</span>, N);</span><br><span class=\"line\">        <span class=\"comment\">// 删除最后位置上的元素</span></span><br><span class=\"line\">        items[N] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"comment\">// 个数-1</span></span><br><span class=\"line\">        sink(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果已经到了根结点，就不需要循环了</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 比较当前结点和其父结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (less(k / <span class=\"number\">2</span>, k)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 父结点小于当前结点，需要交换</span></span><br><span class=\"line\">                exch(k / <span class=\"number\">2</span>, k);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            k = k / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前已经是最底层了，就不需要循环了</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">2</span> * k &lt;= N) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找到子结点中的较大者</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> max = <span class=\"number\">2</span> * k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">2</span> * k + <span class=\"number\">1</span> &lt;= N) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 存在右子结点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (less(<span class=\"number\">2</span> * k, <span class=\"number\">2</span> * k + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                    max = <span class=\"number\">2</span> * k + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 比较当前结点和子结点中的较大者，如果当前结点不小，则结束循环</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!less(k, max)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 当前结点小，则交换，</span></span><br><span class=\"line\">            exch(k, max);</span><br><span class=\"line\">            k = max;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// public void kk()&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// int i = 0;</span></span><br><span class=\"line\">    <span class=\"comment\">// while(i&lt;10)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// System.out.println(items[i]);</span></span><br><span class=\"line\">    <span class=\"comment\">// i++;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        MaxPriorityQueue&lt;String&gt; queue = <span class=\"keyword\">new</span> MaxPriorityQueue&lt;&gt;(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        queue.insert(<span class=\"string\">\"G\"</span>);</span><br><span class=\"line\">        queue.insert(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">        queue.insert(<span class=\"string\">\"E\"</span>);</span><br><span class=\"line\">        queue.insert(<span class=\"string\">\"C\"</span>);</span><br><span class=\"line\">        queue.insert(<span class=\"string\">\"D\"</span>);</span><br><span class=\"line\">        queue.insert(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">        queue.insert(<span class=\"string\">\"F\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 插入后的数组顺序</span></span><br><span class=\"line\">        <span class=\"comment\">// queue.kk();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">            String max = queue.delMax();</span><br><span class=\"line\">            System.out.print(max + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"最小优先队列\">最小优先队列<a href=\"#最小优先队列\" title=\"最小优先队列\"></a></h2><p>最小优先队列实现起来也比较简单，我们同样也可以基于堆来完成最小优先队列。</p>\n<p>我们前面学习堆的时候，堆中存放数据元素的数组要满足都满足如下特性:</p>\n<ol><li><p><strong>最大的元素放在数组的索引1处。</strong> </p>\n</li>\n<li><p><strong>每个结点的数据总是大于等于它的两个子结点的数据。</strong></p>\n</li>\n</ol><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203212011923.png\" alt=\"QQ20220321-201039@2x-2\" style=\"zoom:67%;\" /><p>其实我们之前实现的堆可以把它叫做最大堆，我们可以用相反的思想实现最小堆，让堆中存放数据元素的数组满足如下特性:</p>\n<ol><li><p><strong>最小的元素放在数组的索引1处。</strong> </p>\n</li>\n<li><p><strong>每个结点的数据总是小于等于它的两个子结点的数据。</strong></p>\n</li>\n</ol><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203212012140.png\" alt=\"QQ20220321-201213@2x-2\" style=\"zoom:50%;\" /><p>这样我们就能快速的访问到堆中最小的数据。</p>\n<h3 id=\"最小优先队列api设计\">最小优先队列API设计<a href=\"#最小优先队列api设计\" title=\"最小优先队列API设计\"></a></h3><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类名</th><th>MinPriorityQueue</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>MinPriorityQueue(int capacity):创建容量为capacity的MinPriorityQueue对象</td></tr>\n<tr>\n<td>成员方法</td><td>1.private boolean less(int i,int j):判断堆中索引i处的元素是否小于索引j处的元素<br/>2.private void exch(int i,int j):交换堆中i索引和j索引处的值<br/>3.public T delMin():删除队列中最小的元素,并返回这个最小元素<br/>4.public void insert(T t):往队列中插入一个元素<br/>5.private void swim(int k):使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置<br/>6.private void sink(int k):使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置<br/>7.public int size():获取队列中元素的个数<br/>8.public boolean isEmpty():判断队列是否为空</td></tr>\n<tr>\n<td>成员变量</td><td>1.private T[] imtes : 用来存储元素的数组<br/>2.private int N:记录堆中元素的个数</td></tr>\n</tbody></table></div></div><h3 id=\"最小优先队列代码实现\">最小优先队列代码实现<a href=\"#最小优先队列代码实现\" title=\"最小优先队列代码实现\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最小优先队列代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinPriorityQueue</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储堆中的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T[] items;</span><br><span class=\"line\">    <span class=\"comment\">// 记录堆中元素的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MinPriorityQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        items = (T[]) <span class=\"keyword\">new</span> Comparable[capacity + <span class=\"number\">1</span>];</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取队列中元素的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断堆中索引i处的元素是否小于索引j处的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items[i].compareTo(items[j]) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 交换堆中i索引和j索引处的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        T tmp = items[i];</span><br><span class=\"line\">        items[i] = items[j];</span><br><span class=\"line\">        items[j] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 往堆中插入一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">        items[++N] = t;</span><br><span class=\"line\">        swim(N);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除堆中最小的元素,并返回这个最小元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">delMin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 索引1处的值是最小值</span></span><br><span class=\"line\">        T min = items[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 交换索引1处和索引N处的值</span></span><br><span class=\"line\">        exch(<span class=\"number\">1</span>, N);</span><br><span class=\"line\">        <span class=\"comment\">// 删除索引N处的值</span></span><br><span class=\"line\">        items[N] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 数据元素-1</span></span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"comment\">// 对索引1处的值做下沉，使堆重新有序</span></span><br><span class=\"line\">        sink(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 返回被删除的值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果没有父结点，则不再上浮</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果当前结点比父结点小，则交换</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (less(k, k / <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">                exch(k, k / <span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            k = k / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果没有子结点，则不再下沉</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">2</span> * k &lt;= N) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找出子结点中的较小值的索引</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> min = <span class=\"number\">2</span> * k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">2</span> * k + <span class=\"number\">1</span> &lt;= N &amp;&amp; less(<span class=\"number\">2</span> * k + <span class=\"number\">1</span>, <span class=\"number\">2</span> * k)) &#123;</span><br><span class=\"line\">                min = <span class=\"number\">2</span> * k + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果当前结点小于子结点中的较小值，则结束循环</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (less(k, min)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 当前结点大，交换</span></span><br><span class=\"line\">            exch(min, k);</span><br><span class=\"line\">            k = min;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        MinPriorityQueue&lt;String&gt; queue = <span class=\"keyword\">new</span> MinPriorityQueue&lt;&gt;(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        queue.insert(<span class=\"string\">\"G\"</span>);</span><br><span class=\"line\">        queue.insert(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">        queue.insert(<span class=\"string\">\"E\"</span>);</span><br><span class=\"line\">        queue.insert(<span class=\"string\">\"C\"</span>);</span><br><span class=\"line\">        queue.insert(<span class=\"string\">\"D\"</span>);</span><br><span class=\"line\">        queue.insert(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">        queue.insert(<span class=\"string\">\"F\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">            String max = queue.delMin();</span><br><span class=\"line\">            System.out.print(max + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"索引优先队列\">索引优先队列<a href=\"#索引优先队列\" title=\"索引优先队列\"></a></h2><p>在之前实现的最大优先队列和最小优先队列，他们可以分别快速访问到队列中最大元素和最小元素，但是他们有一个缺点，就是没有办法通过索引访问已存在于优先队列中的对象，并更新它们。为了实现这个目的，在优先队列的基础上，学习一种新的数据结构，索引优先队列。接下来我们以最小索引优先队列举列。</p>\n<h3 id=\"索引优先队列实现思路\">索引优先队列实现思路<a href=\"#索引优先队列实现思路\" title=\"索引优先队列实现思路\"></a></h3><p><strong>步骤一:</strong></p>\n<p>存储数据时，给每一个数据元素关联一个整数，例如insert(int k,T t),我们可以看做k是t关联的整数，那么我们的实 现需要通过k这个值，快速获取到队列中t这个元素，此时有个k这个值需要具有唯一性。</p>\n<p>最直观的想法就是我们可以用一个T[] items数组来保存数据元素，在insert(int k,T t)完成插入时，可以把k看做是 items数组的索引，把t元素放到items数组的索引k处，这样我们再根据k获取元素t时就很方便了，直接就可以拿到 items[k]即可。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203221149327.png\" class=\"φcy\" alt=\"QQ20220322-114731@2x-2\"></p>\n<p><strong>步骤二:</strong></p>\n<p>步骤一完成后的结果，虽然我们给每个元素关联了一个整数，并且可以使用这个整数快速的获取到该元素，但是， items数组中的元素顺序是随机的，并不是堆有序的，所以，为了完成这个需求，我们可以增加一个数组int[]pq,来 保存每个元素在items数组中的索引，pq数组需要堆有序，也就是说，pq[1]对应的数据元素items[pq[1]]要小于等 于pq[2]和pq[3]对应的数据元素items[pq[2]]和items[pq[3]]。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203221358392.png\" alt=\"QQ20220322-135819@2x-2\" style=\"zoom:67%;\" /><p><strong>步骤三:</strong></p>\n<p>通过步骤二的分析，我们可以发现，其实我们通过上浮和下沉做堆调整的时候，其实调整的是pq数组。如果需要 对items中的元素进行修改，比如让items[0]=“H”,那么很显然，我们需要对pq中的数据做堆调整，而且是调整 pq[9]中元素的位置。但现在就会遇到一个问题，我们修改的是items数组中0索引处的值，如何才能快速的知道需 要挑中pq[9]中元素的位置呢?</p>\n<p>最直观的想法就是遍历pq数组，拿出每一个元素和0做比较，如果当前元素是0，那么调整该索引处的元素即可， 但是效率很低。</p>\n<p>我们可以另外增加一个数组，int[] qp,用来存储pq的逆序。例如: </p>\n<p>在pq数组中 :  pq[1]=6; </p>\n<p>那么在qp数组中，把6作为索引，1作为值，结果是:qp[6]=1;</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203221401970.png\" alt=\"QQ20220322-140049@2x-2\" style=\"zoom:67%;\" /><p>当有了pq数组后，如果我们修改items[0]=”H”，那么就可以先通过索引0，在qp数组中找到qp的索引:qp[0]=9, 那么直接调整pq[9]即可。</p>\n<h3 id=\"索引优先队列api设计\">索引优先队列API设计<a href=\"#索引优先队列api设计\" title=\"索引优先队列API设计\"></a></h3><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>类名</th><th>IndexMinPriorityQueue</th></tr>\n</thead><tbody><tr>\n<td>构造方法</td><td>IndexMinPriorityQueue(int capacity):创建容量为capacity的IndexMinPriorityQueue对象</td></tr>\n<tr>\n<td>成员方法</td><td>1.private boolean less(int i,int j):判断堆中索引i处的元素是否小于索引j处的元素<br/>2.private void exch(int i,int j):交换堆中i索引和j索引处的值<br/>3.public T delMin():删除队列中最小的元素,并返回这个最小元素<br/>4.public void insert(T t):往队列中插入一个元素<br/>5.private void swim(int k):使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置<br/>6.private void sink(int k):使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置<br/>7.public int size():获取队列中元素的个数<br/>8.public boolean isEmpty():判断队列是否为空<br/>9.public boolean contains(int k):判断k对应的元素是否存在<br/>10.public void changeItem(int i, T t):把与索引i关联的元素修改为为t<br/>11.public int minIndex():最小元素关联的索引<br/>12.public void delete(int i):删除索引i关联的元素</td></tr>\n<tr>\n<td>成员变量</td><td>1.private T[] imtes : 用来存储元素的数组<br/>2.private int[] pq:保存每个元素在items数组中的索引，pq数组需要堆有序<br/>3.private int [] qp:保存qp的逆序，pq的值作为索引，pq的索引作为值<br/>4.private int N:记录堆中元素的个数</td></tr>\n</tbody></table></div></div><h3 id=\"索引优先队列代码实现\">索引优先队列代码实现<a href=\"#索引优先队列代码实现\" title=\"索引优先队列代码实现\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最小索引优先队列代码 package cn.itcast;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexMinPriorityQueue</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储堆中的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T[] items;</span><br><span class=\"line\">    <span class=\"comment\">// 保存每个元素在items数组中的索引，pq数组需要堆有序</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] pq;</span><br><span class=\"line\">    <span class=\"comment\">// 保存qp的逆序，pq的值作为索引，pq的索引作为值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] qp;</span><br><span class=\"line\">    <span class=\"comment\">// 记录堆中元素的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IndexMinPriorityQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        items = (T[]) <span class=\"keyword\">new</span> Comparable[capacity + <span class=\"number\">1</span>];</span><br><span class=\"line\">        pq = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[capacity + <span class=\"number\">1</span>];</span><br><span class=\"line\">        qp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[capacity + <span class=\"number\">1</span>];</span><br><span class=\"line\">        N = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; qp.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 默认情况下，qp逆序中不保存任何索引</span></span><br><span class=\"line\">            qp[i] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取队列中元素的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断堆中索引i处的元素是否小于索引j处的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先通过pq找出items中的索引，然后再找出items中的元素进行对比</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> items[pq[i]].compareTo(items[pq[j]]) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 交换堆中i索引和j索引处的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先交换pq数组中的值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = pq[i];</span><br><span class=\"line\">        pq[i] = pq[j];</span><br><span class=\"line\">        pq[j] = tmp;</span><br><span class=\"line\">        <span class=\"comment\">// 更新qp数组中的值</span></span><br><span class=\"line\">        qp[pq[i]] = i;</span><br><span class=\"line\">        qp[pq[j]] = j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断k对应的元素是否存在</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 默认情况下，qp的所有元素都为-1，如果某个位置插入了数据，则不为-1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> qp[k] != -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 最小元素关联的索引</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minIndex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// pq的索引1处，存放的是最小元素在items中的索引</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> pq[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 往队列中插入一个元素,并关联索引i</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> i, T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果索引i处已经存在了元素，则不让插入</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (contains(i)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"该索引已经存在\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 个数+1</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">        <span class=\"comment\">// 把元素存放到items数组中</span></span><br><span class=\"line\">        items[i] = t;</span><br><span class=\"line\">        <span class=\"comment\">// 使用pq存放i这个索引</span></span><br><span class=\"line\">        pq[N] = i;</span><br><span class=\"line\">        <span class=\"comment\">// 在qp的i索引处存放N</span></span><br><span class=\"line\">        qp[i] = N;</span><br><span class=\"line\">        <span class=\"comment\">// 上浮items[pq[N]],让pq堆有序</span></span><br><span class=\"line\">        swim(N);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除队列中最小的元素,并返回该元素关联的索引</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">delMin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 找到items中最小元素的索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> minIndex = pq[<span class=\"number\">1</span>]; <span class=\"comment\">// 交换pq中索引1处的值和N处的值</span></span><br><span class=\"line\">        exch(<span class=\"number\">1</span>, N); <span class=\"comment\">// 删除qp中索引pq[N]处的值</span></span><br><span class=\"line\">        qp[pq[N]] = -<span class=\"number\">1</span>; <span class=\"comment\">// 删除pq中索引N处的值</span></span><br><span class=\"line\">        pq[N] = -<span class=\"number\">1</span>; <span class=\"comment\">// 删除items中的最小元素</span></span><br><span class=\"line\">        items[minIndex] = <span class=\"keyword\">null</span>; <span class=\"comment\">// 元素数量-1</span></span><br><span class=\"line\">        N--; <span class=\"comment\">// 对pq[1]做下沉，让堆有序</span></span><br><span class=\"line\">        sink(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除索引i关联的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 找出i在pq中的索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = qp[i];</span><br><span class=\"line\">        <span class=\"comment\">// 把pq中索引k处的值和索引N处的值交换</span></span><br><span class=\"line\">        exch(k, N);</span><br><span class=\"line\">        <span class=\"comment\">// 删除qp中索引pq[N]处的值</span></span><br><span class=\"line\">        qp[pq[N]] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 删除pq中索引N处的值</span></span><br><span class=\"line\">        pq[N] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 删除items中索引i处的值</span></span><br><span class=\"line\">        items[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 元素数量-1</span></span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"comment\">// 对pq[k]做下沉，让堆有序</span></span><br><span class=\"line\">        sink(k);</span><br><span class=\"line\">        <span class=\"comment\">// 对pq[k]做上浮，让堆有序</span></span><br><span class=\"line\">        swim(k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 把与索引i关联的元素修改为为t</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">changeItem</span><span class=\"params\">(<span class=\"keyword\">int</span> i, T t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 修改items数组中索引i处的值为t</span></span><br><span class=\"line\">        items[i] = t; <span class=\"comment\">// 找到i在pq中的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = qp[i]; <span class=\"comment\">// 对pq[k]做下沉，让堆有序</span></span><br><span class=\"line\">        sink(k); <span class=\"comment\">// 对pq[k]做上浮，让堆有序</span></span><br><span class=\"line\">        swim(k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果已经到了根结点，则结束上浮</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 比较当前结点和父结点，如果当前结点比父结点小，则交换位置</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (less(k, k / <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">                exch(k, k / <span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            k = k / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前结点已经没有子结点了，则结束下沉</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">2</span> * k &lt;= N) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找出子结点中的较小值</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> min = <span class=\"number\">2</span> * k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">2</span> * k + <span class=\"number\">1</span> &lt;= N &amp;&amp; less(<span class=\"number\">2</span> * k + <span class=\"number\">1</span>, <span class=\"number\">2</span> * k)) &#123;</span><br><span class=\"line\">                min = <span class=\"number\">2</span> * k + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果当前结点的值比子结点中的较小值小，则结束下沉</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (less(k, min)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            exch(k, min);</span><br><span class=\"line\">            k = min;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        IndexMinPriorityQueue&lt;String&gt; queue = <span class=\"keyword\">new</span> IndexMinPriorityQueue&lt;&gt;(<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 插入</span></span><br><span class=\"line\">        queue.insert(<span class=\"number\">0</span>, <span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">        queue.insert(<span class=\"number\">1</span>, <span class=\"string\">\"C\"</span>);</span><br><span class=\"line\">        queue.insert(<span class=\"number\">2</span>, <span class=\"string\">\"F\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 测试修改</span></span><br><span class=\"line\">        queue.changeItem(<span class=\"number\">2</span>, <span class=\"string\">\"B\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = queue.delMin();</span><br><span class=\"line\">            System.out.print(index + <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"平衡树\">平衡树<a href=\"#平衡树\" title=\"平衡树\"></a></h1><p>之前我们学习过二叉查找树，发现它的查询效率比单纯的链表和数组的查询效率要高很多，大部分情况下，确实是这样的，但不幸的是，在最坏情况下，二叉查找树的性能还是很糟糕。</p>\n<p>例如我们依次往二叉查找树中插入9,8,7,6,5,4,3,2,1这9个数据，那么最终构造出来的树是长得下面这个样子:</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203222002213.png\" alt=\"QQ20220322-200222@2x-2\" style=\"zoom: 50%;\" /><p>我们会发现，如果我们要查找1这个元素，查找的效率依旧会很低。效率低的原因在于这个树并不平衡，全部是向 左边分支，如果我们有一种方法，能够不受插入数据的影响，让生成的树都像完全二叉树那样，那么即使在最坏情 况下，查找的效率依旧会很好。</p>\n<h2 id=\"2-3查找树\">2-3查找树<a href=\"#2-3查找树\" title=\"2-3查找树\"></a></h2><p>为了保证查找树的平衡性，我们需要一些灵活性，因此在这里我们允许树中的一个结点保存多个键。确切的说，我 们将一棵标准的二叉查找树中的结点称为2-结点(含有一个键和两条链)，而现在我们引入3-结点，它含有两个键和 三条链。2-结点和3-结点中的每条链都对应着其中保存的键所分割产生的一个区间。</p>\n<h3 id=\"2-3查找树的定义\">2-3查找树的定义<a href=\"#2-3查找树的定义\" title=\"2-3查找树的定义\"></a></h3><p>一棵2-3查找树要么为空，要么满足满足下面两个要求:</p>\n<p><strong>2-结点:</strong> </p>\n<p>含有一个键(及其对应的值)和两条链，左链接指向2-3树中的键都小于该结点，右链接指向的2-3树中的键都大于该结点。 </p>\n<p><strong>3-结点:</strong></p>\n<p>含有两个键(及其对应的值)和三条链，左链接指向的2-3树中的键都小于该结点，中链接指向的2-3树中的键都 位于该结点的两个键之间，右链接指向的2-3树中的键都大于该结点。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203222006854.png\" alt=\"QQ20220322-200613@2x-2\" style=\"zoom: 50%;\" /><h3 id=\"查找\">查找<a href=\"#查找\" title=\"查找\"></a></h3><p>将二叉查找树的查找算法一般化我们就能够直接得到2-3树的查找算法。要判断一个键是否在树中，我们先将它和 根结点中的键比较。如果它和其中任意一个相等，查找命中;否则我们就根据比较的结果找到指向相应区间的连 接，并在其指向的子树中递归地继续查找。如果这个是空链接，查找未命中。</p>\n<img src=\"https://cdn.jsdelivr.net/gh/autumndx/cdn/img/Data_structure/202203222012681.jpg\" alt=\"1-2\" style=\"zoom: 50%;\" /><h3 id=\"插入\">插入<a href=\"#插入\" title=\"插入\"></a></h3><h3 id=\"向2-结点中插入新键\">向2-结点中插入新键<a href=\"#向2-结点中插入新键\" title=\"向2-结点中插入新键\"></a></h3><p>往2-3树中插入元素和往二叉查找树中插入元素一样，首先要进行查找，然后将节点挂到未找到的节点上。2-3树之 所以能够保证在最差的情况下的效率的原因在于其插入之后仍然能够保持平衡状态。如果查找后未找到的节点是一 个2-结点，那么很容易，我们只需要将新的元素放到这个2-结点里面使其变成一个3-结点即可。但是如果查找的节 点结束于一个3-结点，那么可能有点麻烦。</p>\n","next":{"title":"Macbook优化","link":"posts/3c3fd7cd"},"plink":"https://dxsummer.gitee.io/posts/10b828c8/","toc":[{"id":"算法分析","title":"算法分析","index":"1","children":[{"id":"时间复杂度分析","title":"时间复杂度分析","index":"1.1"},{"id":"空间复杂度分析","title":"空间复杂度分析","index":"1.2","children":[{"id":"java中常见内存占用","title":"java中常见内存占用","index":"1.2.1"},{"id":"算法的空间复杂度","title":"算法的空间复杂度","index":"1.2.2"}]}]},{"id":"排序","title":"排序","index":"2","children":[{"id":"简单排序","title":"简单排序","index":"2.1","children":[{"id":"comparable接口介绍","title":"Comparable接口介绍","index":"2.1.1"},{"id":"冒泡排序","title":"冒泡排序","index":"2.1.2"},{"id":"选择排序","title":"选择排序","index":"2.1.3"},{"id":"插入排序","title":"插入排序","index":"2.1.4"}]},{"id":"高级排序","title":"高级排序","index":"2.2","children":[{"id":"希尔排序","title":"希尔排序","index":"2.2.1"},{"id":"归并排序","title":"归并排序","index":"2.2.2","children":[{"id":"递归","title":"递归","index":"2.2.2.1"},{"id":"归并排序-1","title":"归并排序","index":"2.2.2.2"}]},{"id":"快速排序","title":"快速排序","index":"2.2.3"},{"id":"排序的稳定性","title":"排序的稳定性","index":"2.2.4"}]}]},{"id":"线性表","title":"线性表","index":"3","children":[{"id":"顺序表","title":"顺序表","index":"3.1","children":[{"id":"顺序表的实现","title":"顺序表的实现","index":"3.1.1"},{"id":"顺序表的遍历","title":"顺序表的遍历","index":"3.1.2"},{"id":"顺序表容量可变","title":"顺序表容量可变","index":"3.1.3"},{"id":"顺序表的时间复杂度","title":"顺序表的时间复杂度","index":"3.1.4"},{"id":"java中arraylist实现","title":"java中ArrayList实现","index":"3.1.5"}]},{"id":"链表","title":"链表","index":"3.2","children":[{"id":"单向链表","title":"单向链表","index":"3.2.1","children":[{"id":"单向链表api设计","title":"单向链表API设计","index":"3.2.1.1"},{"id":"单向链表代码实现","title":"单向链表代码实现","index":"3.2.1.2"}]},{"id":"双向链表","title":"双向链表","index":"3.2.2","children":[{"id":"结点api设计","title":"结点API设计","index":"3.2.2.1"},{"id":"双向链表api设计","title":"双向链表API设计","index":"3.2.2.2"},{"id":"双向链表代码实现","title":"双向链表代码实现","index":"3.2.2.3"},{"id":"java中linkedlist实现","title":"java中LinkedList实现","index":"3.2.2.4"}]},{"id":"链表的复杂度分析","title":"链表的复杂度分析","index":"3.2.3"},{"id":"链表反转","title":"链表反转","index":"3.2.4"},{"id":"快慢指针","title":"快慢指针","index":"3.2.5","children":[{"id":"中间值问题","title":"中间值问题","index":"3.2.5.1"},{"id":"单向链表是否有环问题","title":"单向链表是否有环问题","index":"3.2.5.2"},{"id":"有环链表入口问题","title":"有环链表入口问题","index":"3.2.5.3"}]},{"id":"循环列表","title":"循环列表","index":"3.2.6"},{"id":"约瑟夫问题","title":"约瑟夫问题","index":"3.2.7"}]},{"id":"栈","title":"栈","index":"3.3","children":[{"id":"栈概述","title":"栈概述","index":"3.3.1","children":[{"id":"生活中的栈","title":"生活中的栈","index":"3.3.1.1"},{"id":"计算机中的栈","title":"计算机中的栈","index":"3.3.1.2"}]},{"id":"栈的实现","title":"栈的实现","index":"3.3.2","children":[{"id":"栈api设计","title":"栈API设计","index":"3.3.2.1"},{"id":"栈代码实现","title":"栈代码实现","index":"3.3.2.2"}]},{"id":"案例","title":"案例","index":"3.3.3","children":[{"id":"括号匹配问题","title":"括号匹配问题","index":"3.3.3.1"},{"id":"逆波兰表达式求值问题","title":"逆波兰表达式求值问题","index":"3.3.3.2"}]}]},{"id":"队列","title":"队列","index":"3.4","children":[{"id":"队列的api设计","title":"队列的API设计","index":"3.4.1"},{"id":"队列的实现","title":"队列的实现","index":"3.4.2"}]}]},{"id":"符号表","title":"符号表","index":"4","children":[{"id":"符号表api设计","title":"符号表API设计","index":"4.1"},{"id":"符号表实现","title":"符号表实现","index":"4.2"},{"id":"有序符号表","title":"有序符号表","index":"4.3"}]},{"id":"二叉树入门","title":"二叉树入门","index":"5","children":[{"id":"树的基本定义","title":"树的基本定义","index":"5.1"},{"id":"树的相关术语","title":"树的相关术语","index":"5.2"},{"id":"二叉树的基本定义","title":"二叉树的基本定义","index":"5.3"},{"id":"二叉查找树的创建","title":"二叉查找树的创建","index":"5.4","children":[{"id":"二叉树的结点类","title":"二叉树的结点类","index":"5.4.1"},{"id":"二叉查找树api设计","title":"二叉查找树API设计","index":"5.4.2"},{"id":"二叉查找树实现","title":"二叉查找树实现","index":"5.4.3"},{"id":"二叉查找树其他便捷方法","title":"二叉查找树其他便捷方法","index":"5.4.4","children":[{"id":"查找二叉树中最小的键","title":"查找二叉树中最小的键","index":"5.4.4.1"},{"id":"查找二叉树中最大的键","title":"查找二叉树中最大的键","index":"5.4.4.2"}]}]},{"id":"二叉树的基础遍历","title":"二叉树的基础遍历","index":"5.5","children":[{"id":"前序遍历","title":"前序遍历","index":"5.5.1"},{"id":"中序遍历","title":"中序遍历","index":"5.5.2"},{"id":"后序遍历","title":"后序遍历","index":"5.5.3"}]},{"id":"二叉树的层序遍历","title":"二叉树的层序遍历","index":"5.6"},{"id":"二叉树的最大深度问题","title":"二叉树的最大深度问题","index":"5.7"},{"id":"折纸问题","title":"折纸问题","index":"5.8"}]},{"id":"堆","title":"堆","index":"6","children":[{"id":"堆的定义","title":"堆的定义","index":"6.1"},{"id":"堆的api设计","title":"堆的API设计","index":"6.2"},{"id":"堆的实现","title":"堆的实现","index":"6.3","children":[{"id":"insert插入方法的实现","title":"insert插入方法的实现","index":"6.3.1"},{"id":"delmax删除最大元素方法的实现","title":"delMax删除最大元素方法的实现","index":"6.3.2"},{"id":"堆的实现代码","title":"堆的实现代码","index":"6.3.3"}]},{"id":"堆排序","title":"堆排序","index":"6.4","children":[{"id":"堆构造过程","title":"堆构造过程","index":"6.4.1"},{"id":"堆排序过程","title":"堆排序过程","index":"6.4.2"}]}]},{"id":"优先队列","title":"优先队列","index":"7","children":[{"id":"最大优先队列","title":"最大优先队列","index":"7.1","children":[{"id":"最大优先队列api设计","title":"最大优先队列API设计","index":"7.1.1"},{"id":"最大优先队列代码实现","title":"最大优先队列代码实现","index":"7.1.2"}]},{"id":"最小优先队列","title":"最小优先队列","index":"7.2","children":[{"id":"最小优先队列api设计","title":"最小优先队列API设计","index":"7.2.1"},{"id":"最小优先队列代码实现","title":"最小优先队列代码实现","index":"7.2.2"}]},{"id":"索引优先队列","title":"索引优先队列","index":"7.3","children":[{"id":"索引优先队列实现思路","title":"索引优先队列实现思路","index":"7.3.1"},{"id":"索引优先队列api设计","title":"索引优先队列API设计","index":"7.3.2"},{"id":"索引优先队列代码实现","title":"索引优先队列代码实现","index":"7.3.3"}]}]},{"id":"平衡树","title":"平衡树","index":"8","children":[{"id":"2-3查找树","title":"2-3查找树","index":"8.1","children":[{"id":"2-3查找树的定义","title":"2-3查找树的定义","index":"8.1.1"},{"id":"查找","title":"查找","index":"8.1.2"},{"id":"插入","title":"插入","index":"8.1.3"},{"id":"向2-结点中插入新键","title":"向2-结点中插入新键","index":"8.1.4"}]}]}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/10b828c8/\" title=\"数据结构(蓝桥杯)\">https://dxsummer.gitee.io/posts/10b828c8/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2022年3月11日","updated":"2022年3月22日"}}