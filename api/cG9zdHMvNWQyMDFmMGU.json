{"title":"ACM数据结构","date":"2020-10-24T07:13:14.000Z","date_formatted":{"ll":"2020年10月24日","L":"2020/10/24","MM-DD":"10-24"},"link":"posts/5d201f0e","comments":true,"tags":["ACM"],"categories":["数据结构"],"updated":"2020-12-20T08:25:32.000Z","content":"<h1 id=\"顺序表应用\">顺序表应用<a href=\"#顺序表应用\" title=\"顺序表应用\"></a></h1><h2 id=\"多余元素删除之移位算法\">多余元素删除之移位算法<a href=\"#多余元素删除之移位算法\" title=\"多余元素删除之移位算法\"></a></h2><p><strong>Description</strong></p>\n<p>一个长度不超过10000数据的顺序表，可能存在着一些值相同的“多余”数据元素（类型为整型），编写一个程序将“多余”的数据元素从顺序表中删除，使该表由一个“非纯表”（值相同的元素在表中可能有多个）变成一个“纯表”（值相同的元素在表中只保留第一个）。</p>\n<p>要求：</p>\n<p>1、必须先定义线性表的结构与操作函数，在主函数中借助该定义与操作函数调用实现问题功能；</p>\n<p>2、本题的目标是熟悉顺序表的移位算法，因此题目必须要用元素的移位实现删除；</p>\n<p><strong>Input</strong></p>\n<p>第一行输入整数n，代表下面有n行输入；</p>\n<p>之后输入n行，每行先输入整数m，之后输入m个数据，代表对应顺序表的每个元素。</p>\n<p><strong>Output</strong></p>\n<p>输出有n行，为每个顺序表删除多余元素后的结果</p>\n<p><strong>Sample</strong></p>\n<p><strong>Input</strong> </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">9</span> <span class=\"number\">6</span> <span class=\"number\">8</span> <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">5</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">9</span> <span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">6</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">5</span> <span class=\"number\">4</span> <span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">9</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">9</span> <span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">6</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure><p><strong>Answer</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data[<span class=\"number\">10010</span>];</span><br><span class=\"line\">&#125;SL;            <span class=\"comment\">//定义顺序表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">creatlist</span><span class=\"params\">(SL *l,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;l-&gt;data[i]);</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">&#125;               <span class=\"comment\">//创建顺序表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">deletelist</span><span class=\"params\">(SL *l,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i,j,k;</span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">\t        <span class=\"keyword\">for</span>( j=i+<span class=\"number\">1</span>;j&lt;n;j++)  <span class=\"comment\">//循环遍历</span></span><br><span class=\"line\">\t        &#123;</span><br><span class=\"line\">\t          <span class=\"keyword\">if</span>(l-&gt;data[i]==l-&gt;data[j])</span><br><span class=\"line\">\t            &#123;</span><br><span class=\"line\">\t                n--;</span><br><span class=\"line\">\t                <span class=\"keyword\">for</span>( k=j;k&lt;n;k++)  <span class=\"comment\">//将后面的移到前面</span></span><br><span class=\"line\">\t                    l-&gt;data[k]=l-&gt;data[k+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t                j--;</span><br><span class=\"line\">\t            &#125;</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;               <span class=\"comment\">//删除重复元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printlist</span><span class=\"params\">(SL *l,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span>(i==n<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,l-&gt;data[i]);</span><br><span class=\"line\">\t        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,l-&gt;data[i]);</span><br><span class=\"line\">&#125;               <span class=\"comment\">//输出顺序表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;m);</span><br><span class=\"line\">        SL l;</span><br><span class=\"line\">        creatlist(&amp;l,m);</span><br><span class=\"line\">        m=deletelist(&amp;l,m);</span><br><span class=\"line\">        printlist(&amp;l,m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"有序顺序表归并\">有序顺序表归并<a href=\"#有序顺序表归并\" title=\"有序顺序表归并\"></a></h2><p><strong>Description</strong></p>\n<p>已知顺序表A与B是两个有序的顺序表，其中存放的数据元素皆为普通整型，将A与B表归并为C表，要求C表包含了A、B表里所有元素，并且C表仍然保持有序。</p>\n<p><strong>Input</strong></p>\n<p>输入分为三行：<br>第一行输入m、n（1&lt;=m,n&lt;=10000）的值，即为表A、B的元素个数；<br>第二行输入m个有序的整数，即为表A的每一个元素；<br>第三行输入n个有序的整数，即为表B的每一个元素；</p>\n<p><strong>Output</strong></p>\n<p>输出为一行，即将表A、B合并为表C后，依次输出表C所存放的元素。</p>\n<p><strong>Sample</strong></p>\n<p><strong>Input</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 3</span><br><span class=\"line\">1 3 5 6 9</span><br><span class=\"line\">2 4 10</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2 3 4 5 6 9 10</span><br></pre></td></tr></table></figure><p><strong>Answer</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MaxSize 100001</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> element;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">List</span>&#123;</span></span><br><span class=\"line\">    element data[MaxSize];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>;</span><br><span class=\"line\">&#125;<span class=\"built_in\">list</span>,list1,list2,list3;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(list1 &amp;l1,list2 &amp;l2,<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,list3 &amp;l3)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; a;i++)&#123;</span><br><span class=\"line\">        l1.data[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    l1.<span class=\"built_in\">size</span> = a;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; b;i++)&#123;</span><br><span class=\"line\">        l2.data[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    l2.<span class=\"built_in\">size</span> = b;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; a + b;i++)&#123;</span><br><span class=\"line\">        l3.data[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    l3.<span class=\"built_in\">size</span> = a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">input</span><span class=\"params\">(list1 &amp;l1,list2 &amp;l2,<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; a;i++)&#123;\t\t<span class=\"comment\">//对顺序表A赋值 </span></span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; j;</span><br><span class=\"line\">        l1.data[i] = j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; b;i++)&#123;\t<span class=\"comment\">//对顺序表B赋值 </span></span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; j;</span><br><span class=\"line\">        l2.data[i] = j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(list1 &amp;l1,list2 &amp;l2,list3 &amp;l3)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> aa = <span class=\"number\">0</span>,bb = <span class=\"number\">0</span>,index=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = l1.<span class=\"built_in\">size</span> + l2.<span class=\"built_in\">size</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c--)&#123; \t<span class=\"comment\">//a b对比 将较小值放到前面 </span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = (aa &gt;= l1.<span class=\"built_in\">size</span> ? <span class=\"number\">65535</span> : l1.data[aa]);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = (bb &gt;= l2.<span class=\"built_in\">size</span> ? <span class=\"number\">65535</span> : l2.data[bb]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a &gt; b)&#123;</span><br><span class=\"line\">            l3.data[index++] = b;</span><br><span class=\"line\">            bb++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            l3.data[index++] = a;</span><br><span class=\"line\">            aa++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">output</span><span class=\"params\">(list3 &amp;l3)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; i &lt; l3.<span class=\"built_in\">size</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,l3.data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b;</span><br><span class=\"line\">    list1 l1;</span><br><span class=\"line\">    list2 l2;</span><br><span class=\"line\">    list3 l3;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    init(l1,l2,a,b,l3);\t<span class=\"comment\">//初始化 </span></span><br><span class=\"line\">    input(l1,l2,a,b);\t<span class=\"comment\">//负值 </span></span><br><span class=\"line\">    merge(l1,l2,l3);\t</span><br><span class=\"line\">    output(l3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"有序顺序表查询\">有序顺序表查询<a href=\"#有序顺序表查询\" title=\"有序顺序表查询\"></a></h2><p><strong>Description</strong></p>\n<p>顺序表内按照由小到大的次序存放着n个互不相同的整数，任意输入一个整数，判断该整数在顺序表中是否存在。如果在顺序表中存在该整数，输出其在表中的序号；否则输出“No Found!”。</p>\n<p><strong>Input</strong></p>\n<p>第一行输入整数n (1 &lt;= n &lt;= 100000)，表示顺序表的元素个数；<br>第二行依次输入n个各不相同的有序非负整数，代表表里的元素；<br>第三行输入整数t (1 &lt;= t &lt;= 100000)，代表要查询的次数；<br>第四行依次输入t个非负整数，代表每次要查询的数值。</p>\n<p>保证所有输入的数都在 int 范围内。</p>\n<p><strong>Output</strong></p>\n<p>输出t行，代表t次查询的结果，如果找到在本行输出该元素在表中的位置，否则本行输出No Found!</p>\n<p><strong>Sample</strong></p>\n<p><strong>Input</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">1 22 33 55 63 70 74 79 80 87</span><br><span class=\"line\">4</span><br><span class=\"line\">55 10 2 87</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">No Found!</span><br><span class=\"line\">No Found!</span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure><p><strong>Answer</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> max 100005</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *elem;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> length;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> listsize;</span><br><span class=\"line\">&#125;List;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">creat</span><span class=\"params\">(List &amp;L,<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">\tL.elem=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"built_in\">max</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!L.elem) <span class=\"built_in\">exit</span>(OVERFLOW);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;L.elem[i];</span><br><span class=\"line\">\t\tL.length++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(List L,<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right,<span class=\"keyword\">int</span> num)</span>             <span class=\"comment\">//由于时间限制，必须用到二分查找。</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=right)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(left+right)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L.elem[mid]&lt;num)</span><br><span class=\"line\">            left=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (L.elem[mid]&gt;num)</span><br><span class=\"line\">            right=mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m,x;</span><br><span class=\"line\">\tList L;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\tcreat(L,n);</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> loc=search(L,<span class=\"number\">0</span>,n,x);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(loc)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;loc&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"No Found!\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"链表\">链表<a href=\"#链表\" title=\"链表\"></a></h1><h2 id=\"链表的逆置\">链表的逆置<a href=\"#链表的逆置\" title=\"链表的逆置\"></a></h2><p><strong>Description</strong></p>\n<p>输入多个整数，以-1作为结束标志，顺序建立一个带头结点的单链表，之后对该单链表的数据进行逆置，并输出逆置后的单链表数据。</p>\n<p><strong>Input</strong></p>\n<p>输入多个整数，以-1作为结束标志。</p>\n<p><strong>Output</strong></p>\n<p>输出逆置后的单链表数据。</p>\n<p><strong>Sample</strong></p>\n<p><strong>Input</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12 56 4 6 55 15 33 62 -1</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">62 33 15 55 6 4 56 12</span><br></pre></td></tr></table></figure><p><strong>Answer</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//逆序建立链表</span></span><br><span class=\"line\"><span class=\"function\">struct node *<span class=\"title\">Creat</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">head</span>,*<span class=\"title\">p</span>;</span></span><br><span class=\"line\">    head=(struct node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node));</span><br><span class=\"line\">    head-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    p=(struct node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node));</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;p-&gt;data);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p-&gt;data!=<span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p-&gt;next=head-&gt;next;</span><br><span class=\"line\">        head-&gt;next=p;</span><br><span class=\"line\">        p=(struct node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node));</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;p-&gt;data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (head);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">head</span>;</span></span><br><span class=\"line\">    head=Creat();</span><br><span class=\"line\"><span class=\"comment\">//    if(head-&gt;next!=NULL)</span></span><br><span class=\"line\"><span class=\"comment\">//    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(\"%d\",head-&gt;next-&gt;data);</span></span><br><span class=\"line\"><span class=\"comment\">//        head=head-&gt;next;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(head-&gt;next!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,head-&gt;next-&gt;data);</span><br><span class=\"line\">        head=head-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"链表的逆置-1\">链表的逆置<a href=\"#链表的逆置-1\" title=\"链表的逆置\"></a></h2><p><strong>Description</strong></p>\n<p>输入多个整数，以-1作为结束标志，顺序建立一个带头结点的单链表，之后对该单链表的数据进行逆置，并输出逆置后的单链表数据。</p>\n<p><strong>Input</strong></p>\n<p>输入多个整数，以-1作为结束标志。</p>\n<p><strong>Output</strong></p>\n<p>输出逆置后的单链表数据。</p>\n<p><strong>Sample</strong></p>\n<p><strong>Input</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12 56 4 6 55 15 33 62 -1</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">62 33 15 55 6 4 56 12</span><br></pre></td></tr></table></figure><p><strong>Answer</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt; </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> date;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">head</span>,*<span class=\"title\">p</span>,*<span class=\"title\">tail</span>;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    head = <span class=\"keyword\">new</span> node;</span><br><span class=\"line\">    head-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    tail = head;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;n; i++)\t<span class=\"comment\">//录入数据 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = <span class=\"keyword\">new</span> node;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;p-&gt;date);</span><br><span class=\"line\">        p-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        tail-&gt;next = p;</span><br><span class=\"line\">        tail = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;<span class=\"comment\">//要删除的数字</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> t=<span class=\"number\">0</span>;<span class=\"comment\">//要删除的数字的个数</span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,n);</span><br><span class=\"line\">    p = head-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p-&gt;next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,p-&gt;date);</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,p-&gt;date);</span><br><span class=\"line\">    p = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p-&gt;next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p-&gt;next-&gt;date==m)<span class=\"comment\">//前移 </span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t++;</span><br><span class=\"line\">            tail = p-&gt;next;</span><br><span class=\"line\">            p-&gt;next = tail-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span>(tail);<span class=\"comment\">//释放指针指向的内存地址 </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,n-t);<span class=\"comment\">//剩余 </span></span><br><span class=\"line\">    p = head-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p-&gt;next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,p-&gt;date);</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,p-&gt;date);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"顺序建立链表\">顺序建立链表<a href=\"#顺序建立链表\" title=\"顺序建立链表\"></a></h2><p><strong>Description</strong></p>\n<p>输入N个整数，按照输入的顺序建立单链表存储，并遍历所建立的单链表，输出这些数据。</p>\n<p><strong>Input</strong></p>\n<p>第一行输入整数的个数N；<br>第二行依次输入每个整数。</p>\n<p><strong>Output</strong></p>\n<p>输出这组整数。</p>\n<p><strong>Sample</strong></p>\n<p><strong>Input</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8</span><br><span class=\"line\">12 56 4 6 55 15 33 62</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12 56 4 6 55 15 33 62</span><br></pre></td></tr></table></figure><p><strong>Answer</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">head</span>,*<span class=\"title\">p</span>,*<span class=\"title\">tail</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,i;</span><br><span class=\"line\">    head = (struct node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node));</span><br><span class=\"line\">    head-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    tail = head;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = (struct node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node));</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;p-&gt;data);</span><br><span class=\"line\">        p-&gt;next =<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        tail-&gt;next = p;</span><br><span class=\"line\">        tail = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">q</span>;</span></span><br><span class=\"line\">    q = head-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q-&gt;next != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">           <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,q-&gt;data);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">             <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,q-&gt;data);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        q = q-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"栈\">栈<a href=\"#栈\" title=\"栈\"></a></h1><h2 id=\"一般算术表达式转换成后缀式\">一般算术表达式转换成后缀式<a href=\"#一般算术表达式转换成后缀式\" title=\"一般算术表达式转换成后缀式\"></a></h2><p><strong>Description</strong></p>\n<p>对于一个基于二元运算符的算术表达式，转换为对应的后缀式，并输出之。</p>\n<p><strong>Input</strong></p>\n<p>输入一个算术表达式，以‘#’字符作为结束标志。</p>\n<p><strong>Output</strong></p>\n<p>输出该表达式转换所得到的后缀式。</p>\n<p><strong>Input</strong> </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a*b+(c-d/e)*f#</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ab*cde/-f*+</span><br></pre></td></tr></table></figure><p><strong>Answer c++</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">char</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == <span class=\"string\">'-'</span> || a == <span class=\"string\">'+'</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == <span class=\"string\">'*'</span> || a == <span class=\"string\">'/'</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == <span class=\"string\">')'</span>) <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == <span class=\"string\">'('</span>) <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">char</span> * base;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>  *top;</span><br><span class=\"line\">&#125;SqStack;</span><br><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InitStack</span><span class=\"params\">(SqStack &amp;S)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    S.base = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">1000</span>*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>));</span><br><span class=\"line\">    S.top = S.base;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Push</span><span class=\"params\">(SqStack &amp;S, <span class=\"keyword\">char</span>  e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    *S.top++ = e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Pop</span><span class=\"params\">(SqStack &amp;S)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> e;</span><br><span class=\"line\">    e = *--S.top;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, a))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">        SqStack S;</span><br><span class=\"line\">        InitStack(S);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; a[i]!=<span class=\"string\">'#'</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i] &gt;= <span class=\"string\">'a'</span> &amp;&amp; a[i] &lt;= <span class=\"string\">'z'</span>)</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; a[i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(S.base == S.top)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Push(S, a[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(cmp(*(S.top<span class=\"number\">-1</span>)) &gt;= cmp(a[i]))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(*(S.top<span class=\"number\">-1</span>) != <span class=\"string\">'('</span>)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                              Pop(S);</span><br><span class=\"line\">                              Push(S, a[i]);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                       <span class=\"keyword\">else</span></span><br><span class=\"line\">                       &#123;</span><br><span class=\"line\">                             Push(S, a[i]);</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">if</span>(a[i] == <span class=\"string\">')'</span>)</span><br><span class=\"line\">                       &#123;</span><br><span class=\"line\">                           <span class=\"keyword\">while</span>(*(S.top<span class=\"number\">-1</span>) != <span class=\"string\">'('</span>)</span><br><span class=\"line\">                           &#123;</span><br><span class=\"line\">                               Pop(S);</span><br><span class=\"line\">                           &#125;</span><br><span class=\"line\">                           S.top--;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                       <span class=\"keyword\">else</span></span><br><span class=\"line\">                       &#123;</span><br><span class=\"line\">                           Push(S, a[i]);</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(S.top != S.base)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Pop(S);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"进制转换\">进制转换<a href=\"#进制转换\" title=\"进制转换\"></a></h2><p><strong>Description</strong></p>\n<p>输入一个十进制非负整数，将其转换成对应的 R (2 &lt;= R &lt;= 9) 进制数，并输出。</p>\n<p><strong>Input</strong></p>\n<p>第一行输入需要转换的十进制非负整数；<br>第二行输入 R。</p>\n<p><strong>Output</strong></p>\n<p>输出转换所得的 R 进制数。</p>\n<p><strong>Sample</strong></p>\n<p><strong>Input</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1279</span><br><span class=\"line\">8</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2377</span><br></pre></td></tr></table></figure><p><strong>Answer</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> stackinitsize 100</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> stackcreat 10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ok 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> overflow -1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> <span class=\"meta-keyword\">error</span> -1</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>\t//定义结构体 </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *base;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *top;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> stacksize;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; sqstack;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">initstack</span><span class=\"params\">(sqstack *s)</span>\t<span class=\"comment\">// </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    s-&gt;base=(<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(stackinitsize*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!s-&gt;base)<span class=\"built_in\">exit</span>(<span class=\"built_in\">overflow</span>);</span><br><span class=\"line\">    s-&gt;top=s-&gt;base;</span><br><span class=\"line\">    s-&gt;stacksize=stackinitsize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ok;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">push</span><span class=\"params\">(sqstack *s,<span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s-&gt;top-s-&gt;base&gt;=s-&gt;stacksize)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s-&gt;top=(<span class=\"keyword\">int</span>*)<span class=\"built_in\">realloc</span>(s-&gt;base,(s-&gt;stacksize+stackcreat)*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!s-&gt;base)<span class=\"built_in\">exit</span>(<span class=\"built_in\">overflow</span>);</span><br><span class=\"line\">        s-&gt;top=s-&gt;base+s-&gt;stacksize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *s-&gt;top++=e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ok;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">(sqstack *s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s-&gt;top==s-&gt;base)<span class=\"keyword\">return</span> error;</span><br><span class=\"line\">    s-&gt;top--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ok;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">stackempty</span><span class=\"params\">(sqstack *s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s-&gt;top==s-&gt;base)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gettop</span><span class=\"params\">(sqstack *s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> e;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s-&gt;top==s-&gt;base)<span class=\"keyword\">return</span> error;</span><br><span class=\"line\">    e=*(s-&gt;top<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,r,e;</span><br><span class=\"line\">    sqstack s;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>)<span class=\"built_in\">printf</span>(<span class=\"string\">\"0\\n\"</span>);<span class=\"comment\">//注意如果被除数为零，则都是零</span></span><br><span class=\"line\">    initstack(&amp;s);<span class=\"comment\">//创建栈 </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)<span class=\"comment\">//不断相除，将余数存到栈里面</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        push(&amp;s,n%r);</span><br><span class=\"line\">        n=n/r;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!stackempty(&amp;s))<span class=\"comment\">//当栈不空的时候，把栈里面的数字输出</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        e=gettop(&amp;s);</span><br><span class=\"line\">        pop(&amp;s);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,e);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"后缀式求值\">后缀式求值<a href=\"#后缀式求值\" title=\"后缀式求值\"></a></h2><p><strong>Description</strong></p>\n<p>对于一个基于二元运算符的后缀表示式（基本操作数都是一位正整数），求其代表的算术表达式的值。</p>\n<p><strong>Input</strong></p>\n<p>输入一个算术表达式的后缀式字符串，以‘#’作为结束标志。</p>\n<p><strong>Output</strong></p>\n<p>求该后缀式所对应的算术表达式的值，并输出之。</p>\n<p><strong>Sample</strong></p>\n<p><strong>Input</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">59*684&#x2F;-3*+#</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">57</span><br></pre></td></tr></table></figure><p><strong>Hint</strong></p>\n<p>基本操作数都是一位正整数!</p>\n<p><strong>Answer</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">int</span> ls[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,a))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i, k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; a[i] != <span class=\"string\">'#'</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i] &gt;= <span class=\"string\">'0'</span> &amp;&amp; a[i] &lt;= <span class=\"string\">'9'</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ls[++k] = a[i] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[i] == <span class=\"string\">'*'</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ls[k<span class=\"number\">-1</span>] = ls[k<span class=\"number\">-1</span>] * ls[k];</span><br><span class=\"line\">                    k = k<span class=\"number\">-1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[i] == <span class=\"string\">'/'</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                      ls[k<span class=\"number\">-1</span>] = ls[k<span class=\"number\">-1</span>] / ls[k];</span><br><span class=\"line\">                    k = k<span class=\"number\">-1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[i] == <span class=\"string\">'+'</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                      ls[k<span class=\"number\">-1</span>] = ls[k<span class=\"number\">-1</span>] + ls[k];</span><br><span class=\"line\">                    k = k<span class=\"number\">-1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[i] == <span class=\"string\">'-'</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                      ls[k<span class=\"number\">-1</span>] = ls[k<span class=\"number\">-1</span>] - ls[k];</span><br><span class=\"line\">                    k = k<span class=\"number\">-1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ls[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"括号匹配\">括号匹配<a href=\"#括号匹配\" title=\"括号匹配\"></a></h2><p><strong>Description</strong></p>\n<p> 给你一串字符，不超过50个字符，可能包括括号、数字、字母、标点符号、空格，你的任务是检查这一串字符中的( ) ,[ ],{ }是否匹配。</p>\n<p><strong>Input</strong></p>\n<p> 输入数据有多组，处理到文件结束。</p>\n<p><strong>Output</strong></p>\n<p> 如果匹配就输出“yes”，不匹配输出“no”</p>\n<p><strong>Sample</strong></p>\n<p><strong>Input</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sin(20+10)</span><br><span class=\"line\">&#123;[&#125;]</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yes</span><br><span class=\"line\">no</span><br></pre></td></tr></table></figure><p><strong>Answer</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> s[<span class=\"number\">51</span>],b[<span class=\"number\">51</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,len;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(gets(s))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        len=<span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;len; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i]==<span class=\"string\">'('</span>||s[i]==<span class=\"string\">'&#123;'</span>||s[i]==<span class=\"string\">'['</span>)<span class=\"comment\">//前括号一律收入栈中</span></span><br><span class=\"line\">                b[++j]=s[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i]==<span class=\"string\">')'</span>)<span class=\"comment\">//若遇到对应的后括号</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j==<span class=\"number\">-1</span>)<span class=\"comment\">//先判断栈是否为空</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;<span class=\"comment\">//若为空直接退出循环</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&gt;<span class=\"number\">-1</span>&amp;&amp;b[j]==<span class=\"string\">'('</span>)<span class=\"comment\">//若不为空看是否能找到对应的匹配的括号</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    j--;<span class=\"comment\">//找到就让其出栈</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;<span class=\"comment\">//不匹配就退出循环</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i]==<span class=\"string\">']'</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j==<span class=\"number\">-1</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&gt;<span class=\"number\">-1</span>&amp;&amp;b[j]==<span class=\"string\">'['</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    j--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i]==<span class=\"string\">'&#125;'</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j==<span class=\"number\">-1</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&gt;<span class=\"number\">-1</span>&amp;&amp;b[j]==<span class=\"string\">'&#123;'</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    j--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag==<span class=\"number\">0</span>||j&gt;<span class=\"number\">-1</span>)<span class=\"comment\">//最后要考虑到栈只要不为空都不能完成匹配</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"no\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j==<span class=\"number\">-1</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"yes\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"树和二叉树\">树和二叉树<a href=\"#树和二叉树\" title=\"树和二叉树\"></a></h1><h2 id=\"遍历二叉树\">遍历二叉树<a href=\"#遍历二叉树\" title=\"遍历二叉树\"></a></h2><p><strong>Description</strong></p>\n<p>已知二叉树的一个按先序遍历输入的字符序列，如abc,,de,g,,f,,, (其中,表示空结点)。请建立二叉树并按中序和后序的方式遍历该二叉树。</p>\n<p><strong>Input</strong></p>\n<p>连续输入多组数据，每组数据输入一个长度小于50个字符的字符串。</p>\n<p><strong>Output</strong></p>\n<p>每组输入数据对应输出2行：<br>第1行输出中序遍历序列；<br>第2行输出后序遍历序列。</p>\n<p><strong>Sample</strong></p>\n<p><strong>Input</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abc,,de,g,,f,,,</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cbegdfa</span><br><span class=\"line\">cgefdba</span><br></pre></td></tr></table></figure><p><strong>Answer</strong></p>\n<p><strong>这道题就是考察中序和后序遍历二叉树的规则，如果是中序遍历的话，先遍历左子树，然后输出根节点，之后遍历右子树。而后序遍历则是先遍历左子树，然后是右子树，最后是根节点。其实前中后遍历的方法就是根据根节点遍历的先后顺序来决定的。此外，本题还考察了二叉树的建立，二叉树的建立实际上是充分利用了递归的思想，从根节点逐层递归到叶子结点即最深层结点。本人比较喜欢用链表进行二叉树的建立。因为不容易丢失数据。详情见AC代码。</strong></p>\n<p><strong>PS：好多人问我示例数据建立起来的二叉树是怎样的，从一串字符或者数字建立起立体的二叉树（先序），其实就是根据先序建立的特点使数据串进行立体化，先序输出二叉树就是先输出根节点，之后输出左子树，最后右子树。比如本题示例，</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abc,,de,g,,f,,,</span><br></pre></td></tr></table></figure><p><strong>a一定是根节点，之后b是a结点的左孩子，c是b的左孩子，之后两个，，（符号）是空，说明c结点是叶子结点（没有孩子）</strong></p>\n<p><strong>然后回溯到b结点，d是b结点的右孩子，e是d结点的左孩子，之后的逗号（，）是表示e结点的左孩子为空，g是e结点的右孩子，之后的两个逗号（，）表示g没有孩子，即g结点是叶子结点。然后再回溯到d结点，f结点是d结点的右孩子，之后的两个逗号（，）表示f没有孩子，即f是叶子结点。再回溯到a结点，最后一个逗号（，）表示的是a结点的右孩子为空。</strong></p>\n<img src=\"https://img-blog.csdnimg.cn/20191027212109275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDAxNTg2NQ==,size_16,color_FFFFFF,t_70\" style=\"zoom: 25%;\" /><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">100</span>];<span class=\"comment\">//用a数组来作为中继数组存放数据</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>//树节点的建立</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>*<span class=\"title\">lchild</span>,*<span class=\"title\">rchild</span>;</span><span class=\"comment\">//定义左孩子和右孩子</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\">struct node*<span class=\"title\">creat</span><span class=\"params\">()</span><span class=\"comment\">//二叉树的建立</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>*<span class=\"title\">root</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c;</span><br><span class=\"line\">\tc=a[x++];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(c==<span class=\"string\">','</span>)<span class=\"comment\">//如果是符号“，”则进行空指针的处理</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span><span class=\"comment\">//否则就将数据存放到新建立的结点中</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\troot=(struct node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node));</span><br><span class=\"line\">\t\troot-&gt;data=c;</span><br><span class=\"line\">\t\troot-&gt;lchild=creat();</span><br><span class=\"line\">\t\troot-&gt;rchild=creat(); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mid</span><span class=\"params\">(struct node*root)</span><span class=\"comment\">//中序遍历</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(root)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmid(root-&gt;lchild);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>,root-&gt;data);</span><br><span class=\"line\">\t\tmid(root-&gt;rchild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">(struct node*root)</span><span class=\"comment\">//后序遍历</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(root)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tafter(root-&gt;lchild);</span><br><span class=\"line\">\t\tafter(root-&gt;rchild);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>,root-&gt;data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>*<span class=\"title\">root</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,a))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tx=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\troot=(struct node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node));</span><br><span class=\"line\">\t\troot=creat();</span><br><span class=\"line\">\t\tmid(root);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t\tafter(root);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"哈夫曼编码\">哈夫曼编码<a href=\"#哈夫曼编码\" title=\"哈夫曼编码\"></a></h2><p><strong>Description</strong><br>字符的编码方式有多种，除了大家熟悉的ASCII编码，哈夫曼编码(Huffman Coding)也是一种编码方式，它是可变字长编码。该方法完全依据字符出现概率来构造出平均长度最短的编码，称之为最优编码。哈夫曼编码常被用于数据文件压缩中，其压缩率通常在20%～90%之间。你的任务是对从键盘输入的一个字符串求出它的ASCII编码长度和哈夫曼编码长度的比值。</p>\n<p><strong>Input</strong><br> 输入数据有多组，每组数据一行，表示要编码的字符串。<br><strong>Output</strong><br> 对应字符的ASCII编码长度la，huffman编码长度lh和la/lh的值(保留一位小数)，数据之间以空格间隔。<br><strong>Sample</strong><br><strong>Input</strong> </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AAAAABCD</span><br><span class=\"line\">THE_CAT_IN_THE_HAT</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">64</span> <span class=\"number\">13</span> <span class=\"number\">4.9</span></span><br><span class=\"line\"><span class=\"number\">144</span> <span class=\"number\">51</span> <span class=\"number\">2.8</span></span><br></pre></td></tr></table></figure><p><strong>Answer</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">char</span> s[<span class=\"number\">500</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> q[<span class=\"number\">1000</span>],t[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">arrange</span><span class=\"params\">(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=a[left],i=left,j=right;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&gt;=j)<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;j)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;j&amp;&amp;a[j]&gt;=x)j--;</span><br><span class=\"line\">        a[i]=a[j];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;j&amp;&amp;a[i]&lt;=x)i++;</span><br><span class=\"line\">        a[j]=a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a[i]=x;</span><br><span class=\"line\">    arrange(a,left,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">    arrange(a,i+<span class=\"number\">1</span>,right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len,i;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,s))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(t,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(t));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> top=<span class=\"number\">0</span>,rear=<span class=\"number\">0</span>;</span><br><span class=\"line\">        len=<span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m=len*<span class=\"number\">8</span>;<span class=\"comment\">//ASCLL码值每位占8个字节</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;len; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t[s[i]]++;</span><br><span class=\"line\">        &#125;<span class=\"comment\">//记录下每个字符出现的次数。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">500</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t[i])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                q[top++]=t[i];<span class=\"comment\">//让这些记录的数字入队</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arrange(q,<span class=\"number\">0</span>,top<span class=\"number\">-1</span>);<span class=\"comment\">//从小到大排好序</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x1,x2;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(top!=rear)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x1=q[rear++];<span class=\"comment\">//为什么是rear++，因为到最后一个的时候top是指在最后一个数的后面，此时rear指在最后一个数，</span></span><br><span class=\"line\">            <span class=\"comment\">//这样rear++就立刻不满足下面的条件,里面的sum也不会增加了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(top!=rear)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                x2=q[rear++];<span class=\"comment\">//为了让rear指向第三个数，进行排序</span></span><br><span class=\"line\">                sum+=x1+x2;</span><br><span class=\"line\">                q[top++]=x1+x2;<span class=\"comment\">//存放的是x1+x2，而不是sum</span></span><br><span class=\"line\">                arrange(q,rear,top<span class=\"number\">-1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d %.1lf\\n\"</span>,m,sum,<span class=\"number\">1.0</span>*m/sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"树-堆结构练习合并果子之哈夫曼树\">树-堆结构练习——合并果子之哈夫曼树<a href=\"#树-堆结构练习合并果子之哈夫曼树\" title=\"树-堆结构练习——合并果子之哈夫曼树\"></a></h2><p><strong>Description</strong><br> 在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。<br>每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过n-1次合并之后，就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所消耗体力之和。<br>因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为1，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。<br>例如有3种果子，数目依次为1，2，9。可以先将1、2堆合并，新堆数目为3，耗费体力为3。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为12，耗费体力为12。所以多多总共耗费体力=3+12=15。可以证明15为最小的体力耗费值。</p>\n<p><strong>Input</strong><br> 第一行是一个整数n(1&lt;=n&lt;=10000),表示果子的种类数。第二行包含n个整数，用空格分隔，第i个ai(1&lt;=ai&lt;=20000)是第i个果子的数目。</p>\n<p><strong>Output</strong><br> 输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。输入数据保证这个值小于2^31。</p>\n<p><strong>Sample</strong><br>*<em>Input *</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">9</span></span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">15</span></span><br></pre></td></tr></table></figure><p><strong>Answer</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">N</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    N *l,*r;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">struct N *<span class=\"title\">creat</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    N *p = (N *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(N));</span><br><span class=\"line\">    p-&gt;l = p-&gt;r = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(N *&amp;root,<span class=\"keyword\">int</span> data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        root = creat();</span><br><span class=\"line\">        root-&gt;data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(data &gt;= root-&gt;data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        insert(root-&gt;r,data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        insert(root-&gt;l,data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">check</span><span class=\"params\">(N *&amp;root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root-&gt;l == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = root-&gt;data;</span><br><span class=\"line\">        root = root-&gt;r;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> check(root-&gt;l);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,t,i,sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    N *root = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ;i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;t;</span><br><span class=\"line\">        insert(root,t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>;i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a = check(root);</span><br><span class=\"line\">        b = check(root);</span><br><span class=\"line\">        sum += a+b;</span><br><span class=\"line\">        insert(root,a+b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;sum&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"图\">图<a href=\"#图\" title=\"图\"></a></h1><h2 id=\"深度优先遍历迷宫探索\">深度优先遍历–迷宫探索<a href=\"#深度优先遍历迷宫探索\" title=\"深度优先遍历–迷宫探索\"></a></h2><p><strong>Description</strong><br>有一个地下迷宫，它的通道都是直的，而通道所有交叉点(包括通道的端点)上都有一盏灯和一个开关；请问如何从某个起点开始在迷宫中点亮所有的灯并回到起点？<br><strong>Input</strong><br>连续T组数据输入，每组数据第一行给出三个正整数，分别表示地下迷宫的结点数N(1 &lt; N &lt;= 1000)、边数M(M &lt;= 3000)和起始结点编号S，随后M行对应M条边，每行给出一对正整数，表示一条边相关联的两个顶点的编号。</p>\n<p><strong>Output</strong><br>若可以点亮所有结点的灯，则输出从S开始并以S结束的序列，序列中相邻的顶点一定有边，否则只输出部分点亮的灯的结点序列，最后输出0，表示此迷宫不是连通图。<br>访问顶点时约定以编号小的结点优先的次序访问，点亮所有可以点亮的灯后，以原路返回的方式回到起点。</p>\n<p><strong>Sample</strong><br><strong>Input</strong> </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">8</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">5</span> <span class=\"number\">4</span> <span class=\"number\">3</span> <span class=\"number\">2</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure><p><strong>Answer</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> g[<span class=\"number\">1010</span>][<span class=\"number\">1010</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> v[<span class=\"number\">1010</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> un;</span><br><span class=\"line\"><span class=\"keyword\">int</span> p[<span class=\"number\">1010</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p[un++]=k;</span><br><span class=\"line\">    v[k]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(g[k][i]&amp;&amp;!v[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dfs(n,i);</span><br><span class=\"line\">            p[un++]=k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n,m,s;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(g,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(g));     </span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(v,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(v));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;m; i++)      <span class=\"comment\">//建立邻接矩阵</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> u,v;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class=\"line\">            g[u][v]=g[v][u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        un=<span class=\"number\">0</span>;</span><br><span class=\"line\">        dfs(n,s);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;un;i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!i)</span><br><span class=\"line\">                <span class=\"built_in\">cout</span>&lt;&lt;p[i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;p[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">2</span>*n<span class=\"number\">-1</span>!=un) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"广度优先遍历从起始点到目标点的最短步数（bfs）\">广度优先遍历——从起始点到目标点的最短步数（BFS）<a href=\"#广度优先遍历从起始点到目标点的最短步数（bfs）\" title=\"广度优先遍历——从起始点到目标点的最短步数（BFS）\"></a></h2><p><strong>Description</strong><br> 在古老的魔兽传说中，有两个军团，一个叫天灾，一个叫近卫。在他们所在的地域，有n个隘口，编号为1..n，某些隘口之间是有通道连接的。其中近卫军团在1号隘口，天灾军团在n号隘口。某一天，天灾军团的领袖巫妖王决定派兵攻打近卫军团，天灾军团的部队如此庞大，甚至可以填江过河。但是巫妖王不想付出不必要的代价，他想知道在不修建任何通道的前提下，部队是否可以通过隘口及其相关通道到达近卫军团展开攻击；如果可以的话，最少需要经过多少通道。由于n的值比较大（n&lt;=1000），于是巫妖王找到了擅长编程的你 =_=，请你帮他解决这个问题，否则就把你吃掉变成他的魔法。为了拯救自己，赶紧想办法吧。</p>\n<p><strong>Input</strong><br> 输入包含多组，每组格式如下。</p>\n<p>第一行包含两个整数n,m（分别代表n个隘口，这些隘口之间有m个通道）。</p>\n<p>下面m行每行包含两个整数a，b；表示从a出发有一条通道到达b隘口（注意：通道是单向的）。</p>\n<p><strong>Output</strong><br> 如果天灾军团可以不修建任何通道就到达1号隘口，那么输出最少经过多少通道，否则输出NO。</p>\n<p><strong>Sample</strong><br><strong>Input</strong> </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NO</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;<span class=\"comment\">//存储结点的序号</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">step</span>;<span class=\"comment\">//存储已经遍历的结点</span></span><br><span class=\"line\">&#125;q[<span class=\"number\">2100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">map</span>[<span class=\"number\">1001</span>][<span class=\"number\">1001</span>];<span class=\"comment\">//存储关系</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> v[<span class=\"number\">1001</span>];<span class=\"comment\">//存储已经遍历的点</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BFS</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span><span class=\"comment\">//此处不可用n</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> in=<span class=\"number\">0</span>,out=<span class=\"number\">0</span>;<span class=\"comment\">//in表示队头，out表示队尾。</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> <span class=\"title\">t</span>;</span></span><br><span class=\"line\">    q[in].data=x,q[in].<span class=\"built_in\">step</span>=<span class=\"number\">0</span>;<span class=\"comment\">//将x,和0，传入结构体数组q中(队列)。</span></span><br><span class=\"line\">    in++;</span><br><span class=\"line\">    v[t.data]=<span class=\"number\">1</span>;<span class=\"comment\">//标记该点已经被遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(in&gt;out)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t=q[out++];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t.data==<span class=\"number\">1</span>)<span class=\"comment\">//当结点到达1时表示可以到达1号关隘</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,t.<span class=\"built_in\">step</span>);<span class=\"comment\">//输出当前步数</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v[i]==<span class=\"number\">0</span>&amp;&amp;<span class=\"built_in\">map</span>[t.data][i]==<span class=\"number\">1</span>)<span class=\"comment\">//满足没有被遍历过，并且存在关系</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                q[in].data=i;</span><br><span class=\"line\">                q[in].<span class=\"built_in\">step</span>=t.<span class=\"built_in\">step</span>+<span class=\"number\">1</span>;<span class=\"comment\">//入队列</span></span><br><span class=\"line\">                in++;</span><br><span class=\"line\">                v[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"NO\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(<span class=\"built_in\">map</span>,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">map</span>));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(v,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(v));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i,a,b;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>,&amp;a,&amp;b);</span><br><span class=\"line\">            <span class=\"built_in\">map</span>[a][b]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        BFS(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"最小生成树村村通公路\">最小生成树——村村通公路<a href=\"#最小生成树村村通公路\" title=\"最小生成树——村村通公路\"></a></h2><p><strong>Description</strong></p>\n<p>当前农村公路建设正如火如荼的展开，某乡镇政府决定实现村村通公路，工程师现有各个村落之间的原始道路统计数据表，表中列出了各村之间可以建设公路的若干条道路的成本，你的任务是根据给出的数据表，求使得每个村都有公路连通所需要的最低成本。</p>\n<p><strong>Input</strong></p>\n<p>连续多组数据输入，每组数据包括村落数目N(N &lt;= 1000)和可供选择的道路数目M(M &lt;= 3000)，随后M行对应M条道路，每行给出3个正整数，分别是该条道路直接连通的两个村庄的编号和修建该道路的预算成本，村庄从1～N编号。 </p>\n<p><strong>Output</strong></p>\n<p>输出使每个村庄都有公路连通所需要的最低成本，如果输入数据不能使所有村庄畅通，则输出-1，表示有些村庄之间没有路连通。 </p>\n<p><strong>Sample</strong></p>\n<p><strong>Input</strong> </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">3</span> <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">4</span> <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">5</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">4</span> <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span></span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">19</span></span><br></pre></td></tr></table></figure><p><strong>Answer</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> inf 0x3f3f3f3f</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sum;</span><br><span class=\"line\"><span class=\"keyword\">int</span> flag;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">1010</span>][<span class=\"number\">1010</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> b[<span class=\"number\">1010</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> lowcost[<span class=\"number\">1010</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">prime</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, m;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cost;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;n, &amp;m))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(a, inf, <span class=\"keyword\">sizeof</span>(a));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(b, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(b));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d %d\"</span>, &amp;u, &amp;v, &amp;cost);</span><br><span class=\"line\">            a[u][v] = a[v][u] = cost;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        prime();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!flag)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, sum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"-1\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">prime</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t, k, i, j;</span><br><span class=\"line\">    b[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt;= n; i++)     <span class=\"comment\">//初始化</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        lowcost[i] = a[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">2</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t = inf;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">        &#123;                                           <span class=\"comment\">//找到到1最近的</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(b[j] == <span class=\"number\">0</span>&amp;&amp; lowcost[j] &lt; t)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                t = lowcost[j];</span><br><span class=\"line\">                k = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t == inf)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;            <span class=\"comment\">//如果到1都没有连接则不连通</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        b[k] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        sum+=t;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">1</span>; j&lt;= n; j++)  </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!b[j] &amp;&amp; lowcost[j] &gt;a[j][k])</span><br><span class=\"line\">                lowcost[j] = a[j][k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"最短路径-驴友计划\">最短路径 驴友计划<a href=\"#最短路径-驴友计划\" title=\"最短路径 驴友计划\"></a></h2><p><strong>Description</strong><br>做为一个资深驴友，小新有一张珍藏的自驾游线路图，图上详细的标注了全国各个城市之间的高速公路距离和公路收费情况，现在请你编写一个程序，找出一条出发地到目的地之间的最短路径，如果有多条路径最短，则输出过路费最少的一条路径。<br><strong>Input</strong><br>连续T组数据输入，每组输入数据的第一行给出四个正整数N,M，s，d，其中N(2 &lt;= N &lt;= 500)是城市数目，城市编号从0～N-1，M是城市间高速公路的条数，s是出发地的城市编号，d是目的地的城市编号；随后M行，每行给出一条高速公路的信息，表示城市1、城市2、高速公路长度、收费额，中间以空格间隔，数字均为整数且不超过500，输入数据均保证有解。 </p>\n<p><strong>Output</strong><br>在同一行中输出路径长度和收费总额，数据间用空格间隔。 </p>\n<p><strong>Sample</strong><br><strong>Input</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">4 5 0 3</span><br><span class=\"line\">0 1 1 20</span><br><span class=\"line\">1 3 2 30</span><br><span class=\"line\">0 3 4 10</span><br><span class=\"line\">0 2 2 20</span><br><span class=\"line\">2 3 1 20</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 40</span><br></pre></td></tr></table></figure><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 1000000007</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">map</span>[<span class=\"number\">500</span>][<span class=\"number\">500</span>][<span class=\"number\">2</span>],v1[<span class=\"number\">500</span>],d[<span class=\"number\">500</span>][<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">spfa</span><span class=\"params\">(<span class=\"keyword\">int</span> s,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,f=<span class=\"number\">0</span>,top=<span class=\"number\">0</span>,q[<span class=\"number\">20000</span>],num=MAX;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(v1,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(v1));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;n&gt;i;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        d[i][<span class=\"number\">0</span>]=MAX;</span><br><span class=\"line\">        d[i][<span class=\"number\">1</span>]=MAX;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    v1[s]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    d[s][<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    d[s][<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    q[top]=s;</span><br><span class=\"line\">    top++;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(f&lt;top)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        v1[q[f]]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;n&gt;i;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[i][<span class=\"number\">0</span>]&gt;d[q[f]][<span class=\"number\">0</span>]+<span class=\"built_in\">map</span>[q[f]][i][<span class=\"number\">0</span>])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                d[i][<span class=\"number\">0</span>]=d[q[f]][<span class=\"number\">0</span>]+<span class=\"built_in\">map</span>[q[f]][i][<span class=\"number\">0</span>];</span><br><span class=\"line\">                d[i][<span class=\"number\">1</span>]=d[q[f]][<span class=\"number\">1</span>]+<span class=\"built_in\">map</span>[q[f]][i][<span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v1[i]==<span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    v1[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                    q[top]=i;</span><br><span class=\"line\">                    top++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(d[i][<span class=\"number\">0</span>]==d[q[f]][<span class=\"number\">0</span>]+<span class=\"built_in\">map</span>[q[f]][i][<span class=\"number\">0</span>]&amp;&amp;d[i][<span class=\"number\">1</span>]&gt;d[q[f]][<span class=\"number\">1</span>]+<span class=\"built_in\">map</span>[q[f]][i][<span class=\"number\">1</span>])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                d[i][<span class=\"number\">1</span>]=d[q[f]][<span class=\"number\">1</span>]+<span class=\"built_in\">map</span>[q[f]][i][<span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v1[i]==<span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    v1[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                    q[top]=i;</span><br><span class=\"line\">                    top++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        f++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t,i,i1,i2,n,m,s,d1,u,v,w,z;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;t);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;t&gt;=i;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d %d %d\"</span>,&amp;n,&amp;m,&amp;s,&amp;d1);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i1=<span class=\"number\">0</span>;n&gt;i1;i1++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(i2=<span class=\"number\">0</span>;n&gt;i2;i2++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i1==i2)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">map</span>[i1][i2][<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">map</span>[i1][i2][<span class=\"number\">0</span>]=MAX;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i1=<span class=\"number\">1</span>;m&gt;=i1;i1++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d %d %d\"</span>,&amp;u,&amp;v,&amp;w,&amp;z);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">map</span>[u][v][<span class=\"number\">0</span>]&gt;w)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">map</span>[u][v][<span class=\"number\">0</span>]=w;</span><br><span class=\"line\">                <span class=\"built_in\">map</span>[u][v][<span class=\"number\">1</span>]=z;</span><br><span class=\"line\">                <span class=\"built_in\">map</span>[v][u][<span class=\"number\">0</span>]=w;</span><br><span class=\"line\">                <span class=\"built_in\">map</span>[v][u][<span class=\"number\">1</span>]=z;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        spfa(s,n);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>,d[d1][<span class=\"number\">0</span>],d[d1][<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"拓扑排序-判断给定图是否存在合法拓扑序列\">拓扑排序 判断给定图是否存在合法拓扑序列<a href=\"#拓扑排序-判断给定图是否存在合法拓扑序列\" title=\"拓扑排序 判断给定图是否存在合法拓扑序列\"></a></h2><p><strong>Description</strong><br> 给定一个有向图，判断该有向图是否存在一个合法的拓扑序列。</p>\n<p><strong>Input</strong><br> 输入包含多组，每组格式如下。</p>\n<p>第一行包含两个整数n，m，分别代表该有向图的顶点数和边数。(n&lt;=10)</p>\n<p>后面m行每行两个整数a b，表示从a到b有一条有向边。</p>\n<p><strong>Output</strong><br> 若给定有向图存在合法拓扑序列，则输出YES；否则输出NO。</p>\n<p><strong>Sample</strong><br><strong>Input</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 0</span><br><span class=\"line\">2 2</span><br><span class=\"line\">1 2</span><br><span class=\"line\">2 1</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YES</span><br><span class=\"line\">NO</span><br></pre></td></tr></table></figure><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> s[<span class=\"number\">20</span>][<span class=\"number\">20</span>], v[<span class=\"number\">20</span>], degree[<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j, k, flag;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(degree[j] == <span class=\"number\">0</span> &amp;&amp; v[j] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                v[j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(k = <span class=\"number\">1</span>; k &lt;= n; k++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(s[j][k])</span><br><span class=\"line\">                        degree[k]--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!flag)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"NO\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"YES\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m, u, w;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;n, &amp;m) != EOF)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(s));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(v, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(v));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(degree, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(degree));</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(m--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;u, &amp;w);</span><br><span class=\"line\">            s[u][w] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            degree[w]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">find</span>(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"查找表\">查找表<a href=\"#查找表\" title=\"查找表\"></a></h1><h2 id=\"树的种类统计\">树的种类统计<a href=\"#树的种类统计\" title=\"树的种类统计\"></a></h2><p><strong>Description</strong><br>随着卫星成像技术的应用，自然资源研究机构可以识别每一个棵树的种类。请编写程序帮助研究人员统计每种树的数量，计算每种树占总数的百分比。</p>\n<p><strong>Input</strong><br>输入一组测试数据。数据的第1行给出一个正整数N (n &lt;= 100000)，N表示树的数量；随后N行，每行给出卫星观测到的一棵树的种类名称，树的名称是一个不超过20个字符的字符串，字符串由英文字母和空格组成，不区分大小写。</p>\n<p><strong>Output</strong><br>按字典序输出各种树的种类名称和它占的百分比，中间以空格间隔，小数点后保留两位小数。</p>\n<p><strong>Sample</strong><br><strong>Input</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">This is an Appletree</span><br><span class=\"line\">this is an appletree</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this is an appletree 100.00%</span><br></pre></td></tr></table></figure><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c[<span class=\"number\">30</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> * <span class=\"title\">l</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> * <span class=\"title\">r</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">struct node * <span class=\"title\">creat</span><span class=\"params\">(struct node * p, <span class=\"keyword\">char</span> *s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = (struct node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node));</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(p-&gt;c, s);</span><br><span class=\"line\">        p-&gt;num = <span class=\"number\">1</span>;</span><br><span class=\"line\">        p-&gt;l = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        p-&gt;r = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(p-&gt;c, s) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        p-&gt;l = creat(p-&gt;l, s);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(p-&gt;c, s) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        p-&gt;r = creat(p-&gt;r, s);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(p-&gt;c, s) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        p-&gt;num++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mid</span><span class=\"params\">(struct node * p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mid(p-&gt;l);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s %.2lf%c\\n\"</span>,p-&gt;c,p-&gt;num*<span class=\"number\">100.0</span>/n,<span class=\"string\">'%'</span>);</span><br><span class=\"line\">        mid(p-&gt;r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> * <span class=\"title\">Tree</span> = <span class=\"title\">NULL</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> s[<span class=\"number\">30</span>];</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>.getline(s, <span class=\"number\">30</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; s[i] != <span class=\"string\">'\\0'</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i] &gt;= <span class=\"string\">'A'</span> &amp;&amp; s[i] &lt;= <span class=\"string\">'Z'</span>)</span><br><span class=\"line\">                s[i] = s[i] + <span class=\"number\">32</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Tree = creat(Tree, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mid(Tree);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"二分查找\">二分查找<a href=\"#二分查找\" title=\"二分查找\"></a></h2><p><strong>Description</strong></p>\n<p>在一个给定的无重复元素的递增序列里，查找与给定关键字相同的元素，若存在则输出找到的位置,不存在输出-1。</p>\n<p><strong>Input</strong><br>一组输入数据，输入数据第一行首先输入两个正整数n ( n &lt; = 10^6 )和m ( m &lt; = 10^4 )，n是数组中数据元素个数，随后连续输入n个正整数，输入的数据保证数列递增。<br>随后m行输入m个待查找的关键字key</p>\n<p><strong>Output</strong><br>若在给定的序列中能够找到与关键字key相等的元素，则输出位序(序号从0开始)，否则输出-1。</p>\n<p><strong>Sample</strong><br><strong>Input</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8 3</span><br><span class=\"line\">4 6 8 9 13 20 21 22</span><br><span class=\"line\">6</span><br><span class=\"line\">8</span><br><span class=\"line\">17</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">-1</span><br></pre></td></tr></table></figure><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Search</span><span class=\"params\">(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> key)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = l,j = r;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= j)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (i + j)/<span class=\"number\">2</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[mid] == key)  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key &lt; a[mid])  </span><br><span class=\"line\">            j = mid<span class=\"number\">-1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">            i = mid+<span class=\"number\">1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m,x;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[n+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> k=Search(a,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>,x);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,k);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"哈希查找-线性之哈希表\">哈希查找 线性之哈希表<a href=\"#哈希查找-线性之哈希表\" title=\"哈希查找 线性之哈希表\"></a></h2><p><strong>Description</strong><br>根据给定的一系列整数关键字和素数p,用除留余数法定义hash函数H(Key)=Key%p,将关键字映射到长度为p的哈希表中，用线性探测法解决冲突。重复关键字放在hash表中的同一位置。</p>\n<p><strong>Input</strong><br>连续输入多组数据，每组输入数据第一行为两个正整数N(N &lt;= 1500)和p(p &gt;= N的最小素数)，N是关键字总数，p是hash表长度，第2行给出N个正整数关键字，数字间以空格间隔。</p>\n<p><strong>Output</strong><br>输出每个关键字在hash表中的位置，以空格间隔。注意最后一个数字后面不要有空格。</p>\n<p><strong>Sample</strong><br><strong>Input</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 5</span><br><span class=\"line\">21 21 21 21 21</span><br><span class=\"line\">4 5</span><br><span class=\"line\">24 15 61 88</span><br><span class=\"line\">4 5</span><br><span class=\"line\">24 39 61 15</span><br><span class=\"line\">5 5</span><br><span class=\"line\">24 39 61 15 39</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1 1 1 1</span><br><span class=\"line\">4 0 1 3</span><br><span class=\"line\">4 0 1 2</span><br><span class=\"line\">4 0 1 2 0</span><br></pre></td></tr></table></figure><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;  </span></span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,p,i,j;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> ha[<span class=\"number\">1100</span>],a[<span class=\"number\">1100</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span> (<span class=\"string\">\"%d %d\"</span>,&amp;n,&amp;p))  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">memset</span> (ha,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span> (ha));  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;n; i++)  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> d = <span class=\"number\">0</span>;  </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span> (<span class=\"string\">\"%d\"</span>,&amp;a[i]);  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> t = a[i]%p;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!ha[t])  </span><br><span class=\"line\">            &#123;  </span><br><span class=\"line\">                ha[t] = a[i];  </span><br><span class=\"line\">                <span class=\"built_in\">printf</span> (<span class=\"string\">\"%d\"</span>,t);  </span><br><span class=\"line\">            &#125;<span class=\"comment\">//if  </span></span><br><span class=\"line\">            <span class=\"keyword\">else</span><span class=\"comment\">//当ha[t]位置被存储过的时候有两种情况，一种是通过线性探测法找到此元素已经被存储过的位置tmp，另一种是通过线性探测法找到下一个存储位置(t+d)%p  </span></span><br><span class=\"line\">            &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp;  </span><br><span class=\"line\">                <span class=\"keyword\">bool</span> vis;  </span><br><span class=\"line\">                <span class=\"keyword\">while</span> (ha[(t+d)%p])  </span><br><span class=\"line\">                &#123;  </span><br><span class=\"line\">                    vis = <span class=\"literal\">false</span>;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ha[(t+d)%p]==a[i])<span class=\"comment\">//此元素已经被存储过  </span></span><br><span class=\"line\">                    &#123;  </span><br><span class=\"line\">                        tmp = (t+d)%p;<span class=\"comment\">//tmp为a[i]存储过的位置  </span></span><br><span class=\"line\">                        vis = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                    d++;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">                ha[(t+d)%p] = a[i];  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (vis)  </span><br><span class=\"line\">                    <span class=\"built_in\">printf</span> (<span class=\"string\">\"%d\"</span>,tmp);  </span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span> (<span class=\"string\">\"%d\"</span>,(t+d)%p);  </span><br><span class=\"line\">            &#125;<span class=\"comment\">//else  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i==n<span class=\"number\">-1</span>)  </span><br><span class=\"line\">                <span class=\"built_in\">printf</span> (<span class=\"string\">\"\\n\"</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">else</span>  </span><br><span class=\"line\">            <span class=\"built_in\">printf</span> (<span class=\"string\">\" \"</span>);  </span><br><span class=\"line\">        &#125;<span class=\"comment\">//for  </span></span><br><span class=\"line\">    &#125;<span class=\"comment\">//for  </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"字符串哈希\">字符串哈希<a href=\"#字符串哈希\" title=\"字符串哈希\"></a></h2><p><strong>Description</strong><br>Well, how do you feel about mobile phone? Your answer would probably be something like that “It’s so convenient and benefits people a lot”. However, If you ask Merlin this question on the New Year’s Eve, he will definitely answer “What a trouble! I have to keep my fingers moving on the phone the whole night, because I have so many greeting message to send!” Yes, Merlin has such a long name list of his friends, and he would like to send a greeting message to each of them. What’s worse, Merlin has another long name list of senders that have sent message to him, and he doesn’t want to send another message to bother them Merlin is so polite that he always replies each message he receives immediately). So, before he begins to send message, he needs to figure to how many friends are left to be sent. Please write a program to help him. Here is something that you should note. First, Merlin’s friend list is not ordered, and each name is alphabetic strings and case insensitive. These names are guaranteed to be not duplicated. Second, some senders may send more than one message to Merlin, therefore the sender list may be duplicated. Third, Merlin is known by so many people, that’s why some message senders are even not included in his friend list.<br><strong>Input</strong><br>There are multiple test cases. In each case, at the first line there are two numbers n and m (1&lt;=n,m&lt;=20000), which is the number of friends and the number of messages he has received. And then there are n lines of alphabetic strings(the length of each will be less than 10), indicating the names of Merlin’s friends, one per line. After that there are m lines of alphabetic strings, which are the names of message senders. The input is terminated by n=0.<br><strong>Output</strong><br>For each case, print one integer in one line which indicates the number of left friends he must send.<br><strong>Sample</strong><br><strong>Input</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 3</span><br><span class=\"line\">Inkfish</span><br><span class=\"line\">Henry</span><br><span class=\"line\">Carp</span><br><span class=\"line\">Max</span><br><span class=\"line\">Jericho</span><br><span class=\"line\">Carp</span><br><span class=\"line\">Max</span><br><span class=\"line\">Carp</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure><p><strong>Output</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></figure><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n), n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> m;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;m);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> send = n;</span><br><span class=\"line\">\t\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; a;</span><br><span class=\"line\">\t\t<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; b;</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> s;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cin</span>&gt;&gt;s;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//scanf(\"%s\", s);</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; s.length(); k++)</span><br><span class=\"line\">\t\t\t\ts[k] = <span class=\"built_in\">tolower</span>(s[k]);</span><br><span class=\"line\">\t\t\ta.push_back(s);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsort(a.<span class=\"built_in\">begin</span>(), a.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cin</span>&gt;&gt;s;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//scanf(\"%s\", s);</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; s.length(); k++)</span><br><span class=\"line\">\t\t\t\ts[k] = <span class=\"built_in\">tolower</span>(s[k]);</span><br><span class=\"line\">\t\t\tb.push_back(s);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsort(b.<span class=\"built_in\">begin</span>(), b.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t\t<span class=\"built_in\">list</span>&lt;<span class=\"built_in\">string</span>&gt;::iterator i;</span><br><span class=\"line\">\t\t<span class=\"built_in\">list</span>&lt;<span class=\"built_in\">string</span>&gt;::iterator j;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"comment\">/*for (i = b.begin(); i != b.end(); i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tfor (j = a.begin(); j != a.end(); j++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tif (*i == *j) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tsend--;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t*j = \"\";</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125;*/</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> start = <span class=\"number\">0</span>,<span class=\"built_in\">end</span> = n - <span class=\"number\">1</span>, mid;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (start &lt;= <span class=\"built_in\">end</span>) &#123;</span><br><span class=\"line\">\t\t\t\tmid = start + (<span class=\"built_in\">end</span> - start)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (b[i] == a[mid]) &#123;</span><br><span class=\"line\">\t\t\t\t\tsend--;</span><br><span class=\"line\">\t\t\t\t\ta[mid]=<span class=\"string\">\"8787\"</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(b[i] &gt; a[mid]) &#123;</span><br><span class=\"line\">\t\t\t\t\tstart=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(b[i] &lt; a[mid]) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">end</span>=mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, send);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">//system(\"pause\");</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"内排序\">内排序<a href=\"#内排序\" title=\"内排序\"></a></h1><h2 id=\"快速排序\">快速排序<a href=\"#快速排序\" title=\"快速排序\"></a></h2><h2 id=\"堆排序\">堆排序<a href=\"#堆排序\" title=\"堆排序\"></a></h2><h2 id=\"桶排序\">桶排序<a href=\"#桶排序\" title=\"桶排序\"></a></h2>","prev":{"title":"串、数组和广义表","link":"posts/32c38e43"},"next":{"title":"栈和队列","link":"posts/8d66b5f2"},"plink":"https://dxsummer.gitee.io/posts/5d201f0e/","toc":[{"id":"顺序表应用","title":"顺序表应用","index":"1","children":[{"id":"多余元素删除之移位算法","title":"多余元素删除之移位算法","index":"1.1"},{"id":"有序顺序表归并","title":"有序顺序表归并","index":"1.2"},{"id":"有序顺序表查询","title":"有序顺序表查询","index":"1.3"}]},{"id":"链表","title":"链表","index":"2","children":[{"id":"链表的逆置","title":"链表的逆置","index":"2.1"},{"id":"链表的逆置-1","title":"链表的逆置","index":"2.2"},{"id":"顺序建立链表","title":"顺序建立链表","index":"2.3"}]},{"id":"栈","title":"栈","index":"3","children":[{"id":"一般算术表达式转换成后缀式","title":"一般算术表达式转换成后缀式","index":"3.1"},{"id":"进制转换","title":"进制转换","index":"3.2"},{"id":"后缀式求值","title":"后缀式求值","index":"3.3"},{"id":"括号匹配","title":"括号匹配","index":"3.4"}]},{"id":"树和二叉树","title":"树和二叉树","index":"4","children":[{"id":"遍历二叉树","title":"遍历二叉树","index":"4.1"},{"id":"哈夫曼编码","title":"哈夫曼编码","index":"4.2"},{"id":"树-堆结构练习合并果子之哈夫曼树","title":"树-堆结构练习——合并果子之哈夫曼树","index":"4.3"}]},{"id":"图","title":"图","index":"5","children":[{"id":"深度优先遍历迷宫探索","title":"深度优先遍历–迷宫探索","index":"5.1"},{"id":"广度优先遍历从起始点到目标点的最短步数（bfs）","title":"广度优先遍历——从起始点到目标点的最短步数（BFS）","index":"5.2"},{"id":"最小生成树村村通公路","title":"最小生成树——村村通公路","index":"5.3"},{"id":"最短路径-驴友计划","title":"最短路径 驴友计划","index":"5.4"},{"id":"拓扑排序-判断给定图是否存在合法拓扑序列","title":"拓扑排序 判断给定图是否存在合法拓扑序列","index":"5.5"}]},{"id":"查找表","title":"查找表","index":"6","children":[{"id":"树的种类统计","title":"树的种类统计","index":"6.1"},{"id":"二分查找","title":"二分查找","index":"6.2"},{"id":"哈希查找-线性之哈希表","title":"哈希查找 线性之哈希表","index":"6.3"},{"id":"字符串哈希","title":"字符串哈希","index":"6.4"}]},{"id":"内排序","title":"内排序","index":"7","children":[{"id":"快速排序","title":"快速排序","index":"7.1"},{"id":"堆排序","title":"堆排序","index":"7.2"},{"id":"桶排序","title":"桶排序","index":"7.3"}]}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/5d201f0e/\" title=\"ACM数据结构\">https://dxsummer.gitee.io/posts/5d201f0e/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2020年10月24日","updated":"2020年12月20日"}}