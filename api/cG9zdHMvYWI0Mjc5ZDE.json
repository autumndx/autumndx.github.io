{"title":"SQL Sever笔记","date":"2021-04-05T11:02:51.000Z","date_formatted":{"ll":"2021年4月5日","L":"2021/04/05","MM-DD":"04-05"},"link":"posts/ab4279d1","comments":true,"tags":["SQL"],"categories":["SQL"],"updated":"2021-04-06T11:28:53.496Z","content":"<h1 id=\"第二章-关系数据库\">第二章 关系数据库<a href=\"#第二章-关系数据库\" title=\"第二章 关系数据库\"></a></h1><h2 id=\"1-关系数据结构及形式化定义\">1. 关系数据结构及形式化定义<a href=\"#1-关系数据结构及形式化定义\" title=\"1. 关系数据结构及形式化定义\"></a></h2><h3 id=\"11-关系\">1.1 关系<a href=\"#11-关系\" title=\"1.1 关系\"></a></h3><h4 id=\"111-域\">1.1.1 域<a href=\"#111-域\" title=\"1.1.1 域\"></a></h4><p>域是一组具有<strong>相同数据类型的值</strong>的集合。 例:</p>\n<ul><li>整数</li>\n<li>实数</li>\n<li>介于某个取值范围的整数</li>\n<li>指定长度的字符串集合</li>\n<li>{‘男’ ， ‘女’ }</li>\n</ul><h4 id=\"112-笛卡尔积\">1.1.2 笛卡尔积<a href=\"#112-笛卡尔积\" title=\"1.1.2 笛卡尔积\"></a></h4><p>给定一组域D1， D2， …， Dn， 允许其中<strong>某些域是相同的</strong>。<br>D1， D2， …， Dn的笛卡尔积为：<br>D1× D2× …× Dn ＝｛（d1， d2， …， dn） ｜ di∈Di， i＝1， 2， …， n｝</p>\n<ul><li>所有域的所有取值的一个组合</li>\n<li>不能重复 </li>\n</ul><h5 id=\"元组（tuple）\">元组（Tuple）<a href=\"#元组（tuple）\" title=\"元组（Tuple）\"></a></h5><ul><li>笛卡尔积中每一个元素<strong>（d1， d2， …， dn）</strong>叫作一个<strong>n元组</strong>（n-tuple）或简称元组</li>\n</ul><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/sql/20210405200541.png\" style=\"zoom: 80%;\" /><ul><li><p>(张清玫，计算机专业，李勇)</p>\n</li>\n<li><p>(张清玫，计算机专业，刘晨) 等 都是元组  </p>\n</li>\n</ul><h5 id=\"分量（component）\">分量（Component）<a href=\"#分量（component）\" title=\"分量（Component）\"></a></h5><ul><li>笛卡尔积元素（d1， d2， …， dn）中的<strong>每一个值di</strong> 叫作一个分量</li>\n</ul><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/sql/20210405200711.png\" style=\"zoom:80%;\" /><ul><li>张清玫、计算机专业、李勇、刘晨等都是分量 </li>\n</ul><h5 id=\"基数（cardinal-number）\">基数（Cardinal number）<a href=\"#基数（cardinal-number）\" title=\"基数（Cardinal number）\"></a></h5><ul><li><p>若Di（i＝1， 2， …， n）为有限集，其基数为mi（i＝1，2， …， n） ， 则D1× D2× …× Dn的基数M为：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/sql/20210405201042.png\" style=\"zoom:80%;\" /></li>\n</ul><h5 id=\"笛卡尔积的表示方法\">笛卡尔积的表示方法<a href=\"#笛卡尔积的表示方法\" title=\"笛卡尔积的表示方法\"></a></h5><ul><li>笛卡尔积可表示为一张<strong>二维表</strong></li>\n<li>表中的<strong>每行对应一个<font color=\"red\">元组</font></strong>， 表中的<strong>每列对应一个<font color=\"red\">域</font></strong></li>\n</ul><blockquote>\n<p>例</p>\n</blockquote>\n<p>例如， 给出3个域：<br>D1=导师集合SUPERVISOR=｛ 张清玫， 刘逸｝<br>D2=专业集合SPECIALITY=｛ 计算机专业， 信息专业｝<br>D3=研究生集合POSTGRADUATE=｛ 李勇， 刘晨， 王敏｝<br><strong>D1， D2， D3的笛卡尔积为</strong>  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D1× D2× D3＝｛</span><br><span class=\"line\">(张清玫，计算机专业，李勇)， (张清玫，计算机专业，刘晨)，</span><br><span class=\"line\">(张清玫，计算机专业，王敏)， (张清玫，信息专业，李勇)，</span><br><span class=\"line\">(张清玫，信息专业，刘晨)， (张清玫，信息专业，王敏)，</span><br><span class=\"line\">(刘逸，计算机专业，李勇)， (刘逸，计算机专业，刘晨)，</span><br><span class=\"line\">(刘逸，计算机专业，王敏)， (刘逸，信息专业，李勇)，</span><br><span class=\"line\">(刘逸，信息专业，刘晨)， (刘逸，信息专业，王敏) ｝</span><br></pre></td></tr></table></figure><p><strong>基数为2× 2× 3＝12</strong>  </p>\n<h4 id=\"113-关系\">1.1.3 关系<a href=\"#113-关系\" title=\"1.1.3 关系\"></a></h4><ol><li><p><strong>关系</strong><br><code>D1× D2× …× Dn</code>的子集叫作在域<code>D1， D2， …， Dn</code>上的关系， 表示为<br><code>R（D1， D2， …， Dn）</code></p>\n<ul><li><p>R： 关系名</p>\n</li>\n<li><p>n： 关系的目或度（Degree）  </p>\n</li>\n</ul></li>\n<li><p><strong>元组</strong><br>关系中的每个元素是关系中的元组， 通常用<code>t</code>表示。</p>\n</li>\n<li><p><strong>单元关系与二元关系</strong><br>当n=1时， 称该关系为<strong>单元关系</strong>（Unary relation）或<strong>一元关系</strong><br>当n=2时， 称该关系为<strong>二元关系</strong>（Binary relation）  </p>\n</li>\n<li><p><strong>关系的表示</strong><br>关系也是一个<strong>二维表</strong>， 表的每行对应一个元组， 表的每列对应一个域  </p>\n</li>\n<li><p><strong>属性</strong></p>\n<ul><li>关系中<mark><strong>不同列可以对应相同的域</strong></mark></li>\n<li>为了加以区分， 必须对<strong>每列起一个名字</strong>， 称为<strong>属性</strong>（Attribute）</li>\n<li><strong>n目关系必有n个属性</strong>  </li>\n</ul></li>\n<li><p><strong>码</strong></p>\n<ul><li><strong>候选码</strong>（Candidate key）<br>若关系中的<mark><strong>某一属性组的值能唯一地标识一个元组</strong></mark>，则称该属性组为<strong>候选码</strong><br><strong>简单的情况</strong>：候选码只包含一个属性</li>\n<li><strong>全码</strong>（All-key）<br><strong>最极端的情况</strong>：关系模式的<strong>所有属性组是这个关系模式的候选码</strong>，称为<strong>全码</strong>（All-key）</li>\n<li><strong>主码</strong><br>若一个关系有多个候选码，则选定其中一个为<strong>主码</strong>（Primary key）</li>\n<li><strong>主属性</strong><br><mark><strong>候选码的诸属性</strong></mark>称为<strong>主属性</strong>（Prime attribute）<br>不包含在任何侯选码中的属性称为<strong>非主属性</strong>（Non-Primeattribute）或<strong>非码属性</strong>（Non-key attribute）    </li>\n</ul></li>\n<li><p><strong>三类关系</strong><br><strong><u>基本关系</u></strong>（基本表或基表）</p>\n<pre><code>实际存在的表，是实际存储数据的逻辑表示</code></pre><p><strong>查询表</strong></p>\n<pre><code>查询结果对应的表</code></pre><p><strong>视图表</strong></p>\n<pre><code>由基本表或其他视图表导出的表， 是虚表， 不对应实际存储的数据  </code></pre></li>\n<li><p><strong>基本关系的性质</strong><br>① 列是同质的（Homogeneous）<br>② <strong>不同的列可出自同一个域</strong></p>\n<ul><li>其中的<strong>每一列称为一个属性</strong></li>\n<li>不同的属性要给予不同的属性名</li>\n</ul><p>③ <strong>列的顺序无所谓</strong>, 列的次序可以任意交换<br>④ <strong><mark>任意两个元组的候选码不能相同</mark></strong><br>⑤ <strong>行的顺序无所谓</strong>， 行的次序可以任意交换  </p>\n</li>\n</ol><h3 id=\"12-关系模式\">1.2 关系模式<a href=\"#12-关系模式\" title=\"1.2 关系模式\"></a></h3><h4 id=\"121-什么是关系模式\">1.2.1 什么是关系模式<a href=\"#121-什么是关系模式\" title=\"1.2.1 什么是关系模式\"></a></h4><ul><li><p>关系模式（ Relation Schema） 是<strong>型</strong></p>\n</li>\n<li><p>关系是<strong>值</strong></p>\n</li>\n<li><p>关系模式是对关系的<strong>描述</strong></p>\n<ul><li>元组集合的结构<ul><li><strong>属性</strong>构成</li>\n<li><strong>属性</strong>来自的<strong>域</strong></li>\n<li>属性与域之间的映象关系</li>\n</ul></li>\n<li>完整性约束条件  </li>\n</ul></li>\n</ul><h4 id=\"122-定义关系模式\">1.2.2 定义关系模式<a href=\"#122-定义关系模式\" title=\"1.2.2 定义关系模式\"></a></h4><p>关系模式可以形式化地表示为：<code>R（ U， D， DOM， F）</code></p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>R</th><th>关系名</th></tr>\n</thead><tbody><tr>\n<td>U</td><td>组成该关系的<strong>属性名</strong>集合</td></tr>\n<tr>\n<td>D</td><td>U中<strong>属性所来自的域</strong></td></tr>\n<tr>\n<td>DOM</td><td><strong>属性向域的映象</strong>集合（<mark><strong>说明它们分别出自哪个域</strong></mark>)</td></tr>\n<tr>\n<td>F</td><td><strong>属性间数据的依赖关系</strong>的集合</td></tr>\n</tbody></table></div></div><blockquote>\n<p>例:</p>\n</blockquote>\n<p><u>导师</u>和<u>研究生</u>出自同一个域——<strong>人</strong>，<br>取不同的属性名，并<strong>在模式中定义属性向域的映象</strong>，即<strong>说明它们分别出自哪个域</strong>：<br>DOM（SUPERVISOR-PERSON）<br>= DOM（POSTGRADUATE-PERSON）<br>= PERSON  </p>\n<p><strong>关系模式通常可以简记为</strong><br><code>R (U)</code> 或 <code>R (A1， A2， …， An)</code></p>\n<ul><li>R: <strong>关系名</strong></li>\n<li>A1， A2， …， An : <strong>属性名</strong></li>\n</ul><p>注：<strong>域名</strong>及<strong>属性向域的映象</strong>常常直接说明为<strong>属性的类型、长度</strong>  </p>\n<h4 id=\"123-关系模式与关系\">1.2.3 关系模式与关系<a href=\"#123-关系模式与关系\" title=\"1.2.3 关系模式与关系\"></a></h4><p><strong>关系模式</strong></p>\n<ul><li>对关系的描述</li>\n<li><strong>静态</strong>的、 稳定的</li>\n</ul><p><strong>关系</strong></p>\n<ul><li>关系模式在某一时刻的状态或内容</li>\n<li><strong>动态</strong>的、 随时间不断变化的</li>\n</ul><p><strong>关系模式和关系往往笼统称为关系</strong></p>\n<ul><li>通过上下文加以区别  </li>\n</ul><h3 id=\"13-关系数据库\">1.3 关系数据库<a href=\"#13-关系数据库\" title=\"1.3 关系数据库\"></a></h3><ul><li><strong>关系数据库</strong><ul><li>在一个给定的应用领域中， 所有关系的集合构成一个关系数据库</li>\n</ul></li>\n<li><strong>关系数据库的型与值</strong><ul><li>关系数据库的<strong>型</strong>: 关系数据库<strong>模式</strong>， 是对关系数据库的<strong>描述</strong></li>\n<li>关系数据库的<strong>值</strong>: 关系模式在<strong>某一时刻对应的关系的集合</strong>， 通常称为<strong>关系数据库</strong>    </li>\n</ul></li>\n</ul><h3 id=\"14-关系模型的存储结构\">1.4 关系模型的存储结构<a href=\"#14-关系模型的存储结构\" title=\"1.4 关系模型的存储结构\"></a></h3><ul><li>关系数据库的物理组织<ul><li>有的关系数据库管理系统中<strong>一个表对应一个操作系统文件</strong>，将物理数据组织交给操作系统完成</li>\n<li>有的关系数据库管理系统从操作系统那里申请若干个大的文件，自己划分文件空间，组织表、索引等存储结构，并进行存储管理  </li>\n</ul></li>\n</ul><h2 id=\"2-关系操作\">2. 关系操作<a href=\"#2-关系操作\" title=\"2. 关系操作\"></a></h2><p><strong>常用的关系操作</strong></p>\n<ul><li><p><strong>查询操作</strong>：选择、 投影、 连接、 除、 并、 差、 交、 笛卡尔积</p>\n</li>\n<li><p>选择、 投影、 并、 差、 笛卡尔基是5种基本操作</p>\n</li>\n<li><p><strong>数据更新</strong>：插入、 删除、 修改</p>\n</li>\n</ul><p><strong>关系操作的特点</strong></p>\n<ul><li>集合操作方式：操作的对象和结果都是集合， <font color=\"red\"><strong>一次一集合</strong></font>的方式  </li>\n</ul><h3 id=\"21-关系数据库语言的分类\">2.1 关系数据库语言的分类<a href=\"#21-关系数据库语言的分类\" title=\"2.1 关系数据库语言的分类\"></a></h3><p><strong>关系代数语言</strong></p>\n<ul><li>用对关系的运算来表达查询要求</li>\n<li>代表： ISBL</li>\n</ul><p><strong>关系演算语言：用谓词来表达查询要求</strong></p>\n<ul><li>元组关系演算语言<ul><li>谓词变元的基本对象是元组变量</li>\n<li>代表： APLHA, QUEL</li>\n</ul></li>\n<li>域关系演算语言<ul><li>谓词变元的基本对象是域变量</li>\n<li>代表： QBE</li>\n</ul></li>\n</ul><p><strong>具有关系代数和关系演算双重特点的语言</strong></p>\n<ul><li>代表： SQL（Structured Query Language）  </li>\n</ul><h2 id=\"3-关系的完整性\">3. 关系的完整性<a href=\"#3-关系的完整性\" title=\"3. 关系的完整性\"></a></h2><p><strong>实体完整性和参照完整性</strong></p>\n<ul><li>关系模型必须满足的完整性约束条件称为关系的两个不变性， 应该由关系系统自动支持</li>\n</ul><p><strong>用户定义的完整性</strong></p>\n<ul><li>应用领域需要遵循的约束条件， 体现了具体领域中的语义约束  </li>\n</ul><h3 id=\"31-实体完整性\">3.1 实体完整性<a href=\"#31-实体完整性\" title=\"3.1 实体完整性\"></a></h3><p><strong>实体完整性规则（Entity Integrity）</strong></p>\n<ul><li>若<strong>属性A是基本关系R的主属性</strong>， 则<strong>属性A不能取空值</strong></li>\n<li>空值就是“不知道” 或“不存在” 或“无意义” 的值</li>\n</ul><blockquote>\n<p> 例：</p>\n</blockquote>\n<p>​    选修（<u>学号， 课程号</u>， 成绩）<br>​    “学号、 课程号” 为<strong>主码</strong><br>​    “学号” 和“课程号” 两个属性都<strong>不能取空值</strong>  </p>\n<h3 id=\"32-参照完整性\">3.2 参照完整性<a href=\"#32-参照完整性\" title=\"3.2 参照完整性\"></a></h3><h4 id=\"321-关系间的引用\">3.2.1 关系间的引用<a href=\"#321-关系间的引用\" title=\"3.2.1 关系间的引用\"></a></h4><p>在关系模型中实体及实体间的联系都是用<strong>关系</strong>来描述的， 自然存在着关系与关系间的引用  </p>\n<img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/sql/20210406150140.png\" style=\"zoom:67%;\" /><ul><li><strong>学生关系引用了专业关系的主码“专业号”。</strong> </li>\n<li><strong>学生关系中的“专业号”值必须是<mark>确实存在</mark>的专业的专业号</strong>   </li>\n</ul><blockquote>\n<p>例[2.2]     <strong>学生、 课程、 学生与课程之间的<mark>多对多</mark>联系</strong></p>\n</blockquote>\n<p>学生（<font color=\"red\"><strong>学号</strong></font>， 姓名， 性别， 专业号， 年龄）<br>课程（<font color=\"blue\"><strong>课程号</strong></font>， 课程名， 学分）<br>选修（<font color=\"red\"><strong>学号</strong></font>， <font color=\"blue\"><strong>课程号</strong></font>， 成绩）  </p>\n<blockquote>\n<p> 例[2.3]     学生实体及其内部的<mark><strong>一对多</strong></mark>联系</p>\n</blockquote>\n<p>学生（<font color=\"blue\"><strong>学号</strong></font>， 姓名， 性别， 专业号， 年龄， <font color=\"blue\"><strong>班长</strong></font>）</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>学号</th><th>姓名</th><th>性别</th><th>专业号</th><th>年龄</th><th>班长</th></tr>\n</thead><tbody><tr>\n<td>801</td><td>张三</td><td>女</td><td>01</td><td>19</td><td>802</td></tr>\n<tr>\n<td>802</td><td>李四</td><td>男</td><td>01</td><td>20</td><td></td></tr>\n<tr>\n<td>803</td><td>王五</td><td>男</td><td>01</td><td>20</td><td>802</td></tr>\n<tr>\n<td>804</td><td>赵六</td><td>女</td><td>02</td><td>20</td><td>806</td></tr>\n<tr>\n<td>805</td><td>钱七</td><td>男</td><td>02</td><td>19</td><td></td></tr>\n</tbody></table></div></div><ul><li>“学号”是<strong>主码</strong>，“班长”是<strong>外码</strong>，它引用了本关系的“学号”</li>\n<li>“班长” 必须是确实存在的学生的学号  </li>\n</ul><h4 id=\"322-外码\">3.2.2 外码<a href=\"#322-外码\" title=\"3.2.2 外码\"></a></h4><blockquote>\n<p>[例2.1]    <strong>学生关系</strong>的“专业号”与<strong>专业关系</strong>的主码“专业号”相对应</p>\n</blockquote>\n<ul><li>“专业号”属性是学生关系的<strong>外码</strong></li>\n<li>专业关系是<strong>被参照关系</strong>，学生关系为<strong>参照关系</strong></li>\n</ul><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/sql/20210406153509.jpg\" style=\"zoom: 50%;\" /><blockquote>\n<p>[例2.2]中</p>\n</blockquote>\n<p>选修关系的“学号” 与学生关系的主码“学号”相对应<br>选修关系的“课程号”与课程关系的主码“课程号”相对应</p>\n<img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/sql/20210406154130.jpg\" style=\"zoom:50%;\" /><ul><li>“学号”和“课程号”是选修关系的<strong>外码</strong></li>\n<li>学生关系和课程关系均为<strong>被参照关系</strong></li>\n<li>选修关系为<strong>参照关系</strong></li>\n</ul><blockquote>\n<p>[例2.3]中“班长”与本身的主码“学号”相对应</p>\n</blockquote>\n<img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/sql/20210406163354.jpg\" style=\"zoom:50%;\" /><ul><li>“班长”是<strong>外码</strong></li>\n<li>学生关系既是<strong>参照关系</strong>也是被<strong>参照关系</strong>  </li>\n</ul><h4 id=\"323-参照完整性规则\">3.2.3 参照完整性规则<a href=\"#323-参照完整性规则\" title=\"3.2.3 参照完整性规则\"></a></h4><blockquote>\n<p>[例2.1]    学生关系中每个元组的“<strong><font color=\"red\">专业号</font></strong>” 属性只取两类值：</p>\n</blockquote>\n<p>（1） <font color=\"red\"><strong>空值</strong></font>， 表示尚未给该学生分配专业<br>（ 2） 非空值， 这时该值必须<font color=\"red\"><strong>是专业关系中某个元组的“专业号” 值</strong></font>， 表示该学生不可能分配一个不存在的专业  </p>\n<blockquote>\n<p>[例2.2] 选修（<u>学号</u>， <u>课程号</u>，成绩）</p>\n</blockquote>\n<p>“学号”和“课程号”可能的取值 ：<br>（1）选修关系中的主属性，不能取空值<br>（2）只能取相应被参照关系中已经存在的主码值  </p>\n<blockquote>\n<p>[例2.3]     学生（<u><strong>学号</strong></u>，姓名，性别，专业号，年龄， <strong>班长</strong>）</p>\n</blockquote>\n<p>“班长”属性值可以取两类值：<br>（1）空值，表示该学生所在班级尚未选出班长<br>（2）非空值，该值必须是本关系中某个元组的学号值  </p>\n<h3 id=\"33-用户定义的完整性\">3.3 用户定义的完整性<a href=\"#33-用户定义的完整性\" title=\"3.3 用户定义的完整性\"></a></h3><blockquote>\n<p>例:    课程（<u>课程号</u>， 课程名， 学分）</p>\n</blockquote>\n<ul><li>“课程号” 属性必须取唯一值</li>\n<li>非主属性“课程名” 也不能取空值</li>\n<li>“学分” 属性只能取值{1， 2， 3， 4}  </li>\n</ul><h2 id=\"4-关系代数\">4. 关系代数<a href=\"#4-关系代数\" title=\"4. 关系代数\"></a></h2><p>关系代数是一种抽象的<strong>查询语言</strong>，它用<strong>对关系的运算来表达查询</strong></p>\n<p>关系代数</p>\n<ul><li>运算对象是关系</li>\n<li>运算结果亦为关系</li>\n<li>关系代数的运算符有两类：<strong>集合运算符</strong>和专门的<strong>关系运算符</strong></li>\n</ul><p>传统的集合运算是从关系的“<strong>水平</strong>”方向即<strong>行的角度</strong>进行<br>专门的关系运算不仅涉及行而且涉及列  </p>\n<img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/sql/20210406190303.png\" alt=\"关系代数运算符\" style=\"zoom:67%;\" /><h3 id=\"并（union）\">并（Union）<a href=\"#并（union）\" title=\"并（Union）\"></a></h3><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/sql/20210406190843.png\" style=\"zoom: 67%;\" /><p><strong>R和S</strong></p>\n<ul><li><mark>具有相同的目n（ 即两个关系<strong>都有n个属性</strong>）</mark></li>\n<li>相应的<strong>属性取自同一个域</strong></li>\n</ul><p><strong>R∪ S</strong></p>\n<ul><li>仍为n目关系， 由属于R或属于S的元组组成<br>R∪ S = { t|t∈R∨t ∈S }  </li>\n</ul><h3 id=\"差-（difference）\">差 （Difference）<a href=\"#差-（difference）\" title=\"差 （Difference）\"></a></h3><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/sql/20210406192336.png\" style=\"zoom:67%;\" /><p><strong>R和S</strong></p>\n<ul><li><p>具有相同的目n</p>\n</li>\n<li><p>相应的属性取自同一个域</p>\n</li>\n</ul><p><strong>R - S</strong></p>\n<ul><li>仍为n目关系， 由属于R而不属于S的所有元组组成<br>R -S = { t|t∈R∧t ∉ S }  </li>\n</ul><h3 id=\"交（-intersection）\">交（ Intersection）<a href=\"#交（-intersection）\" title=\"交（ Intersection）\"></a></h3><img src=\"https://cdn.jsdelivr.net/gh/Dxsummer/cdn/img/sql/20210406192821.png\" style=\"zoom:67%;\" /><p><strong>R和S</strong></p>\n<ul><li>具有相同的目n</li>\n<li>相应的属性取自同一个域</li>\n</ul><p><strong>R∩S</strong></p>\n<ul><li>仍为n目关系， 由既属于R又属于S的元组组成<br>R∩S = { t|t ∈ R∧t ∈S }<br>R∩S = R –(R-S）  </li>\n</ul><h3 id=\"笛卡尔积（-cartesian-product）\">笛卡尔积（ Cartesian Product）<a href=\"#笛卡尔积（-cartesian-product）\" title=\"笛卡尔积（ Cartesian Product）\"></a></h3><h1 id=\"sql语句及种类\">SQL语句及种类<a href=\"#sql语句及种类\" title=\"SQL语句及种类\"></a></h1><p>SQL语句可以分为以下三类</p>\n<ul><li><font color=\"red\"><strong>DDL</strong></font>（Data Definition Language，数据定义语言）用来创建或者删除存储数据用的<strong>数据库以及数据库中的表等对象</strong>。DDL 包含以下几种指令：<ul><li>CREATE (create)：创<strong>建</strong>数据库和表等对象</li>\n<li>DROP (drop) ： <strong>删</strong>除数据库和表等对象</li>\n<li>ALTER (alter)： 修<strong>改</strong>数据库和表等对象的结构</li>\n</ul></li>\n<li><font color=\"red\"><strong>DML</strong></font>（Data Manipulation Language，数据操纵语言） 用来<strong>查询或者变更表中的记录</strong>。<strong>SQL语句中使用的最多</strong>。DML 包含以下几种指令：<ul><li>SELECT (select)：<strong>查</strong>询表中的数据</li>\n<li>INSERT (insert)：向表中<strong>插</strong>入新数据</li>\n<li>UPDATE (update)：<strong>更</strong>新表中的数据</li>\n<li>DELETE (delete)：<strong>删</strong>除表中的数据</li>\n</ul></li>\n<li><font color=\"red\"><strong>DCL</strong></font>（Data Control Language，数据控制语言） 用来<strong>确认或者取消对数据库中的数据进行的变更</strong>。除此之外，还可以对 RDBMS 的用户是否有权限操作数据库中的对象（数据库表等）进行设定。DCL 包含以下几种指令：<ul><li>COMMIT (commit)： 确认对数据库中的数据进行的变更</li>\n<li>ROLLBACK (rollback)：取消对数据库中的数据进行的变更</li>\n<li>GRANT (grant)：赋予用户操作权限</li>\n<li>REVOKE (revoke)：取消用户的操作权限</li>\n</ul></li>\n</ul><h1 id=\"sql的基本书写规则\">SQL的基本书写规则<a href=\"#sql的基本书写规则\" title=\"SQL的基本书写规则\"></a></h1><p>1.SQL语句以分号(<code>;</code>)结尾<br>2.SQL<font color=\"red\"><strong>语句</strong></font><strong>不区分大小写</strong>，但是<font color=\"red\"><strong>输入</strong></font><strong>数据区分大小写</strong><br>3.<strong>字符串</strong>和<strong>日期常数</strong>需要使用单引号<code>&#39;</code>‘括起来<br>4.单词需要用半角空格或者换行来分隔<br>5.注释符号：</p>\n<ul><li>单行注释：<code>–</code></li>\n<li>多行注释：<code>/* */</code></li>\n</ul><h1 id=\"表的创建与操作（插入、更新、修改、删除）\">表的创建与操作（插入、更新、修改、删除）<a href=\"#表的创建与操作（插入、更新、修改、删除）\" title=\"表的创建与操作（插入、更新、修改、删除）\"></a></h1><p>在创建表之前，需要先<strong>创建</strong>用来存储表的<strong>数据库</strong><br>1、假设要创造一个名为product的表，先创建用来存储表的数据库，取名为shop：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> shop;</span><br></pre></td></tr></table></figure><p>2、创建product表，列名各种约束设置如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> Product(</span><br><span class=\"line\">product_id <span class=\"built_in\">char</span>(<span class=\"number\">4</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">product_name <span class=\"built_in\">varchar</span>(<span class=\"number\">100</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">product_type <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">sale_price <span class=\"built_in\">integer</span> ,</span><br><span class=\"line\">purchase_price <span class=\"built_in\">integer</span> ,</span><br><span class=\"line\">regist_date <span class=\"built_in\">date</span> ,</span><br><span class=\"line\">primary <span class=\"keyword\">key</span>(product_id));<span class=\"comment\">--指定product_id为主键，可以通过该列提取数据</span></span><br></pre></td></tr></table></figure><p>第一个元素为列名，第二个元素为数据类型的指定，第三个元素为对列中存储的数据进行限制如：not null表示数据不能为空。</p>\n<p>数据类型有以下：</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>integer</th><th>整数型数据</th></tr>\n</thead><tbody><tr>\n<td>char</td><td>定长字符串型</td></tr>\n<tr>\n<td>varchar</td><td>可变长字符串型</td></tr>\n<tr>\n<td>date</td><td>日期型</td></tr>\n</tbody></table></div></div><p>3、insert into &lt; table &gt;(column1,column2,…) values (value1,value2,…) 向表中插入数据，有三种写法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">START</span> <span class=\"keyword\">TRANSACTION</span><span class=\"comment\">-- 事务开始语句，sql中可省略</span></span><br><span class=\"line\"><span class=\"comment\">--依次单行插入</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> product <span class=\"keyword\">VALUES</span> (<span class=\"string\">'0001'</span>, <span class=\"string\">'T恤'</span> ,<span class=\"string\">'衣服'</span>, <span class=\"number\">1000</span>, <span class=\"number\">500</span>, <span class=\"string\">'2009-09-20'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> product <span class=\"keyword\">VALUES</span> (<span class=\"string\">'0002'</span>, <span class=\"string\">'打孔器'</span>, <span class=\"string\">'办公用品'</span>, <span class=\"number\">500</span>, <span class=\"number\">320</span>, <span class=\"string\">'2009-09-11'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--多行插入</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> product <span class=\"keyword\">VALUES</span> (<span class=\"string\">'0003'</span>, <span class=\"string\">'运动T恤'</span>, <span class=\"string\">'衣服'</span>, <span class=\"number\">4000</span>, <span class=\"number\">2800</span>, <span class=\"literal\">NULL</span>),</span><br><span class=\"line\">(<span class=\"string\">'0004'</span>, <span class=\"string\">'菜刀'</span>, <span class=\"string\">'厨房用具'</span>, <span class=\"number\">3000</span>, <span class=\"number\">2800</span>, <span class=\"string\">'2009-09-20'</span>),</span><br><span class=\"line\">(<span class=\"string\">'0005'</span>, <span class=\"string\">'高压锅'</span>, <span class=\"string\">'厨房用具'</span>, <span class=\"number\">6800</span>, <span class=\"number\">5000</span>, <span class=\"string\">'2009-01-15'</span>),</span><br><span class=\"line\">(<span class=\"string\">'0006'</span>, <span class=\"string\">'叉子'</span>, <span class=\"string\">'厨房用具'</span>, <span class=\"number\">500</span>, <span class=\"literal\">NULL</span>, <span class=\"string\">'2009-09-20'</span>),</span><br><span class=\"line\">(<span class=\"string\">'0007'</span>, <span class=\"string\">'擦菜板'</span>, <span class=\"string\">'厨房用具'</span>, <span class=\"number\">880</span>, <span class=\"number\">790</span>, <span class=\"string\">'2008-04-28'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--某列数据为空，插入的时候可以省略</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> product(product_id,product_name,product_type,sale_price,regist_date)</span><br><span class=\"line\"> <span class=\"keyword\">VALUES</span> (<span class=\"string\">'0008'</span>, <span class=\"string\">'圆珠笔'</span>, <span class=\"string\">'办公用品'</span>, <span class=\"number\">100</span>, <span class=\"string\">'2009-11-11'</span>);<span class=\"comment\">-- 只插入这5列的数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;<span class=\"comment\">-- 事务确认处理语句，sql中可省略</span></span><br></pre></td></tr></table></figure><p>注意想插入null的列不能有not null的约束；若某列没有not null的限制且不插入该列，那么此列数据为null（如上述第三种方法中purchase_price就是null）。</p>\n<p>4、<strong>查看表</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> Product;</span><br></pre></td></tr></table></figure><p><img src=\"https://img-blog.csdnimg.cn/2020052618494733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY2NjU2Ng==,size_16,color_FFFFFF,t_70\" class=\"φcy\" alt=\"在这里插入图片描述\"><br>5、表的更新<br>5-1 <strong>添加列，删除列</strong></p>\n<ul><li>添加，删除一列</li>\n</ul><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> Product <span class=\"keyword\">add</span>  product_name_pinyin <span class=\"built_in\">varchar</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> Product <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> product_name_pinyin;</span><br></pre></td></tr></table></figure><ul><li>添加，删除多列</li>\n</ul><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> product <span class=\"keyword\">add</span> MaleCount <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>) <span class=\"literal\">null</span>,FemaleCount <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>) <span class=\"literal\">null</span>; <span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> product <span class=\"keyword\">drop</span> MaleCount, <span class=\"keyword\">drop</span> FemaleCount;</span><br></pre></td></tr></table></figure><p>其中colum可以省略不写<br>5-2 <strong>变更表名</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> product <span class=\"keyword\">rename</span> <span class=\"keyword\">to</span> Product;</span><br></pre></td></tr></table></figure><p>6、表和数据库的<strong>删除</strong>（不可恢复）：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> Product;</span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> shop;</span><br></pre></td></tr></table></figure>","next":{"title":"SQL Sever安装教程","link":"posts/d6a1283f"},"plink":"https://dxsummer.gitee.io/posts/ab4279d1/","toc":[{"id":"第二章-关系数据库","title":"第二章 关系数据库","index":"1","children":[{"id":"1-关系数据结构及形式化定义","title":"1. 关系数据结构及形式化定义","index":"1.1","children":[{"id":"11-关系","title":"1.1 关系","index":"1.1.1","children":[{"id":"111-域","title":"1.1.1 域","index":"1.1.1.1"},{"id":"112-笛卡尔积","title":"1.1.2 笛卡尔积","index":"1.1.1.2"},{"id":"113-关系","title":"1.1.3 关系","index":"1.1.1.3"}]},{"id":"12-关系模式","title":"1.2 关系模式","index":"1.1.2","children":[{"id":"121-什么是关系模式","title":"1.2.1 什么是关系模式","index":"1.1.2.1"},{"id":"122-定义关系模式","title":"1.2.2 定义关系模式","index":"1.1.2.2"},{"id":"123-关系模式与关系","title":"1.2.3 关系模式与关系","index":"1.1.2.3"}]},{"id":"13-关系数据库","title":"1.3 关系数据库","index":"1.1.3"},{"id":"14-关系模型的存储结构","title":"1.4 关系模型的存储结构","index":"1.1.4"}]},{"id":"2-关系操作","title":"2. 关系操作","index":"1.2","children":[{"id":"21-关系数据库语言的分类","title":"2.1 关系数据库语言的分类","index":"1.2.1"}]},{"id":"3-关系的完整性","title":"3. 关系的完整性","index":"1.3","children":[{"id":"31-实体完整性","title":"3.1 实体完整性","index":"1.3.1"},{"id":"32-参照完整性","title":"3.2 参照完整性","index":"1.3.2","children":[{"id":"321-关系间的引用","title":"3.2.1 关系间的引用","index":"1.3.2.1"},{"id":"322-外码","title":"3.2.2 外码","index":"1.3.2.2"},{"id":"323-参照完整性规则","title":"3.2.3 参照完整性规则","index":"1.3.2.3"}]},{"id":"33-用户定义的完整性","title":"3.3 用户定义的完整性","index":"1.3.3"}]},{"id":"4-关系代数","title":"4. 关系代数","index":"1.4","children":[{"id":"并（union）","title":"并（Union）","index":"1.4.1"},{"id":"差-（difference）","title":"差 （Difference）","index":"1.4.2"},{"id":"交（-intersection）","title":"交（ Intersection）","index":"1.4.3"},{"id":"笛卡尔积（-cartesian-product）","title":"笛卡尔积（ Cartesian Product）","index":"1.4.4"}]}]},{"id":"sql语句及种类","title":"SQL语句及种类","index":"2"},{"id":"sql的基本书写规则","title":"SQL的基本书写规则","index":"3"},{"id":"表的创建与操作（插入、更新、修改、删除）","title":"表的创建与操作（插入、更新、修改、删除）","index":"4"}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/ab4279d1/\" title=\"SQL Sever笔记\">https://dxsummer.gitee.io/posts/ab4279d1/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2021年4月5日","updated":"2021年4月6日"}}