{"title":"Step2 字符串和格式化输入/输出","date":"2020-04-29T09:02:38.000Z","date_formatted":{"ll":"2020年4月29日","L":"2020/04/29","MM-DD":"04-29"},"link":"posts/2a5471de","comments":true,"tags":["C语言基础"],"categories":["C语言"],"updated":"2020-06-08T01:44:53.958Z","content":"<ul><li><p>本章介绍以下内容：</p>\n<p>  函数：strlen()<br>  关键字：const<br>  字符串<br>  如何创建、存储字符串<br>  如何使用strlen()函数获取字符串的长度<br>  用C预处理器指令#define和ANSIC的const修饰符创建符号常量  </p>\n</li>\n</ul><blockquote>\n<p>本章重点介绍<strong>输入和输出</strong>。与程序交互和使用<strong>字符串</strong>可以编写个性化的程序，本章将详细介绍C语言的两个输入/输出函数：<code>printf()</code>和<code>scanf()</code>。学会使用这两个函数，不仅能与用户交互，还可根据个人喜好和任务要求格式化输出。最后，简要介绍一个重要的工具——C预处理器指令，并学习如何定义、使用符号常量。</p>\n</blockquote>\n<p>程序清单4.1 talkback.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// talkback.c -- 演示与用户交互</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;　　 // 提供strlen()函数的原型</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DENSITY 62.4　　<span class=\"comment\">// 人体密度（单位：磅/立方英尺）</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> weight, volume;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>, letters;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">40</span>];　　　 <span class=\"comment\">// name是一个可容纳40个字符的数组</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hi! What's your first name?\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, name);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s, what's your weight in pounds?\\n\"</span>, name);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>, &amp;weight);</span><br><span class=\"line\">    <span class=\"built_in\">size</span> = <span class=\"keyword\">sizeof</span> name;</span><br><span class=\"line\">    letters = <span class=\"built_in\">strlen</span>(name);</span><br><span class=\"line\">    volume = weight / DENSITY;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Well, %s, your volume is %2.2f cubic feet.\\n\"</span>, name, volume);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Also, your first name has %d letters,\\n\"</span>, letters);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"and we have %d bytes to store it.\\n\"</span>, <span class=\"built_in\">size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>运行talkback.c程序，输入结果如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi! What<span class=\"number\">'</span>s your first name?</span><br><span class=\"line\">Christine</span><br><span class=\"line\">Christine, what<span class=\"number\">'</span>s your weight in pounds?</span><br><span class=\"line\"><span class=\"number\">154</span></span><br><span class=\"line\">Well, Christine, your volume is <span class=\"number\">2.47</span> cubic feet.</span><br><span class=\"line\">Also, your first name has <span class=\"number\">9</span> letters,</span><br><span class=\"line\"><span class=\"keyword\">and</span> we have <span class=\"number\">40</span> bytes to store it.</span><br></pre></td></tr></table></figure><p>该程序包含以下新特性。</p>\n<p>用数组（array）储存字符串（character string）。在该程序中，用户输入的名被储存在数组中，该数组占用内存中40个连续的字节，每个字节储存一个字符值。</p>\n<p>使用<code>%s</code>转换说明来处理字符串的<strong>输入</strong>和<strong>输出</strong>。注意，在<code>scanf()</code>中，<code>name</code>没有&amp;前缀，而<code>weight</code>有（稍后解释，&amp;weight和name都是地址）。</p>\n<p>用C预处理器把字符常量<code>DENSITY</code>定义为62.4。</p>\n<p>用C函数<code>strlen()</code>获取字符串的长度。</p>\n<p>对于<code>BASIC</code>的输入/输出而言，C的输入/输出看上去有些复杂。不过，复杂换来的是程序的高效和方便控制输入/输出。而且，一旦熟悉用法后，会发现它很简单。</p>\n<h2 id=\"字符串简介\">字符串简介<a href=\"#字符串简介\" title=\"字符串简介\"></a></h2><p>字符串（character string）是一个或多个字符的序列，如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Zing went the strings of my heart!\"</span></span><br></pre></td></tr></table></figure><p>双引号不是字符串的一部分。<strong>双引号仅告知编译器它括起来的是字符串</strong>，正如单引号用于标识单个字符一样。</p>\n<h3 id=\"char类型数组和null字符\">char类型数组和null字符<a href=\"#char类型数组和null字符\" title=\"char类型数组和null字符\"></a></h3><p>C语言没有专门用于储存字符串的变量类型，字符串都被储存在char类型的数组中。数组由连续的存储单元组成，字符串中的字符被储存在相邻的存储单元中，每个单元储存一个字符（见图4.1）。<br><img src=\"https://i.loli.net/2020/04/29/Xg14qInQredbjhD.jpg\" alt=\"4.1\" style=\"zoom:80%;\" /></p>\n<p>注意图4.1中数组末尾位置的字符<code>\\0</code>。这是<strong>空字符（null character）</strong>，C语言<strong>用它标记字符串的结束</strong>。<strong>空字符不是数字0，它是非打印字符</strong>，其ASCII码值是（或等价于）0。<mark>C中的字符串一定以空字符结束</mark>，这意味着数组的容量必须至少比待存储字符串中的字符数多1。因此，程序清单4.1中有40个存储单元的字符串，只能储存39个字符，剩下一个字节留给空字符。</p>\n<p>那么，什么是数组？可以把数组看作是一行连续的多个存储单元。用更正式的说法是，数组是同类型数据元素的有序序列。程序清单4.1通过以下声明创建了一个包含40个存储单元（或元素）的数组，每个单元储存一个char类型的值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> name[<span class=\"number\">40</span>];</span><br></pre></td></tr></table></figure><p>name后面的方括号表明这是一个数组，方括号中的40表明该数组中的元素数量。char表明每个元素的类型（见图4.2）。<br><img src=\"https://i.loli.net/2020/04/29/UHNMp6RxE3oFIqi.jpg\" style=\"zoom: 67%;\" /></p>\n<p>字符串看上去比较复杂！必须先创建一个数组，把字符串中的字符逐个放入数组，还要记得在末尾加上一个<code>\\0</code>。还好，计算机可以自己处理这些细节。</p>\n<h3 id=\"使用字符串\">使用字符串<a href=\"#使用字符串\" title=\"使用字符串\"></a></h3><p>试着运行程序清单4.2，使用字符串其实很简单。</p>\n<p>程序清单4.2 praise1.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* praise1.c -- 使用不同类型的字符串 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PRAISE <span class=\"meta-string\">\"You are an extraordinary being.\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">40</span>];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"What's your name? \"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, name);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, %s.%s\\n\"</span>, name, PRAISE);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><code>%s</code>告诉<code>printf()</code>打印一个字符串。<code>%s</code>出现了两次，因为程序要打印两个字符串：一个储存在<code>name</code>数组中；一个由<code>PRAISE</code>来表示。运行<code>praise1.c</code>，其输出如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">What<span class=\"number\">'</span>s your name? Angela Plains</span><br><span class=\"line\">Hello, Angela.You are an extraordinary being.</span><br></pre></td></tr></table></figure><p>你不用亲自把空字符放入字符串末尾，<code>scanf()</code>在读取输入时就已完成这项工作。也不用在字符串常量<code>PRAISE</code>末尾添加空字符。稍后我们会解释<code>#define</code>指令，现在先理解<code>PRAISE</code>后面用双引号括起来的文本是一个字符串。编译器会在末尾加上空字符。</p>\n<p>注意（这很重要），<code>scanf()</code><mark>只读取了Angela Plains中的Angela，它在遇到第1个空白（空格、制表符或换行符）时就不再读取输入</mark>。因此，<code>scanf()</code>在读到Angela和Plains之间的空格时就停止了。一般而言，根据<code>%s</code>转换说明，<strong>scanf()只会读取字符串中的一个单词，而不是一整句</strong>。C语言还有其他的输入函数（如，<code>fgets()</code>），用于读取一般字符串。后面章节将详细介绍这些函数。</p>\n<h4 id=\"字符串和字符\">字符串和字符<a href=\"#字符串和字符\" title=\"字符串和字符\"></a></h4><p>字符串常量<code>&quot;x&quot;</code>和字符常量<code>&#39;x&#39;</code>不同。区别之一在于<code>&#39;x&#39;</code>是基本类型（<code>char</code>），而<code>&quot;x&quot;</code>是派生类型（<code>char数组</code>）；区别之二是<code>&quot;x&quot;</code>实际上由两个字符组成：<code>&#39;x&#39;</code>和空字符<code>\\0</code>（见图4.3）。<br><img src=\"https://i.loli.net/2020/04/29/R2NnQfPXoUjcuIE.jpg\" style=\"zoom:80%;\" /></p>\n<h3 id=\"strlen函数\">strlen()函数<a href=\"#strlen函数\" title=\"strlen()函数\"></a></h3><p>上一章提到了 <code>sizeof</code> 运算符，它<strong>以字节为单位</strong>给出对象的大小。<code>strlen()</code>函数<strong>给出字符串中的字符长度</strong>。因为 1 字节储存一个字符，读者可能认为把两种方法应用于字符串得到的结果相同，但事实并非如此。请根据程序清单4.3，在程序清单4.2中添加几行代码，看看为什么会这样。</p>\n<p>程序清单4.3 praise2.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* praise2.c */</span></span><br><span class=\"line\"><span class=\"comment\">// 如果编译器不识别%zd，尝试换成%u或%lu。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;　　/* 提供strlen()函数的原型 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PRAISE <span class=\"meta-string\">\"You are an extraordinary being.\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">40</span>];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"What's your name? \"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, name);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, %s.%s\\n\"</span>, name, PRAISE);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Your name of %zd letters occupies %zd memory cells.\\n\"</span>,</span><br><span class=\"line\">    <span class=\"built_in\">strlen</span>(name), <span class=\"keyword\">sizeof</span> name);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"The phrase of praise has %zd letters \"</span>,</span><br><span class=\"line\">    <span class=\"built_in\">strlen</span>(PRAISE));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"and occupies %zd memory cells.\\n\"</span>, <span class=\"keyword\">sizeof</span> PRAISE);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>如果使用ANSI C之前的编译器，必须移除这一行：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>string.h</code>头文件包含多个与字符串相关的函数原型，包括<code>strlen()</code>。第11章将详细介绍该头文件（顺带一提，一些ANSI之前的UNIX系统用<code>strings.h</code>代替<code>string.h</code>，其中也包含了一些字符串函数的声明）。</p>\n<p>一般而言，C 把函数库中相关的函数归为一类，并为每类函数提供一个头文件。例如，<code>printf()</code>和<code>scanf()</code>都隶属标准输入和输出函数，使用<code>stdio.h</code>头文件。<code>string.h</code>头文件中包含了<code>strlen()</code>函数和其他一些与字符串相关的函数（如<strong>拷贝字符串的函数</strong>和<strong>字符串查找函数</strong>）。</p>\n<p>注意，程序清单4.3使用了两种方法处理很长的<code>printf()</code>语句。第1种方法是将<code>printf()</code>语句分为两行（可以在参数之间断为两行，但是不要在双引号中的字符串中间断开）；第 2 种方法是使用两个<code>printf()</code>语句打印一行内容，只在第2条<code>printf()</code>语句中使用换行符（<code>\\n</code>）。运行该程序，其交互输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">What<span class=\"number\">'</span>s your name? Serendipity Chance</span><br><span class=\"line\">Hello, Serendipity.You are an extraordinary being.</span><br><span class=\"line\">Your name of <span class=\"number\">11</span> letters occupies <span class=\"number\">40</span> memory cells.</span><br><span class=\"line\">The phrase of praise has <span class=\"number\">31</span> letters <span class=\"keyword\">and</span> occupies <span class=\"number\">32</span> memory cells.</span><br></pre></td></tr></table></figure><p><code>sizeof</code>运算符报告，<code>name数组</code>有40个存储单元。但是，只有前11个单元用来储存Serendipity，所以<code>strlen()</code>得出的结果是11。name数组的第12个单元储存空字符，<code>strlen()</code>并未将其计入。图4.4演示了这个概念。<br><img src=\"https://i.loli.net/2020/05/06/mg8LfBFxhQICznJ.jpg\" alt=\"strlen()函数知道在何处停止\" style=\"zoom:67%;\" /></p>\n<p>对于 PRAISE，用 <code>strlen()</code>得出的也是字符串中的字符数（包括空格和标点符号）。然而，<mark>sizeof运算符给出的数更大，因为它把字符串末尾不可见的空字符也计算在内</mark>。该程序并未明确告诉计算机要给字符串预留多少空间，所以<strong>它必须计算双引号内的字符数</strong>。</p>\n<p>第 3 章提到过，C99 和 C11 标准专门为 <code>sizeof</code> 运算符的返回类型添加了<code>%zd</code> 转换说明，这对于<code>strlen()</code>同样适用。对于早期的C，还要知道<code>sizeof</code>和<code>strlen()</code>返回的实际类型（通常是<code>unsigned</code>或<code>unsigned long</code>）。</p>\n<p>另外，还要注意一点：上一章的 <code>sizeof</code> 使用了圆括号，但本例没有。<strong>圆括号的使用时机否取决于运算对象是类型还是特定量？运算对象是类型时，圆括号必不可少，但是对于特定量，可有可无</strong>。也就是说，对于类型，应写成<code>sizeof(char)</code>或<code>sizeof(float)</code>；对于特定量，可写成<code>sizeof name</code>或<code>sizeof 6.28</code>。尽管如此，还是<strong>建议所有情况下都使用圆括号</strong>，如<code>sizeof(6.28)</code>。</p>\n<p>程序清单4.3中使用<code>strlen()</code>和<code>sizeof</code>，完全是为了满足读者的好奇心。在实际应用中，<code>strlen()</code>和 <code>sizeof</code> 是非常重要的编程工具。例如，在各种要处理字符串的程序中，<code>strlen()</code>很有用。详见第11章。</p>\n<p>下面我们来学习#define指令。</p>\n<h2 id=\"常量和c预处理器\">常量和C预处理器<a href=\"#常量和c预处理器\" title=\"常量和C预处理器\"></a></h2><p>有时，在程序中要使用常量。例如，可以这样计算圆的周长：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">circumference &#x3D; 3.14159 * diameter;</span><br></pre></td></tr></table></figure><p>这里，常量<code>3.14159</code>代表著名的常量<code>pi（π）</code>。在该例中，输入实际值便可使用这个常量。然而，这种情况使用符号常量（symbolic constant）会更好。也就是说，使用下面的语句，计算机稍后会用实际值完成替换：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">circumference &#x3D; pi * diameter;</span><br></pre></td></tr></table></figure><p>为什么使用符号常量更好？首先，常量名比数字表达的信息更多。请比较以下两条语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">owed &#x3D; 0.015 * housevalue;</span><br><span class=\"line\">owed &#x3D; taxrate * housevalue;</span><br></pre></td></tr></table></figure><p>如果阅读一个很长的程序，第2条语句所表达的含义更清楚。</p>\n<p>另外，假设程序中的多处使用一个常量，有时需要改变它的值。毕竟，税率通常是浮动的。如果程序使用符号常量，则只需更改符号常量的定义，不用在程序中查找使用常量的地方，然后逐一修改。</p>\n<p>那么，如何创建符号常量？方法之一是声明一个变量，然后将该变量设置为所需的常量。可以这样写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float taxrate;</span><br><span class=\"line\"></span><br><span class=\"line\">taxrate &#x3D; 0.015;</span><br></pre></td></tr></table></figure><p>这样做提供了一个符号名，但是<code>taxrate</code>是一个变量，程序可能会无意间改变它的值。C语言还提供了一个更好的方案——C预处理器。第2 章中介绍了预处理器如何使用<code>#include</code>包含其他文件的信息。预处理器也可用来定义常量。只需在程序顶部添加下面一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define TAXRATE 0.015</span><br></pre></td></tr></table></figure><p>编译程序时，程序中所有的<code>TAXRATE</code>都会被替换成<code>0.015</code>。这一过程被称为编译时替换（compile-time substitution）。在运行程序时，程序中所有的替换均已完成（见图 4.5）。通常，这样定义的常量也称为<strong>明示常量</strong>（manifest constant）[1]。<br><img src=\"https://i.loli.net/2020/05/06/on9h8VUkmRLq2v1.jpg\" style=\"zoom: 67%;\" /></p>\n<p>请注意格式，首先是<code>#define</code>，接着是符号常量名（TAXRATE），然后是符号常量的值（0.015）（注意，其中并没有=符号）。所以，其通用格式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NAME value</span></span><br></pre></td></tr></table></figure><p>实际应用时，用选定的符号常量名和合适的值来替换<code>NAME</code>和<code>value</code>。注意，末尾不用加分号，因为这是一种由预处理器处理的替换机制。为什么 TAXRATE 要用大写？<strong>用大写表示符号常量是 C 语言一贯的传统</strong>。这样，在程序中看到全大写的名称就立刻明白这是一个符号常量，而非变量。大写常量只是为了提高程序的可读性，即使全用小写来表示符号常量，程序也能照常运行。尽管如此，初学者还是应该养成大写常量的好习惯。</p>\n<p>另外，<strong>还有一个不常用的命名约定，即在名称前带c_或k_前缀来表示常量（如，c_level或k_line）</strong>。</p>\n<p>符号常量的命名规则与变量相同。可以使用大小写字母、数字和下划线字符，<strong>首字符不能为数字</strong>。程序清单4.4演示了一个简单的示例。</p>\n<p>程序清单4.4 pizza.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* pizza.c -- 在比萨饼程序中使用已定义的常量 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI 3.14159</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> area, circum, radius;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"What is the radius of your pizza?\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>, &amp;radius);</span><br><span class=\"line\">    area = PI * radius * radius;</span><br><span class=\"line\">    circum = <span class=\"number\">2.0</span> * PI *radius;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Your basic pizza parameters are as follows:\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"circumference = %1.2f, area = %1.2f\\n\"</span>, circum,area);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><code>printf()</code>语句中的<code>%1.2f</code>表明，结果被四舍五入为两位小数输出。下面是一个输出示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">What is the radius of your pizza?</span><br><span class=\"line\"><span class=\"number\">6.0</span></span><br><span class=\"line\">Your basic pizza parameters are as follows:</span><br><span class=\"line\">circumference = <span class=\"number\">37.70</span>, area = <span class=\"number\">113.10</span></span><br></pre></td></tr></table></figure><p><code>#define</code>指令还可定义字符和字符串常量。前者使用单引号，后者使用双引号。如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BEEP <span class=\"meta-string\">'\\a'</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TEE <span class=\"meta-string\">'T'</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ESC <span class=\"meta-string\">'\\033'</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OOPS <span class=\"meta-string\">\"Now you have done it!\"</span></span></span><br></pre></td></tr></table></figure><p>记住，符号常量名后面的内容被用来替换符号常量。不要犯这样的常见错误：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 错误的格式 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TOES = 20</span></span><br></pre></td></tr></table></figure><p>如果这样做，替换TOES的是= 20，而不是20。这种情况下，下面的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">digits = fingers + TOES;</span><br></pre></td></tr></table></figure><p>将被转换成错误的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">digits = fingers + = <span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure><h3 id=\"const限定符\">const限定符<a href=\"#const限定符\" title=\"const限定符\"></a></h3><p>C90标准新增了<code>const</code>关键字，用于限定一个变量为只读（<strong><mark>注意，在C语言中，用<code>const</code>类型限定符声明的是变量，不是常量。</mark></strong>）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MONTHS = <span class=\"number\">12</span>; <span class=\"comment\">// MONTHS在程序中不可更改，值为12</span></span><br></pre></td></tr></table></figure><p>这使得<code>MONTHS</code>成为一个只读值。也就是说，可以在计算中使用<code>MONTHS</code>，可以打印<code>MONTHS</code>，但是不能更改<code>MONTHS</code>的值。<code>const</code>用起来比<code>#define</code>更灵活，第12章将讨论与<code>const</code>相关的内容。</p>\n<h3 id=\"明示常量\">明示常量<a href=\"#明示常量\" title=\"明示常量\"></a></h3><p>C头文件<code>limits.h</code>和<code>float.h</code>分别提供了与<strong>整数类型</strong>和<strong>浮点类型</strong>大小限制相关的详细信息。每个头文件都定义了一系列供实现使用的明示常量 [<strong>再次提醒读者注意，本书作者认为“明示常量”相当于“符号常量”，经常在书中混用这两个术语。</strong>]。例如，<code>limits.h</code>头文件包含以下类似的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INT_MAX +32767</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INT_MIN -32768</span></span><br></pre></td></tr></table></figure><p>这些明示常量代表<code>int</code>类型可表示的<strong>最大值和最小值</strong>。如果系统使用32 位的<code>int</code>，该头文件会为这些明示常量提供不同的值。如果在程序中包含<code>limits.h</code>头文件，就可编写下面的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Maximum int value on this system = %d\\n\"</span>, INT_MAX);</span><br></pre></td></tr></table></figure><p>如果系统使用4字节的<code>int</code>，<code>limits.h</code>头文件会提供符合4字节<code>int</code>的<code>INT_MAX</code>和<code>INT_MIN</code>。表4.1列出了<code>limits.h</code>中能找到的一些明示常量。</p>\n<img src=\"https://i.loli.net/2020/05/09/w8uMoTWLbCBIUzZ.jpg\" style=\"zoom:80%;\" /><p>类似地，<code>float.h</code>头文件中也定义一些明示常量，如<code>FLT_DIG</code>和<code>DBL_DIG</code>，分别表示<code>float</code>类型和<code>double</code>类型的有效数字位数。表4.2列出了<code>float.h</code>中的一些明示常量（可以使用文本编辑器打开并查看系统使用的<code>float.h</code>头文件）。表中所列都与<code>float</code>类型相关。把明示常量名中的<code>FLT</code>分别替换成<code>DBL</code>和<code>LDBL</code>，即可分别表示<code>double</code>和<code>long double</code>类型对应的明示常量（表中假设系统使用2的幂来表示浮点数）。</p>\n<img src=\"https://i.loli.net/2020/05/09/VxOjSk12LhGBdZu.jpg\" style=\"zoom:80%;\" /><p>程序清单4.5演示了如何使用<code>float.h</code>和<code>limits.h</code>中的数据（注意，编译器要完全支持C99标准才能识别<code>LLONG_MIN</code>标识符）。</p>\n<p>程序清单4.5 defines.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// defines.c -- 使用limit.h和float头文件中定义的明示常量</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;limits.h&gt;　 // 整型限制</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;float.h&gt;　　// 浮点型限制</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Some number limits for this system:\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Biggest int: %d\\n\"</span>, INT_MAX);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Smallest long long: %lld\\n\"</span>, LLONG_MIN);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"One byte = %d bits on this system.\\n\"</span>, CHAR_BIT);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Largest double: %e\\n\"</span>, DBL_MAX);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Smallest normal float: %e\\n\"</span>, FLT_MIN);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"float precision = %d digits\\n\"</span>, FLT_DIG);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"float epsilon = %e\\n\"</span>, FLT_EPSILON);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出示例如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Some number limits <span class=\"keyword\">for</span> <span class=\"keyword\">this</span> system:</span><br><span class=\"line\">Biggest <span class=\"keyword\">int</span>: <span class=\"number\">2147483647</span></span><br><span class=\"line\">Smallest <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>: <span class=\"number\">-9223372036854775808</span></span><br><span class=\"line\">One <span class=\"keyword\">byte</span> = <span class=\"number\">8</span> bits on <span class=\"keyword\">this</span> system.</span><br><span class=\"line\">Largest <span class=\"keyword\">double</span>: <span class=\"number\">1.797693e+308</span></span><br><span class=\"line\">Smallest normal <span class=\"keyword\">float</span>: <span class=\"number\">1.175494e-38</span></span><br><span class=\"line\"><span class=\"keyword\">float</span> precision = <span class=\"number\">6</span> digits</span><br><span class=\"line\"><span class=\"keyword\">float</span> epsilon = <span class=\"number\">1.192093e-07</span></span><br></pre></td></tr></table></figure><p>C预处理器是非常有用的工具，要好好利用它。本书的后面章节中会介绍更多相关应用。</p>\n<h2 id=\"printf和scanf\">printf()和scanf()<a href=\"#printf和scanf\" title=\"printf()和scanf()\"></a></h2><p><code>printf()</code>函数和<code>scanf()</code>函数能让用户可以与程序交流，它们是<strong>输入/输出函数</strong>，或简称为<strong>I/O函数</strong>。它们不仅是C语言中的I/O函数，而且是最多才多艺的函数。过去，这些函数和C库的一些其他函数一样，并不是C语言定义的一部分。最初，C把输入/输出的实现留给了编译器的作者，这样可以针对特殊的机器更好地匹配输入/输出。后来，考虑到兼容性的问题，各编译器都提供不同版本的<code>printf()</code>和<code>scanf()</code>。尽管如此，各版本之间偶尔有一些差异。C90 和C99 标准规定了这些函数的标准版本，本书亦遵循这一标准。</p>\n<p>虽然<code>printf()</code>是输出函数，<code>scanf()</code>是输入函数，但是它们的工作原理几乎相同。两个函数都使用格式字符串和参数列表。我们先介绍<code>printf()</code>，再介绍<code>scanf()</code>。</p>\n<h3 id=\"printf函数\">printf()函数<a href=\"#printf函数\" title=\"printf()函数\"></a></h3><p>请求<code>printf()</code>函数打印数据的指令要与待打印数据的类型相匹配。例如，打印整数时使用<code>%d</code>，打印字符时使用<code>%c</code>。这些符号被称为<strong>转换说明</strong>（conversion specification），它们指定了如何把数据转换成可显示的形式。我们先列出<code>ANSI C</code>标准为<code>printf()</code>提供的转换说明，然后再示范如何使用一些较常见的转换说明。表4.3列出了一些转换说明和各自对应的输出类型。</p>\n<p><img src=\"https://i.loli.net/2020/05/09/EUbTfNxDqXnWJSZ.jpg\" class=\"φcy\"></p>\n<h3 id=\"使用printf\">使用printf()<a href=\"#使用printf\" title=\"使用printf()\"></a></h3><p>程序清单4.6的程序中使用了一些转换说明。</p>\n<p>程序清单4.6 printout.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* printout.c -- 使用转换说明 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI 3.141593</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> number = <span class=\"number\">7</span>;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> pies = <span class=\"number\">12.75</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cost = <span class=\"number\">7800</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"The %d contestants ate %f berry pies.\\n\"</span>, number,pies);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"The value of pi is %f.\\n\"</span>, PI);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Farewell! thou art too dear for my possessing,\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%c%d\\n\"</span>, <span class=\"string\">'$'</span>, <span class=\"number\">2</span> * cost);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The <span class=\"number\">7</span> contestants ate <span class=\"number\">12.750000</span> berry pies.</span><br><span class=\"line\">The value of pi is <span class=\"number\">3.141593</span>.</span><br><span class=\"line\">Farewell! thou art too dear <span class=\"keyword\">for</span> my possessing,</span><br><span class=\"line\">$<span class=\"number\">15600</span></span><br></pre></td></tr></table></figure><p>这是printf()函数的格式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>( 格式字符串, 待打印项<span class=\"number\">1</span>, 待打印项<span class=\"number\">2</span>,...);</span><br></pre></td></tr></table></figure><p>待打印项1、待打印项2等都是要打印的项。它们可以是<strong>变量、常量，甚至是在打印之前先要计算的表达式</strong>。第3章提到过，格式字符串应包含每个待打印项对应的转换说明。例如，考虑下面的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"The %d contestants ate %f berry pies.\\n\"</span>, number,pies);</span><br></pre></td></tr></table></figure><p><strong>格式字符串</strong>是双引号括起来的内容。上面语句的格式字符串包含了两个待打印项<code>number</code>和<code>poes</code>对应的两个转换说明。图4.6演示了<code>printf()</code>语句的另一个例子。</p>\n<p>下面是程序清单4.6中的另一行：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"The value of pi is %f.\\n\"</span>, PI);</span><br></pre></td></tr></table></figure><p>该语句中，待打印项列表只有一个项——符号常量<code>PI</code>。</p>\n<p>如图4.7所示，格式字符串包含两种形式不同的信息：<br>实际要打印的字符；<br>转换说明。<br><img src=\"https://i.loli.net/2020/05/09/xW5SVOn7yrCkTbj.jpg\" style=\"zoom:80%;\" /><br><img src=\"https://i.loli.net/2020/05/09/UOaFVrXHgildE5h.jpg\" class=\"φcy\"></p>\n<p><strong>警告</strong></p>\n<p>格式字符串中的转换说明一定要与后面的每个项相匹配，若忘记这个基本要求会导致严重的后果。千万别写成下面这样：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"The score was Squids %d, Slugs %d.\\n\"</span>, score1);</span><br></pre></td></tr></table></figure><p>这里，第2个<code>%d</code>没有对应任何项。系统不同，导致的结果也不同。不过，出现这种问题最好的状况是得到无意义的值。</p>\n<p>如果只打印短语或句子，就不需要使用任何转换说明。如果只打印数据，也不用加入说明文字。程序清单4.6中的最后两个<code>printf()</code>语句都没问题：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Farewell! thou art too dear for my possessing,\\n\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%c%d\\n\"</span>, <span class=\"string\">'$'</span>, <span class=\"number\">2</span> * cost);</span><br></pre></td></tr></table></figure><p>注意第2条语句，待打印列表的第1个项是一个<strong>字符常量</strong>，不是变量；第2个项是一个乘法表达式。这说明<code>printf()</code>使用的是值，无论是变量、常量还是表达式的值。</p>\n<p>由于 <code>printf()</code>函数使用<code>%</code>符号来标识转换说明，因此打印%符号就成了个问题。如果单独使用一个<code>%</code>符号，编译器会认为漏掉了一个转换字符。解决方法很简单，使用两个<code>%</code>符号就行了：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pc = <span class=\"number\">2</span>*<span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Only %d%% of Sally's gribbles were edible.\\n\"</span>, pc);</span><br></pre></td></tr></table></figure><p>下面是输出结果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Only <span class=\"number\">12</span>% of Sally<span class=\"number\">'</span>s gribbles were edible.</span><br></pre></td></tr></table></figure><h3 id=\"printf的转换说明修饰符\">printf()的转换说明修饰符<a href=\"#printf的转换说明修饰符\" title=\"printf()的转换说明修饰符\"></a></h3><p>在<code>%</code>和<code>转换字符</code>之间插入修饰符可修饰基本的转换说明。表4.4和表4.5列出可作为修饰符的合法字符。如果要插入多个字符，其书写顺序应该与表4.4中列出的顺序相同。不是所有的组合都可行。表中有些字符是C99新增的，如果编译器不支持C99，则可能不支持表中的所有项。</p>\n<p><img src=\"https://i.loli.net/2020/05/09/gWT5JxkcRLXmNlG.jpg\" class=\"φcy\" alt=\"表4.4\"></p>\n<p>注意 类型可移植性</p>\n<p><code>sizeof</code> 运算符以字节为单位返回类型或值的大小。这应该是某种形式的整数，但是标准只规定了该值是无符号整数。在不同的实现中，它可以是<code>unsigned int</code>、<code>unsigned long</code>甚至是<code>unsigned long long</code>。因此，如果要用<code>printf()</code>函数显示<code>sizeof</code>表达式，根据不同系统，可能使用<code>%u</code>、<code>%lu</code>或<code>%llu</code>。这意味着要查找你当前系统的用法，如果把程序移植到不同的系统还要进行修改。鉴于此， C提供了可移植性更好的类型。首先，<code>stddef.h</code>头文件（在包含<code>stdio.h</code>头文件时已包含其中）把<code>size_t</code>定义成系统使用<code>sizeof</code>返回的类型，这被称为<strong>底层类型</strong>（underlying type）。其次，<code>printf()</code>使用<code>z</code>修饰符表示打印相应的类型。同样，C还定义了<code>ptrdiff_t</code>类型和<code>t</code>修饰符来表示系统使用的两个地址差值的底层有符号整数类型。</p>\n<p><strong>注意 float参数的转换</strong><br>对于浮点类型，有用于<code>double</code>和<code>long double</code>类型的转换说明，却没有<code>float</code>类型的。这是因为在K&amp;R C中，表达式或参数中的<code>float</code>类型值会被自动转换成<code>double</code>类型。一般而言，ANSI C不会把<code>float</code>自动转换成<code>double</code>。然而，为保护大量假设<code>float</code>类型的参数被自动转换成<code>double</code>的现有程序，<code>printf()</code>函数中所有<code>float</code>类型的参数（对未使用显式原型的所有C函数都有效）仍自动转换成<code>double</code>类型。因此，无论是K&amp;R C还是ANSI C，都没有显示<code>float</code>类型值专用的转换说明。</p>\n<p><img src=\"https://i.loli.net/2020/05/09/AXkUsVat2BYy7rJ.jpg\" class=\"φcy\" alt=\"表4.5\"></p>\n<h4 id=\"使用修饰符和标记的示例\">使用修饰符和标记的示例<a href=\"#使用修饰符和标记的示例\" title=\"使用修饰符和标记的示例\"></a></h4><p>接下来，用程序示例演示如何使用这些修饰符和标记。先来看看字段宽度在打印整数时的效果。考虑程序清单4.7中的程序。</p>\n<p>程序清单4.7 width.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* width.c -- 字段宽度 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PAGES 959</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"*%d*\\n\"</span>, PAGES);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"*%2d*\\n\"</span>, PAGES);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"*%10d*\\n\"</span>, PAGES);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"*%-10d*\\n\"</span>, PAGES);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>程序清单4.7通过4种不同的转换说明把相同的值打印了4次。程序中使用星号（*）标出每个字段的开始和结束。其输出结果如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"number\">959</span>*</span><br><span class=\"line\">*<span class=\"number\">959</span>*</span><br><span class=\"line\">*　　 <span class=\"number\">959</span>*</span><br><span class=\"line\">*<span class=\"number\">959</span>　　 *</span><br></pre></td></tr></table></figure><p>第1个转换说明<code>%d</code>不带任何修饰符，其对应的输出结果与带整数字段宽度的转换说明的输出结果相同。在默认情况下，没有任何修饰符的转换说明，就是这样的打印结果。</p>\n<p>第2个转换说明是<code>%2d</code>，其对应的输出结果应该是 2 字段宽度。因为待打印的整数有 3 位数字，所以字段宽度自动扩大以符合整数的长度。</p>\n<p>第 3个转换说明是<code>%10d</code>，其对应的输出结果有10个空格宽度，实际上在两个星号之间有7个空格和3位数字，并且数字位于字段的右侧。</p>\n<p>最后一个转换说明是<code>%-10d</code>，其对应的输出结果同样是 10 个空格宽度，<code>-</code>标记说明打印的数字位于字段的左侧。熟悉它们的用法后，能很好地控制输出格式。试着改变<code>PAGES</code>的值，看看编译器如何打印不同位数的数字。</p>\n<blockquote>\n<p>接下来看看浮点型格式。请输入、编译并运行程序清单4.8中的程序。</p>\n</blockquote>\n<p>程序清单4.8 floats.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// floats.c -- 一些浮点型修饰符的组合</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">double</span> RENT = <span class=\"number\">3852.99</span>;　<span class=\"comment\">// const变量</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"*%f*\\n\"</span>, RENT);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"*%e*\\n\"</span>, RENT);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"*%4.2f*\\n\"</span>, RENT);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"*%3.1f*\\n\"</span>, RENT);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"*%10.3f*\\n\"</span>, RENT);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"*%10.3E*\\n\"</span>, RENT);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"*%+4.2f*\\n\"</span>, RENT);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"*%010.2f*\\n\"</span>, RENT);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序中使用了const关键字，限定变量为只读。该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"number\">3852.990000</span>*</span><br><span class=\"line\">*<span class=\"number\">3.852990e+03</span>*</span><br><span class=\"line\">*<span class=\"number\">3852.99</span>*</span><br><span class=\"line\">*<span class=\"number\">3853.0</span>*</span><br><span class=\"line\">*　<span class=\"number\">3852.990</span>*</span><br><span class=\"line\">* <span class=\"number\">3.853E+03</span>*</span><br><span class=\"line\">*+<span class=\"number\">3852.99</span>*</span><br><span class=\"line\">*<span class=\"number\">0003852.99</span>*</span><br></pre></td></tr></table></figure><p>本例的第1个转换说明是<code>%f</code>。在这种情况下，字段宽度和小数点后面的位数均为系统默认设置，即字段宽度是容纳带打印数字所需的位数和<strong>小数点后打印6位数字</strong>。</p>\n<p>第2个转换说明是<code>%e</code>。默认情况下，编译器在小数点的左侧打印1个数字，在小数点的右侧打印6个数字。这样打印的数字太多！解决方案是指定小数点右侧显示的位数，程序中接下来的 4 个例子就是这样做的。请注意，第4个和第6个例子对输出结果进行了四舍五入。另外，第6个例子用<code>E</code>代替了<code>e</code>。</p>\n<p>第7个转换说明中包含了<code>+</code>标记，这使得打印的值前面多了一个代数符号（<code>+</code>）。<mark>0标记使得打印的值前面以0填充以满足字段要求</mark>。注意，转换说明<code>%010.2f</code>的第1个<code>0</code>是标记，句点（.）之前、标记之后的数字（本例为10）是指定的字段宽度。尝试修改<code>RENT</code>的值，看看编译器如何打印不同大小的值。程序清单4.9演示了其他组合。</p>\n<p>程序清单4.9 flags.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* flags.c -- 演示一些格式标记 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%x %X %#x\\n\"</span>, <span class=\"number\">31</span>, <span class=\"number\">31</span>, <span class=\"number\">31</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"**%d**% d**% d**\\n\"</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">-42</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"**%5d**%5.3d**%05d**%05.3d**\\n\"</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1f</span> <span class=\"number\">1F</span> <span class=\"number\">0x1f</span></span><br><span class=\"line\">**<span class=\"number\">42</span>** <span class=\"number\">42</span>**<span class=\"number\">-42</span>**</span><br><span class=\"line\">**　 <span class=\"number\">6</span>** <span class=\"number\">006</span>**<span class=\"number\">00006</span>** <span class=\"number\">006</span>**</span><br></pre></td></tr></table></figure><p>第1行输出中，<code>1f</code>是十六进制数，等于十进制数<code>31</code>。第1行<code>printf()</code>语句中，根据<code>%x</code>打印出1f，<code>%F</code>打印出1F，<code>%#x</code>打印出0x1f。</p>\n<p>第 2 行输出演示了如何<strong>在转换说明中用空格在输出的正值前面生成前导空格，负值前面不产生前导空格</strong>。这样的输出结果比较美观，因为打印出来的正值和负值在相同字段宽度下的有效数字位数相同。</p>\n<p>第3行输出演示了如何在整型格式中使用精度（<code>%5.3d</code>）生成足够的前导<code>0</code>以满足最小位数的要求（本例是3）。然而，使用0标记会使得编译器用前导0填充满整个字段宽度。最后，如果0标记和精度一起出现，0标记会被忽略。</p>\n<blockquote>\n<p>下面来看看<strong>字符串格式</strong>的示例。考虑程序清单4.10中的程序。</p>\n</blockquote>\n<p>程序清单4.10 stringf.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* stringf.c -- 字符串格式 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BLURB <span class=\"meta-string\">\"Authentic imitation!\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"[%2s]\\n\"</span>, BLURB);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"[%24s]\\n\"</span>, BLURB);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"[%24.5s]\\n\"</span>, BLURB);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"[%-24.5s]\\n\"</span>, BLURB);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Authentic imitation!]</span><br><span class=\"line\">[　　Authentic imitation!]</span><br><span class=\"line\">[　　　　　　　　　　Authe]</span><br><span class=\"line\">[Authe　　　　　　　　　　]</span><br></pre></td></tr></table></figure><p>注意，虽然第1个转换说明是%2s，但是字段被扩大为可容纳字符串中的所有字符。还需注意，精度限制了待打印字符的个数。.5告诉printf()只打印5个字符。另外，-标记使得文本左对齐输出。</p>\n<h4 id=\"学以致用\">学以致用<a href=\"#学以致用\" title=\"学以致用\"></a></h4><p>学习完以上几个示例，试试如何用一个语句打印以下格式的内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The NAME family just may be $XXX.XX dollars richer!</span><br></pre></td></tr></table></figure><p>这里，<code>NAME</code>和<code>XXX.XX</code>代表程序中变量（如<code>name[40]</code>和<code>cash</code>）的值。可参考以下代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"The %s family just may be $%.2f richer!\\n\"</span>,name,cash);</span><br></pre></td></tr></table></figure><h3 id=\"转换说明的意义\">转换说明的意义<a href=\"#转换说明的意义\" title=\"转换说明的意义\"></a></h3><p>下面深入探讨一下转换说明的意义。转换说明把以二进制格式储存在计算机中的值转换成一系列字符（字符串）以便于显示。例如，数字<code>76</code>在计算机内部的存储格式是二进制数<code>01001100</code>。<code>%d</code>转换说明将其转换成字符<code>7</code>和<code>6</code>，并显示为<code>76</code>；<code>%x</code>转换说明把相同的值（01001100）转换成十六进制记数法<code>4c</code>；<code>%c</code>转换说明把01001100转换成字符L。</p>\n<p>转换（conversion）可能会误导读者认为原始值被转替换成转换后的值。实际上，转换说明是翻译说明，<code>%d</code>的意思是“把给定的值翻译成十进制整数文本并打印出来”。</p>\n<ol><li>转换不匹配</li>\n</ol><p>前面强调过，转换说明应该与待打印值的类型相匹配。通常都有多种选择。例如，如果要打印一个<code>int</code>类型的值，可以使用<code>%d</code>、<code>%x</code>或<code>%o</code>。这些转换说明都可用于打印<code>int</code>类型的值，其区别在于它们分别表示一个值的形式不同。类似地，打印<code>double</code>类型的值时，可使用<code>%f</code>、<code>%e</code>或<code>%g</code>。</p>\n<p>转换说明与待打印值的类型不匹配会怎样？上一章中介绍过不匹配导致的一些问题。匹配非常重要，一定要牢记于心。程序清单4.11演示了一些不匹配的整型转换示例。</p>\n<p>程序清单4.11 intconv.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* intconv.c -- 一些不匹配的整型转换 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PAGES 336</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> WORDS 65618</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    short num = PAGES;</span><br><span class=\"line\">    short mnum = -PAGES;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"num as short and unsigned short:　%hd %hu\\n\"</span>, num,num);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"-num as short and unsigned short: %hd %hu\\n\"</span>, mnum,mnum);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"num as int and char: %d %c\\n\"</span>, num, num);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"WORDS as int, short, and char: %d %hd %c\\n\"</span>,WORDS,WORDS, WORDS);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>在我们的系统中，该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num as short <span class=\"keyword\">and</span> <span class=\"keyword\">unsigned</span> short: <span class=\"number\">336</span> <span class=\"number\">336</span></span><br><span class=\"line\">-num as short <span class=\"keyword\">and</span> <span class=\"keyword\">unsigned</span> short: <span class=\"number\">-336</span> <span class=\"number\">65200</span></span><br><span class=\"line\">num as <span class=\"keyword\">int</span> <span class=\"keyword\">and</span> <span class=\"keyword\">char</span>: <span class=\"number\">336</span> P</span><br><span class=\"line\">WORDS as <span class=\"keyword\">int</span>, short, <span class=\"keyword\">and</span> <span class=\"keyword\">char</span>: <span class=\"number\">65618</span> <span class=\"number\">82</span> R</span><br></pre></td></tr></table></figure><p>请看输出的第1行，<code>num</code>变量对应的转换说明<code>%hd</code>和<code>%hu</code>输出的结果都是<code>336</code>。这没有任何问题。</p>\n<p>然而，第2行<code>mnum</code>变量对应的转换说明<code>%u</code>（无符号）输出的结果却为65200，并非期望的336。这是由于有符号<code>short int</code>类型的值在我们的参考系统中的表示方式所致。首先，<code>short int</code>的大小是<strong>2字节</strong>；其次，系统使用二进制补码来表示有符号整数。这种方法，数字0～32767代表它们本身，而数字32768～65535则表示负数。其中，65535表示-1，65534表示-2，以此类推。因此，-336表示为65200（即， 65536-336）。所以被解释成有符号<code>int</code>时，65200代表-336；而被解释成无符号<code>int</code>时，65200则代表65200。一定要谨慎！一个数字可以被解释成两个不同的值。尽管并非所有的系统都使用这种方法来表示负整数，但要注意一点：<strong>别期望用<code>%u</code>转换说明能把数字和符号分开。</strong></p>\n<p>第3行演示了<strong>如果把一个大于255的值转换成字符会发生什么情况</strong>。在我们的系统中，<code>short int</code>是2字节，<code>char</code>是1字节。当<code>printf()</code>使用<code>%c</code>打印336时，它只会查看储存336的2字节中的后1字节。这种截断（见图4.8）相当于用一个整数除以256，只保留其余数。在这种情况下，余数是80，对应的ASCII值是字符P。<strong>用专业术语来说，该数字被解释成“以256为模”（modulo 256），即该数字除以256后取其余数。</strong></p>\n<img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/把336转换成字符.jpg\" alt=\"图4.8 把336转换成字符\" style=\"zoom:67%;\" /><p>最后，我们在该系统中打印比<code>short int</code>类型最大整数（32767）更大的整数（65618）。这次，计算机也进行了求模运算。在本系统中，应把数字65618储存为4字节的<code>int</code>类型值。用<code>%hd</code>转换说明打印时， <code>printf()</code>只使用最后2个字节。这相当于65618除以65536的余数。这里，余数是82。鉴于负数的储存方法，如果余数在32767～65536范围内会被打印成负数。对于整数大小不同的系统，相应的处理行为类似，但是产生的值可能不同。</p>\n<p class='div-border yellow'>总结<br>\n当遇到溢出问题，为：**该数字模除256后取其余数**</p><p>混淆整型和浮点型，结果更奇怪。考虑程序清单4.12。</p>\n<p>程序清单4.12 floatcnv.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* floatcnv.c -- 不匹配的浮点型转换 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> n1 = <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> n2 = <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> n3 = <span class=\"number\">2000000000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> n4 = <span class=\"number\">1234567890</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.1e %.1e %.1e %.1e\\n\"</span>, n1, n2, n3, n4);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%ld %ld\\n\"</span>, n3, n4);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%ld %ld %ld %ld\\n\"</span>, n1, n2, n3, n4);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>在我们的系统中，该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3.0e+00</span> <span class=\"number\">3.0e+00</span> <span class=\"number\">3.1e+46</span> <span class=\"number\">1.7e+266</span></span><br><span class=\"line\"><span class=\"number\">2000000000</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1074266112</span> <span class=\"number\">0</span> <span class=\"number\">1074266112</span></span><br></pre></td></tr></table></figure><p>第1行输出显示，<code>%e</code>转换说明没有把整数转换成浮点数。</p>\n<ul><li>考虑一下，如果使用<code>%e</code>转换说明打印n3（<code>long类型</code>）会发生什么情况。首先，<code>%e</code>转换说明让<code>printf()</code>函数认为待打印的值是<code>double</code>类型（本系统中<code>double</code>为<strong>8字节</strong>）。当<code>printf()</code>查看n3（本系统中是<strong>4字节</strong>的值）时，除了查看n3的<strong>4字节</strong>外，还会查看查看n3相邻的<strong>4字节</strong>，共<strong>8字节</strong>单元。接着，它将<strong>8字节</strong>单元中的位组合解释成浮点数（如，把一部分位组合解释成指数）。因此，即使n3的位数正确，根据<code>%e</code>转换说明和<code>%ld</code>转换说明解释出来的值也不同。最终得到的结果是无意义的值。</li>\n</ul><p><strong>第1行也说明了前面提到的内容</strong>：<code>float</code>类型的值作为<code>printf()</code>参数时会被转换成<code>double</code>类型。在本系统中，<code>float</code>是4字节，但是为了<code>printf()</code>能正确地显示该值，n1被扩成<strong>8字节</strong>。</p>\n<p>第2行输出显示，只要使用正确的转换说明，<code>printf()</code>就可以打印n3和n4。</p>\n<p>第3行输出显示，如果<code>printf()</code>语句有其他不匹配的地方，即使用对了转换说明也会生成虚假的结果。<strong>用<code>%ld</code>转换说明打印浮点数会失败</strong>，但是在这里，用<code>%ld</code>打印<code>long</code>类型的数竟然也失败了！问题出在C如何把信息传递给函数。具体情况因编译器实现而异。“<mark><strong>参数传递</strong></mark>”框中针对一个有代表性的系统进行了讨论。</p>\n<blockquote>\n<p>参数传递</p>\n</blockquote>\n<p>参数传递机制因实现而异。下面以我们的系统为例，分析参数传递的原理。函数调用如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%ld %ld %ld %ld\\n\"</span>, n1, n2, n3, n4);</span><br></pre></td></tr></table></figure><p>该调用告诉计算机把变量<code>n1</code>、<code>n2</code>、<code>n3</code>和<code>n4</code>的值传递给程序。这是一种常见的参数传递方式。程序把传入的值放入被称为<strong>栈（stack）</strong>的内存区域。计算机根据变量类型（不是根据转换说明）把这些值放入栈中。因此，<code>n1</code>被储存在栈中，占<strong>8字节</strong>（float类型被转换成double类型）。同样，<code>n2</code>也在栈中占<strong>8字节</strong>，而<code>n3</code>和<code>n4</code>在栈中分别占<strong>4字节</strong>。然后，控制转到<code>printf()</code>函数。该函数根据转换说明（不是根据变量类型）从栈中读取值。<code>%ld</code>转换说明表明<code>printf()</code>应该读取<strong>4字节</strong>，所以<code>printf()</code>读取栈中的<mark>前4字节作为第1个值</mark>。这是<code>n1</code>的前半部分，将被解释成一个<code>long</code>类型的整数。根据下一个<code>%ld</code>转换说明，<code>printf()</code>再读取<strong>4字节</strong>，这是n1的后半部分，将被解释成第2个<code>long</code>类型的整数（见图4.9）。类似地，根据第3个和第4个<code>%ld</code>，<code>printf()</code>读取<code>n2</code>的前半部分和后半部分，并解释成两个<code>long</code>类型的整数。因此，对于<code>n3</code>和<code>n4</code>，虽然用对了转换说明，但<code>printf()</code>还是读错了字节。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> n1; <span class=\"comment\">/* 作为double类型传递 */</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> n2;</span><br><span class=\"line\"><span class=\"keyword\">long</span> n3, n4;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%ld %ld %ld %ld\\n\"</span>, n1, n2, n3, n4);</span><br></pre></td></tr></table></figure><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/图4.9传递参数.png\" alt=\"图4.9传递参数\" style=\"zoom: 67%;\" /><h4 id=\"printf的返回值\">printf()的返回值<a href=\"#printf的返回值\" title=\"printf()的返回值\"></a></h4><p>第2章提到过，大部分C函数都有一个返回值，这是函数计算并返回给主调程序（calling program）的值。例如，C库包含一个<code>sqrt()</code>函数，接受一个数作为参数，并返回该数的平方根。可以把返回值赋给变量，也可以用于计算，还可以作为参数传递。总之，可以把返回值像其他值一样使用。<code>printf()</code>函数也有一个返回值，它返回打印字符的个数。如果有输出错误，<code>printf()</code>则返回一个负值（<code>printf()</code>的旧版本会返回不同的值）。</p>\n<p><code>printf()</code>的返回值是其打印输出功能的附带用途，通常很少用到，但在检查输出错误时可能会用到（如，在写入文件时很常用）。如果一张已满的CD或DVD拒绝写入时，程序应该采取相应的行动，例如<strong>终端蜂鸣30秒</strong>。不过，要实现这种情况必须先了解<strong>if语句</strong>。程序清单4.13演示了如何确定函数的返回值。</p>\n<p>程序清单4.13 prntval.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* prntval.c -- printf()的返回值 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> bph2o = <span class=\"number\">212</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rv;</span><br><span class=\"line\">    rv = <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d F is water's boiling point.\\n\"</span>, bph2o);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"The printf() function printed %d characters.\\n\"</span>,rv);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">212</span> F is water<span class=\"number\">'</span>s boiling <span class=\"built_in\">point</span>.</span><br><span class=\"line\">The printf() function printed 32 characters.</span><br></pre></td></tr></table></figure><p>首先，程序用<code>rv = printf(...)</code>;的形式把<code>printf()</code>的返回值赋给rv。因此，该语句执行了两项任务：打印信息和给变量赋值。其次，注意计算针对所有字符数，包括空格和不可见的换行符（\\n）。</p>\n<h4 id=\"打印较长的字符串\">打印较长的字符串<a href=\"#打印较长的字符串\" title=\"打印较长的字符串\"></a></h4><p>有时，<code>printf()</code>语句太长，在屏幕上不方便阅读。如果空白（空格、制表符、换行符）仅用于分隔不同的部分，C 编译器会忽略它们。因此，一条语句可以写成多行，只需在不同部分之间输入空白即可。例如，程序清单4.13中的一条<code>printf()</code>语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"The printf() function printed %d characters.\\n\"</span>,</span><br><span class=\"line\">rv);</span><br></pre></td></tr></table></figure><p>该语句在<strong>逗号和 rv</strong>之间断行。为了让读者知道该行未完，示例缩进了 <strong>rv</strong>。C编译器会忽略多余的空白。</p>\n<p>但是，不能在双引号括起来的字符串中间断行。如果这样写：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"The printf() function printed %d</span></span><br><span class=\"line\"><span class=\"string\">characters.\\n\"</span>, rv);</span><br></pre></td></tr></table></figure><p>C编译器会报错：字符串常量中有非法字符。在字符串中，可以使用<code>\\n</code>来表示换行字符，但是不能通过按下<strong>Enter</strong>（或<strong>Return</strong>）键产生实际的换行符。</p>\n<p>给字符串断行有3种方法，如程序清单4.14所示。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">4.14</span> longstrg.c程序</span><br><span class=\"line\"><span class=\"comment\">/* longstrg.c ––打印较长的字符串 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Here's one way to print a \"</span>);\t<span class=\"comment\">//方法1</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"long string.\\n\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Here's another way to print a \\</span></span><br><span class=\"line\"><span class=\"string\">long string.\\n\"</span>);\t<span class=\"comment\">//方法2</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Here's the newest way to print a \"</span></span><br><span class=\"line\"><span class=\"string\">\"long string.\\n\"</span>);　　<span class=\"comment\">/* ANSI C */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Here<span class=\"number\">'</span>s one way to <span class=\"built_in\">print</span> a <span class=\"keyword\">long</span> <span class=\"built_in\">string</span>.</span><br><span class=\"line\">Here<span class=\"number\">'</span>s another way to <span class=\"built_in\">print</span> a <span class=\"keyword\">long</span> <span class=\"built_in\">string</span>.</span><br><span class=\"line\">Here<span class=\"number\">'</span>s the newest way to <span class=\"built_in\">print</span> a <span class=\"keyword\">long</span> <span class=\"built_in\">string</span>.</span><br></pre></td></tr></table></figure><p>方法1：使用多个<code>printf()</code>语句。因为第1个字符串没有以<code>\\n</code>字符结束，所以第2个字符串紧跟第1个字符串末尾输出。</p>\n<p>方法2：<MARK>用反斜杠（<code>\\</code>）和<code>Enter</code>（或<code>Return</code>）键组合来断行</mark>。这使得光标移至下一行，而且字符串中不会包含换行符。其效果是在下一行继续输出。但是，下一行代码必须和程序清单中的代码一样从最左边开始。如果缩进该行，比如缩进5个空格，那么这5个空格就会成为字符串的一部分。</p>\n<p>方法3：<code>ANSI C</code>引入的<strong>字符串</strong>连接。在两个用双引号括起来的字符串之间用空白隔开，C编译器会把多个字符串看作是一个字符串。因此，以下3种形式是等效的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, young lovers, wherever you are.\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, young \"</span>　　 <span class=\"string\">\"lovers\"</span> <span class=\"string\">\", wherever you are.\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, young lovers\"</span></span><br><span class=\"line\"><span class=\"string\">\", wherever you are.\"</span>);</span><br></pre></td></tr></table></figure><p>上述方法中，要记得在字符串中包含所需的空格。如，<code>&quot;young&quot;&quot;lovers&quot;</code>会成为<code>&quot;younglovers&quot;</code>，而<code>&quot;young &quot;</code> <code>&quot;lovers&quot;</code>才是<code>&quot;young lovers&quot;</code>。</p>\n<h3 id=\"使用scanf\">使用scanf()<a href=\"#使用scanf\" title=\"使用scanf()\"></a></h3><p>刚学完输出，接下来我们转至输入——学习<code>scanf()</code>函数。C库包含了多个输入函数，<code>scanf()</code>是最通用的一个，因为它可以读取不同格式的数据。当然，从<strong>键盘输入的都是文本</strong>，因为<strong>键盘只能生成文本字符</strong>：<strong>字母、数字和标点符号</strong>。如果要输入整数 <code>2014</code>，就要键入字符 <code>2</code>、<code>0</code>、<code>1</code>、<code>4</code>。如果要将其储存为数值而不是字符串，程序就必须把字符依次转换成数值，这就是<code>scanf()</code>要做的。<code>scanf()</code>把输入的字符串转换成<strong>整数</strong>、<strong>浮点数</strong>、<strong>字符</strong>或<strong>字符串</strong>，而 <code>printf()</code>正好与它相反，把<code>整数</code>、<code>浮点数</code>、<code>字符</code>和<code>字符串</code>转换成显示在屏幕上的文本。</p>\n<p><code>scanf()</code>和 <code>printf()</code>类似，也使用<strong>格式字符串</strong>和<strong>参数列表</strong>。<code>scanf()</code>中的<strong>格式字符串</strong>表明字符输入流的目标数据类型。两个函数主要的区别在参数列表中。<code>printf()</code>函数使用变量、常量和表达式，而<code>scanf()</code>函数使用指向变量的指针。</p>\n<p>这里，读者不必了解如何使用指针，只需记住以下两条简单的规则：</p>\n<p>如果用<code>scanf()</code>读取基本变量类型的值，在变量名前加上一个<code>&amp;</code>；</p>\n<p><mark>如果用<code>scanf()</code>把字符串读入字符数组中，不要使用<code>&amp;</code></mark>。</p>\n<p>程序清单4.15中的小程序演示了这两条规则。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">4.15</span> input.c程序</span><br><span class=\"line\"><span class=\"comment\">// input.c -- 何时使用&amp;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;　　　　　 <span class=\"comment\">// 变量</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> assets;　　　<span class=\"comment\">// 变量</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> pet[<span class=\"number\">30</span>];　　　<span class=\"comment\">// 字符数组，用于储存字符串</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter your age, assets, and favorite pet.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %f\"</span>, &amp;age, &amp;assets); <span class=\"comment\">// 这里要使用&amp;</span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, pet);　　　　　　　 <span class=\"comment\">// 字符数组不使用&amp;</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d $%.2f %s\\n\"</span>, age, assets, pet);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>下面是该程序与用户交互的示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your age, assets, <span class=\"keyword\">and</span> favorite pet.</span><br><span class=\"line\"><span class=\"number\">38</span></span><br><span class=\"line\"><span class=\"number\">92360.88</span> llama</span><br><span class=\"line\"><span class=\"number\">38</span> $<span class=\"number\">92360.88</span> llama</span><br></pre></td></tr></table></figure><p><mark><code>scanf()</code>函数使用<strong>空白</strong>（<strong>换行符</strong>、<strong>制表符</strong>和<strong>空格</strong>）把输入分成多个字段</mark>。在依次把转换说明和字段匹配时跳过空白。注意，上面示例的输入项（粗体部分是用户的输入）分成了两行。只要在每个输入项之间输入至少一个换行符、空格或制表符即可，可以在一行或多行输入：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter your age, assets, <span class=\"keyword\">and</span> favorite pet.</span><br><span class=\"line\"><span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"number\">2121.45</span></span><br><span class=\"line\">guppy</span><br><span class=\"line\"><span class=\"number\">42</span> $<span class=\"number\">2121.45</span> guppy</span><br></pre></td></tr></table></figure><p>唯一例外的是<code>%c</code>转换说明。根据<code>%c</code>，<code>scanf()</code>会读取每个字符，包括空白。我们稍后详述这部分。</p>\n<p><code>scanf()</code>函数所用的转换说明与<code>printf()</code>函数几乎相同。主要的区别是，对于<code>float</code>类型和<code>double</code>类型，<code>printf()</code>都使用<code>%f</code>、<code>%e</code>、<code>%E</code>、<code>%g</code>和<code>%G</code>转换说明。而<code>scanf()</code>只把它们用于<code>float</code>类型，对于<code>double</code>类型时要使用l修饰符。表4.6列出了C99标准中常用的转换说明。</p>\n<p>表4.6 ANSI C中scanf()的转换说明</p>\n<img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/表4.6 ANSI C中scanf()的转换说明.png\" alt=\"表4.6 ANSI C中scanf()的转换说明\" style=\"zoom:50%;\" /><p>可以在表4.6所列的转换说明中（百分号和转换字符之间）使用修饰符。如果要使用多个修饰符，必须按表4.7所列的顺序书写。</p>\n<p>表4.7 scanf()转换说明中的修饰符</p>\n<img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/表4.7 scanf()转换说明中的修饰符.png\" style=\"zoom: 67%;\" />\n<img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/表4.7 scanf()转换说明中的修饰符1.png\" style=\"zoom: 67%;\" /><p>如你所见，使用转换说明比较复杂，而且这些表中还省略了一些特性。省略的主要特性是，从高度格式化源中读取选定数据，如穿孔卡或其他数据记录。因为在本书中，<code>scanf()</code>主要作为与程序交互的便利工具，所以我们不在书中讨论更复杂的特性。</p>\n<p>1.从<code>scanf()</code>角度看输入</p>\n<p>接下来，我们更详细地研究<code>scanf()</code>怎样读取输入。假设<code>scanf()</code>根据一个<code>%d</code>转换说明读取一个整数。<code>scanf()</code>函数每次读取一个字符，跳过所有的空白字符，直至<strong>遇到第1个非空白字符才开始读取</strong>。因为要读取整数，所以 <code>scanf()</code>希望发现一个<strong>数字字符</strong>或者<strong>一个符号</strong>（<code>+</code>或<code>-</code>）。如果找到一个数字或符号，它便保存该<strong>字符</strong>，并读取下一个字符。如果下一个字符是<strong>数字</strong>，它便保存该数字并读取下一个字符。<code>scanf()</code>不断地读取和保存字符，<strong>直至遇到非数字字符</strong>。如果遇到一个非数字字符，它便认为读到了整数的末尾。然后，<code>scanf()</code>把非数字字符放回输入。这意味着程序在下一次读取输入时，首先读到的是上一次读取丢弃的非数字字符。最后，<code>scanf()</code>计算已读取数字（可能还有符号）相应的数值，并将计算后的值放入指定的变量中。</p>\n<p>如果使用字段宽度，<code>scanf()</code>会在<strong>字段结尾</strong>或<strong>第1个空白字符</strong>处停止读取（满足两个条件之一便停止）。</p>\n<p>如果第1个非空白字符是<code>A</code>而不是数字，会发生什么情况？<code>scanf()</code>将停在那里，并把<code>A</code>放回输入中，不会把值赋给指定变量。程序在下一次读取输入时，首先读到的字符是<code>A</code>。如果程序只使用<code>%d</code>转换说明， <code>scanf()</code>就一直无法越过<code>A</code>读下一个字符。另外，<mark>如果使用带多个转换说明的<code>scanf()</code>，C规定在第1个出错处停止读取输入</mark>。</p>\n<p>用其他数值匹配的转换说明读取输入和用<code>%d</code> 的情况相同。区别在于 <code>scanf()</code>会把更多字符识别成数字的一部分。例如，<code>%x</code>转换说明要求<code>scanf()</code>识别十六进制数<code>a～f</code>和<code>A～F</code>。浮点转换说明要求<code>scanf()</code>识别<strong>小数点</strong>、<strong>e记数法</strong>（指数记数法）和新增的<strong>p记数法</strong>（十六进制指数记数法）。</p>\n<p>如果使用<code>%s</code> 转换说明，<code>scanf()</code>会读取除空白以外的所有字符。<mark><code>scanf()</code><strong>跳过空白开始读取第 1 个非空白字符</strong></mark>，并保存非空白字符直到再次遇到空白。这意味着 <code>scanf()</code>根据<code>%s</code> 转换说明读取一个单词，即不包含空白字符的字符串。如果使用<strong>字段宽度</strong>，<code>scanf()</code>在字段末尾或第1个空白字符处停止读取。无法利用字段宽度让只有一个<code>%s</code>的<code>scanf()</code>读取多个单词。最后要注意一点：当<code>scanf()</code>把字符串放进指定数组中时，它会在字符序列的末尾加上<code>&#39;\\0&#39;</code>，让数组中的内容成为一个C字符串。</p>\n<p>实际上，在C语言中<code>scanf()</code>并不是最常用的输入函数。这里重点介绍它是因为它能读取不同类型的数据。C 语言还有其他的输入函数，如 <code>getchar()</code>和 <code>fgets()</code>。这两个函数更适合处理一些特殊情况，如读取<strong>单个字符</strong>或<strong>包含空格的字符串</strong>。我们将在第7章、第11章、第13章中讨论这些函数。目前，无论程序中需要读取<strong>整数</strong>、<strong>小数</strong>、<strong>字符</strong>还是<strong>字符串</strong>，都可以使用<code>scanf()</code>函数。</p>\n<h4 id=\"格式字符串中的普通字符\">格式字符串中的普通字符<a href=\"#格式字符串中的普通字符\" title=\"格式字符串中的普通字符\"></a></h4><p><code>scanf()</code>函数允许把普通字符放在格式字符串中。除空格字符外的普通字符必须与输入字符串严格匹配。例如，假设在两个转换说明中添加一个逗号：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d,%d\"</span>, &amp;n, &amp;m);</span><br></pre></td></tr></table></figure><p><code>scanf()</code>函数将其解释成：用户将输入<strong>一个数字</strong>、<strong>一个逗号</strong>，然后<strong>再输入一个数字</strong>。也就是说，用户必须像下面这样进行输入两个整数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">88</span>,<span class=\"number\">121</span></span><br></pre></td></tr></table></figure><p>由于格式字符串中，<code>%d</code>后面紧跟逗号，所以必须在输入<code>88</code>后再输入一个逗号。但是，由于<mark><code>scanf()</code>会跳过整数前面的空白</mark>，所以下面两种输入方式都可以：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">88</span>, <span class=\"number\">121</span></span><br></pre></td></tr></table></figure><p>和</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">88</span>,</span><br><span class=\"line\"><span class=\"number\">121</span></span><br></pre></td></tr></table></figure><p><mark><strong>格式字符串中的空白</strong>意味着<strong>跳过下一个输入项前面的所有空白</strong></mark>。例如，对于下面的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d ,%d\"</span>, &amp;n, &amp;m);</span><br></pre></td></tr></table></figure><p>以下的输入格式都没问题：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">88</span>,<span class=\"number\">121</span></span><br><span class=\"line\"><span class=\"number\">88</span> ,<span class=\"number\">121</span></span><br><span class=\"line\"><span class=\"number\">88</span> , <span class=\"number\">121</span></span><br></pre></td></tr></table></figure><p>请注意，<strong>“所有空白”的概念包括没有空格的特殊情况</strong>。</p>\n<p>除了<code>%c</code>，其他转换说明都会自动跳过待输入值前面所有的空白。因此，<code>scanf(&quot;%d%d&quot;, &amp;n, &amp;m)</code>与<code>scanf(&quot;%d %d&quot;, &amp;n, &amp;m)</code>的行为相同。对于<code>%c</code>，在格式字符串中添加一个空格字符会有所不同。例如，如果把<code>%c</code>放在格式字符串中的空格前面，<code>scanf()</code>便会跳过空格，从<strong>第1个非空白字符开始读取</strong>。也就是说，</p>\n<p>🍖<strong><mark><code>scanf(&quot;%c&quot;, &amp;ch)</code>从输入中的第1个字符开始读取，而<code>scanf(&quot; %c&quot;, &amp;ch)</code>则从第1个非空白字符开始读取</mark></strong>。</p>\n<h4 id=\"scanf的返回值\">scanf()的返回值<a href=\"#scanf的返回值\" title=\"scanf()的返回值\"></a></h4><p><code>scanf()</code>函数返回成功读取的项数。<strong>如果没有读取任何项，且需要读取一个数字而用户却输入一个非数值字符串，<code>scanf()</code>便返回<code>0</code></strong>。<strong>当<code>scanf()</code>检测到“文件结尾”时，会返回<code>EOF</code></strong>（<code>EOF</code>是<code>stdio.h</code>中定义的特殊值，通常用<code>#define</code>指令把<code>EOF</code>定义为<strong><code>-1</code></strong>）。我们将在第6章中讨论文件结尾的相关内容以及<strong>如何利用scanf()的返回值</strong>。在读者学会<code>if</code>语句和<code>while</code>语句后，便可使用<code>scanf()</code>的返回值来检测和处理不匹配的输入。</p>\n<h3 id=\"printf和scanf的修饰符\">printf()和scanf()的*修饰符<a href=\"#printf和scanf的修饰符\" title=\"printf()和scanf()的*修饰符\"></a></h3><p><code>printf()</code>和<code>scanf()</code>都可以使用<code>*</code>修饰符来修改转换说明的含义。但是，它们的用法不太一样。首先，我们来看<code>printf()</code>的<code>*</code>修饰符。</p>\n<p>如果你不想预先指定字段宽度，希望通过程序来指定，那么可以用<code>*</code>修饰符代替字段宽度。但还是要用一个参数告诉函数，字段宽度应该是多少。也就是说，<mark>如果转换说明是<code>%*d</code>，那么参数列表中应包含<code>*</code>和 <code>d</code>对应的值</mark>。这个技巧也可用于<strong>浮点值指定精度</strong>和<strong>字段宽度</strong>。程序清单4.16演示了相关用法。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">4.16</span> varwid.c程序</span><br><span class=\"line\"><span class=\"comment\">/* varwid.c -- 使用变宽输出字段 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"built_in\">width</span>, precision;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> number = <span class=\"number\">256</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> weight = <span class=\"number\">242.5</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter a field width:\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;<span class=\"built_in\">width</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"The number is :%*d:\\n\"</span>, <span class=\"built_in\">width</span>, number);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Now enter a width and a precision:\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;<span class=\"built_in\">width</span>, &amp;precision);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Weight = %*.*f\\n\"</span>, <span class=\"built_in\">width</span>, precision, weight);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Done!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>变量width提供字段宽度，number是待打印的数字。因为转换说明中<code>*</code>在<code>d</code>的前面，所以在<code>printf()</code>的参数列表中，width在number的前面。同样，width和precision提供打印weight的格式化信息。下面是一个运行示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter a field <span class=\"built_in\">width</span>:</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\">The number is : <span class=\"number\">256</span>:</span><br><span class=\"line\">Now enter a <span class=\"built_in\">width</span> <span class=\"keyword\">and</span> a precision:</span><br><span class=\"line\"><span class=\"number\">8</span> <span class=\"number\">3</span></span><br><span class=\"line\">Weight = <span class=\"number\">242.500</span></span><br><span class=\"line\">Done!</span><br></pre></td></tr></table></figure><p>这里，用户首先输入6，因此6是程序使用的字段宽度。类似地，接下来用户输入8和3，说明字段宽度是8，小数点后面显示3位数字。一般而言，程序应根据weight的值来决定这些变量的值。</p>\n<p><code>scanf()</code>中<code>*</code>的用法与此不同。把<code>*</code>放在<code>%</code>和转换字符之间时，会使得<code>scanf()</code>跳过相应的输出项。程序清单4.17就是一个例子。</p>\n<p>程序清单4.17 skip2.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* skiptwo.c -- 跳过输入中的前两个整数 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter three integers:\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%*d %*d %d\"</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"The last integer was %d\\n\"</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>程序清单4.17中的<code>scanf()</code>指示：跳过两个整数，把第3个整数拷贝给n。下面是一个运行示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please enter three integers:</span><br><span class=\"line\"><span class=\"number\">2013</span> <span class=\"number\">2014</span> <span class=\"number\">2015</span></span><br><span class=\"line\">The last integer was <span class=\"number\">2015</span></span><br></pre></td></tr></table></figure><p>在程序需要读取文件中特定列的内容时，这项跳过功能很有用。</p>\n<h3 id=\"printf的用法提示\">printf()的用法提示<a href=\"#printf的用法提示\" title=\"printf()的用法提示\"></a></h3><p>想把<strong>数据打印成列</strong>，指定<strong>固定字段宽度</strong>很有用。因为默认的字段宽度是待打印数字的宽度，如果同一列中打印的数字位数不同，那么下面的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d %d\\n\"</span>, val1, val2, val3);</span><br></pre></td></tr></table></figure><p>打印出来的数字可能参差不齐。例如，假设执行3次<code>printf()</code>语句，用户输入不同的变量，其输出可能是这样：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">12</span> <span class=\"number\">234</span> <span class=\"number\">1222</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">22334</span> <span class=\"number\">2322</span> <span class=\"number\">10001</span></span><br></pre></td></tr></table></figure><p>使用足够大的固定字段宽度可以让输出整齐美观。例如，若使用下面的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%9d %9d %9d\\n\"</span>, val1, val2, val3);</span><br></pre></td></tr></table></figure><p>上面的输出将变成：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"number\">12</span>　　 　<span class=\"number\">234</span>　　　<span class=\"number\">1222</span></span><br><span class=\"line\">    <span class=\"number\">4</span>　　　 　<span class=\"number\">5</span>　　 　<span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">22334</span>　　  <span class=\"number\">2322</span>　　 <span class=\"number\">10001</span></span><br></pre></td></tr></table></figure><p><strong>在两个转换说明中间插入一个空白字符，可以确保即使一个数字溢出了自己的字段，下一个数字也不会紧跟该数字一起输出</strong>（这样两个数字看起来像是一个数字）。这是因为格式字符串中的普通字符（包括空格）会被打印出来。</p>\n<p>另一方面，如果要在文字中嵌入一个数字，通常指定一个小于或等于该数字宽度的字段会比较方便。这样，输出数字的宽度正合适，没有不必要的空白。例如，下面的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Count Beppo ran %.2f miles in 3 hours.\\n\"</span>, distance);</span><br></pre></td></tr></table></figure><p>其输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Count Beppo ran <span class=\"number\">10.22</span> miles in <span class=\"number\">3</span> hours.</span><br></pre></td></tr></table></figure><p>如果把转换说明改为%10.2f，则输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Count Beppo ran　　 <span class=\"number\">10.22</span> miles in <span class=\"number\">3</span> hours.</span><br></pre></td></tr></table></figure><p><strong>本地化设置</strong></p>\n<p>美国和世界上的许多地区都使用一个点来分隔十进制值的整数部分和小数部分，如3.14159。然而，许多其他地区用逗号来分隔，如 3,14159。读者可能注意到了，<code>printf()</code>和 <code>scanf()</code>都没有提供逗号的转换说明。C语言考虑了这种情况。本书附录B的参考资料V中介绍了C支持的本地化概念，因此C程序可以选择特定的本地化设置。例如，如果指定了荷兰语言环境，<code>printf()</code>和<code>scanf()</code>在显示和读取浮点值时会使用本地惯例（在这种情况下，用逗号代替点分隔浮点值的整数部分和小数部分）。另外，一旦指定了环境，便可在代码的数字中使用逗号：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double pi &#x3D; 3,14159; &#x2F;&#x2F; 荷兰本地化设置</span><br></pre></td></tr></table></figure><p>C标准有两个本地化设置：”<strong>C</strong>“和” “（空字符串）。默认情况下，程序使用”C”本地化设置，基本上符合美国的用法习惯。而””本地化设置可以替换当前系统中使用的本地语言环境。原则上，这与”C”本地化设置相同。事实上，大部分操作系统（如UNIX、Linux和Windows）都提供本地化设置选项列表，只不过它们提供的列表可能不同。</p>\n<h2 id=\"关键概念\">关键概念<a href=\"#关键概念\" title=\"关键概念\"></a></h2><p>C语言用<code>char</code>类型表示单个字符，用<strong>字符串</strong>表示字符序列。<strong>字符常量是一种字符串形式</strong>，即用双引号把字符括起来：”Good luck, my friend”。<strong>可以把字符串储存在字符数组</strong>（由内存中相邻的字节组成）中。字符串，无论是表示成字符常量还是储存在字符数组中，都以一个叫做空字符的隐藏字符结尾。</p>\n<p><mark>在程序中，最好用<code>#define</code> 定义数值常量，用 <code>const</code> 关键字声明的变量为只读变量</mark>。在程序中使用符号常量（明示常量），提高了程序的可读性和可维护性。</p>\n<p>C 语言的标准输入函数（<code>scanf()</code>）和标准输出函数（<code>printf()</code>）都使用一种系统。在该系统中，第1个参数中的转换说明必须与后续参数中的值相匹配。例如，<code>int</code>转换说明<code>%d</code>与一个浮点值匹配会产生奇怪的结果。必须格外小心，确保转换说明的数量和类型与函数的其余参数相匹配。对于<code>scanf()</code>，一定要记得在变量名前加上地址运算符（<code>&amp;</code>）。</p>\n<p>空白字符（制表符、空格和换行符）在 <code>scanf()</code>处理输入时起着至关重要的作用。除了<code>%c</code> 模式（读取下一个字符），<code>scanf()</code>在读取输入时会<strong>跳过非空白字符前的所有空白字符</strong>，然后一直读取字符，直至遇到空白字符或与正在读取字符不匹配的字符。考虑一下，如果<code>scanf()</code>根据不同的转换说明读取相同的输入行，会发生什么情况。假设有如下输入行：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">-13.45e12</span># <span class=\"number\">0</span>\t<span class=\"comment\">//`-`前面有空格</span></span><br></pre></td></tr></table></figure><p>如果其对应的转换说明是<code>%d</code>，<code>scanf()</code>会读取3个字符（<code>-13</code>）并停在小数点处，小数点将被留在输入中作为下一次输入的首字符。如果其对应的转换说明是<code>%f</code>，<code>scanf()</code>会读取<code>-13.45e12</code>，并停在#符号处，而#将被留在输入中作为下一次输入的首字符；然后，<code>scanf()</code>把读取的字符序列<code>-13.45e12</code>转换成相应的浮点值，并储存在<code>float</code>类型的目标变量中。如果其对应的转换说明是<code>%s</code>，<code>scanf()</code>会读取<code>-13.45e12#</code>，并停在空格处，空格将被留在输入中作为下一次输入的首字符；然后，<code>scanf()</code>把这 10个字符的字符码储存在目标字符数组中，并在末尾加上一个空字符。如果其对应的转换说明是<code>%c</code>，<code>scanf()</code>只会读取并储存第1个字符，该例中是一个空格 </p>\n<h2 id=\"本章小结\">本章小结<a href=\"#本章小结\" title=\"本章小结\"></a></h2><p><strong>字符串是一系列被视为一个处理单元的字符</strong>。在C语言中，字符串是以空字符（ASCII码是0）结尾的一系列字符。可以把字符串储存在字符数组中。数组是一系列同类型的项或元素。下面声明了一个名为<code>name</code>、有30个<code>char</code>类型元素的数组：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> name[<span class=\"number\">30</span>];</span><br></pre></td></tr></table></figure><p>要确保有足够多的元素来储存整个字符串（包括空字符）。</p>\n<p>字符串常量是用双引号括起来的字符序列，如：<code>&quot;This is an example of a string&quot;</code>。</p>\n<p><code>scanf()</code>函数（声明在<code>string.h</code>头文件中）可用于获得字符串的长度（末尾的空字符不计算在内）。<code>scanf()</code>函数中的转换说明是<code>%s</code>时，可读取一个单词。</p>\n<p>C预处理器为预处理器指令（以#符号开始）查找源代码程序，并在开始编译程序之前处理它们。处理器根据<code>#include</code>指令把另一个文件中的内容添加到该指令所在的位置。<code>#define</code>指令可以创建明示常量（符号常量），即代表常量的符号。<code>limits.h</code>和<code>float.h</code>头文件用<code>#define</code>定义了一组表示<strong>整型</strong>和<strong>浮点型</strong>不同属性的符号常量。另外，还可以使用<code>const</code>限定符创建定义后就不能修改的变量。</p>\n<p><code>printf()</code>和<code>scanf()</code>函数对输入和输出提供多种支持。两个函数都使用<strong>格式字符串</strong>，其中包含的转换说明表明待读取或待打印数据项的数量和类型。另外，可以使用转换说明控制输出的外观：<strong>字段宽度</strong>、<strong>小数位</strong>和<strong>字段内的布局</strong>。</p>\n","prev":{"title":"C语言程序算法","link":"posts/13623648"},"next":{"title":"英语笔记","link":"posts/4e70975"},"plink":"https://dxsummer.gitee.io/posts/2a5471de/","toc":[{"id":"字符串简介","title":"字符串简介","index":"1","children":[{"id":"char类型数组和null字符","title":"char类型数组和null字符","index":"1.1"},{"id":"使用字符串","title":"使用字符串","index":"1.2","children":[{"id":"字符串和字符","title":"字符串和字符","index":"1.2.1"}]},{"id":"strlen函数","title":"strlen()函数","index":"1.3"}]},{"id":"常量和c预处理器","title":"常量和C预处理器","index":"2","children":[{"id":"const限定符","title":"const限定符","index":"2.1"},{"id":"明示常量","title":"明示常量","index":"2.2"}]},{"id":"printf和scanf","title":"printf()和scanf()","index":"3","children":[{"id":"printf函数","title":"printf()函数","index":"3.1"},{"id":"使用printf","title":"使用printf()","index":"3.2"},{"id":"printf的转换说明修饰符","title":"printf()的转换说明修饰符","index":"3.3","children":[{"id":"使用修饰符和标记的示例","title":"使用修饰符和标记的示例","index":"3.3.1"},{"id":"学以致用","title":"学以致用","index":"3.3.2"}]},{"id":"转换说明的意义","title":"转换说明的意义","index":"3.4","children":[{"id":"printf的返回值","title":"printf()的返回值","index":"3.4.1"},{"id":"打印较长的字符串","title":"打印较长的字符串","index":"3.4.2"}]},{"id":"使用scanf","title":"使用scanf()","index":"3.5","children":[{"id":"格式字符串中的普通字符","title":"格式字符串中的普通字符","index":"3.5.1"},{"id":"scanf的返回值","title":"scanf()的返回值","index":"3.5.2"}]},{"id":"printf和scanf的修饰符","title":"printf()和scanf()的*修饰符","index":"3.6"},{"id":"printf的用法提示","title":"printf()的用法提示","index":"3.7"}]},{"id":"关键概念","title":"关键概念","index":"4"},{"id":"本章小结","title":"本章小结","index":"5"}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/2a5471de/\" title=\"Step2 字符串和格式化输入/输出\">https://dxsummer.gitee.io/posts/2a5471de/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2020年4月29日","updated":"2020年6月8日"}}