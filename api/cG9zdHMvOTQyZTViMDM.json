{"title":"动画详解十大经典排序算法（C语言版）","date":"2020-06-12T10:26:57.000Z","date_formatted":{"ll":"2020年6月12日","L":"2020/06/12","MM-DD":"06-12"},"thumbnail":"https://gitee.com/DxSummer/pic/raw/master/img/c/fm.png","link":"posts/942e5b03","comments":true,"tags":["C语言基础"],"categories":["C语言"],"updated":"2020-10-11T14:26:48.577Z","content":"<p>排序算法是程序员必备的基础知识，弄明白它们的原理和实现很有必要。本文中将通过非常细节的动画展示出算法的原理，配合代码更容易理解。</p>\n<h2 id=\"概述\">概述<a href=\"#概述\" title=\"概述\"></a></h2><p>由于待排序的元素数量不同，使得排序过程中涉及的存储器不同，可将排序方法分为两类：一类是<strong>内部排序</strong>，指的是待排序列存放在计算机随机存储器中进行的排序过程；另一类是<strong>外部排序</strong>，指的是待排序的元素的数量很大，以致内存一次不能容纳全部记录，在排序过程中尚需对外存进行访问的排序过程。</p>\n<p>我们可以将常见的<strong>内部排序算法</strong>可以分成两类：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/c/20201003130852.png\" class=\"φcy\"></p>\n<p><strong>比较类排序</strong>：通过比较来决定元素间的相对次序，时间复杂度为 O(nlogn)～O(n²)。属于比较类的有：</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th align=\"center\">排序算法</th><th align=\"center\">时间复杂度</th><th align=\"center\">最差情况</th><th align=\"center\">最好情况</th><th align=\"center\">空间复杂度</th><th align=\"center\">排序方式</th><th align=\"center\">稳定性</th></tr>\n</thead><tbody><tr>\n<td align=\"center\"><a href=\"https://blog.fiteen.top/2019/sorting-algorithm#bubble-sort\" target=\"_blank\">冒泡排序</a></td><td align=\"center\">O(n²)</td><td align=\"center\">O(n²)</td><td align=\"center\">O(n)</td><td align=\"center\">O(1)</td><td align=\"center\">In-place</td><td align=\"center\">✔</td></tr>\n<tr>\n<td align=\"center\"><a href=\"https://blog.fiteen.top/2019/sorting-algorithm#quick-sort\" target=\"_blank\">快速排序</a></td><td align=\"center\">O(nlogn)</td><td align=\"center\">O(n²)</td><td align=\"center\">O(nlogn)</td><td align=\"center\">O(logn)</td><td align=\"center\">In-place</td><td align=\"center\">✘</td></tr>\n<tr>\n<td align=\"center\"><a href=\"https://blog.fiteen.top/2019/sorting-algorithm#insertion-sort\" target=\"_blank\">插入排序</a></td><td align=\"center\">O(n²)</td><td align=\"center\">O(n²)</td><td align=\"center\">O(n)</td><td align=\"center\">O(1)</td><td align=\"center\">In-place</td><td align=\"center\">✔</td></tr>\n<tr>\n<td align=\"center\"><a href=\"https://blog.fiteen.top/2019/sorting-algorithm#shell-sort\" target=\"_blank\">希尔排序</a></td><td align=\"center\">O(nlog²n)</td><td align=\"center\">O(n²)</td><td align=\"center\">O(n)</td><td align=\"center\">O(1)</td><td align=\"center\">In-place</td><td align=\"center\">✘</td></tr>\n<tr>\n<td align=\"center\"><a href=\"https://blog.fiteen.top/2019/sorting-algorithm#selection-sort\" target=\"_blank\">选择排序</a></td><td align=\"center\">O(n²)</td><td align=\"center\">O(n²)</td><td align=\"center\">O(n²)</td><td align=\"center\">O(1)</td><td align=\"center\">In-place</td><td align=\"center\">✘</td></tr>\n<tr>\n<td align=\"center\"><a href=\"https://blog.fiteen.top/2019/sorting-algorithm#heap-sort\" target=\"_blank\">堆排序</a></td><td align=\"center\">O(nlogn)</td><td align=\"center\">O(nlogn)</td><td align=\"center\">O(nlogn)</td><td align=\"center\">O(1)</td><td align=\"center\">In-place</td><td align=\"center\">✘</td></tr>\n<tr>\n<td align=\"center\"><a href=\"https://blog.fiteen.top/2019/sorting-algorithm#merge-sort\" target=\"_blank\">归并排序</a></td><td align=\"center\">O(nlogn)</td><td align=\"center\">O(nlogn)</td><td align=\"center\">O(nlogn)</td><td align=\"center\">O(n)</td><td align=\"center\">Out-place</td><td align=\"center\">✔</td></tr>\n</tbody></table></div></div><p><strong>非比较类排序</strong>：不通过比较来决定元素间的相对次序，其时间复杂度可以突破 O(nlogn)，以线性时间运行。属于非比较类的有：</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th align=\"center\">排序算法</th><th align=\"center\">时间复杂度</th><th align=\"center\">最差情况</th><th align=\"center\">最好情况</th><th align=\"center\">空间复杂度</th><th align=\"center\">排序方式</th><th align=\"center\">稳定性</th></tr>\n</thead><tbody><tr>\n<td align=\"center\"><a href=\"https://blog.fiteen.top/2019/sorting-algorithm#bucket-sort\" target=\"_blank\">桶排序</a></td><td align=\"center\">O(n+nlog(n/r))</td><td align=\"center\">O(n²)</td><td align=\"center\">O(n)</td><td align=\"center\">O(n+r)</td><td align=\"center\">Out-place</td><td align=\"center\">✔</td></tr>\n<tr>\n<td align=\"center\"><a href=\"https://blog.fiteen.top/2019/sorting-algorithm#counting-sort\" target=\"_blank\">计数排序</a></td><td align=\"center\">O(n+r)</td><td align=\"center\">O(n+r)</td><td align=\"center\">O(n+r)</td><td align=\"center\">O(n+r)</td><td align=\"center\">Out-place</td><td align=\"center\">✔</td></tr>\n<tr>\n<td align=\"center\"><a href=\"https://blog.fiteen.top/2019/sorting-algorithm#radix-sort\" target=\"_blank\">基数排序</a></td><td align=\"center\">O(d(n+r))</td><td align=\"center\">O(d(n+r))</td><td align=\"center\">O(d(n+r))</td><td align=\"center\">O(n+r)</td><td align=\"center\">Out-place</td><td align=\"center\">✔</td></tr>\n</tbody></table></div></div><p><strong>名词解释</strong>：</p>\n<p><strong><a href=\"https://blog.fiteen.top/2017/asymptotic-time-complexity-and-space-complexity\" target=\"_blank\">时间/空间复杂度</a></strong>：描述一个算法执行时间/占用空间与数据规模的增长关系</p>\n<p><strong>n</strong>：待排序列的个数</p>\n<p><strong>r</strong>：“桶”的个数（上面的三种非比较类排序都是基于“桶”的思想实现的）</p>\n<p><strong>d</strong>：待排序列的最高位数</p>\n<p><strong>In-place</strong>：原地算法，指的是占用常用内存，不占用额外内存。空间复杂度为 O(1) 的都可以认为是原地算法</p>\n<p><strong>Out-place</strong>：非原地算法，占用额外内存</p>\n<p><strong>稳定性</strong>：假设待排序列中两元素相等，排序前后这两个相等元素的相对位置不变，则认为是稳定的。</p>\n<h2 id=\"冒泡排序\">冒泡排序<a href=\"#冒泡排序\" title=\"冒泡排序\"></a></h2><p>冒泡排序（Bubble Sort），顾名思义，就是指越小的元素会经由交换慢慢“浮”到数列的顶端。</p>\n<h3 id=\"算法原理\">算法原理<a href=\"#算法原理\" title=\"算法原理\"></a></h3><ol><li>从左到右，依次比较相邻的元素大小，更大的元素交换到右边；</li>\n<li>从第一组相邻元素比较到最后一组相邻元素，这一步结束最后一个元素必然是参与比较的元素中最大的元素；</li>\n<li>按照大的居右原则，重新从左到后比较，前一轮中得到的最后一个元素不参与比较，得出新一轮的最大元素；</li>\n<li>按照上述规则，每一轮结束会减少一个元素参与比较，直到没有任何一组元素需要比较。</li>\n</ol><h3 id=\"动图演示\">动图演示<a href=\"#动图演示\" title=\"动图演示\"></a></h3><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/c/20201003130453.gif\" class=\"φcy\"></p>\n<h3 id=\"代码实现\">代码实现<a href=\"#代码实现\" title=\"代码实现\"></a></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                swap(arr, j, j+<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"算法分析\">算法分析<a href=\"#算法分析\" title=\"算法分析\"></a></h3><p>冒泡排序属于<strong>交换排序</strong>，是<strong>稳定排序</strong>，平均时间复杂度为 O(n²)，空间复杂度为 O(1)。</p>\n<p>但是我们常看到冒泡排序的<strong>最优时间复杂度是 O(n)</strong>，那要如何优化呢？</p>\n<p>我们可以用一个 flag 参数记录新一轮的排序中元素是否做过交换，如果没有，说明前面参与比较过的元素已经是正序，那就没必要再从头比较了。代码实现如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_sort_quicker</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j, flag;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                swap(arr, j, j+<span class=\"number\">1</span>);</span><br><span class=\"line\">                flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!flag) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"快速排序\">快速排序<a href=\"#快速排序\" title=\"快速排序\"></a></h2><p>快速排序（Quick Sort），是冒泡排序的改进版，之所以“快速”，是因为使用了<strong>分治法</strong>。它也属于<strong>交换排序</strong>，通过元素之间的位置交换来达到排序的目的。</p>\n<h3 id=\"基本思想\">基本思想<a href=\"#基本思想\" title=\"基本思想\"></a></h3><p>在序列中随机挑选一个元素作基准，将小于基准的元素放在基准之前，大于基准的元素放在基准之后，再分别对小数区与大数区进行排序。</p>\n<p><strong>一趟快速排序</strong>的具体做法是：</p>\n<ol><li>设两个指针 i 和 j，分别指向序列的头部和尾部；</li>\n<li>先从 j 所指的位置向前搜索，找到第一个比基准小的值，把它与基准交换位置；</li>\n<li>再从 i 所指的位置向后搜索，找到第一个比基准大的值，把它与基准交换位置；</li>\n<li>重复 2、3 两步，直到 i = j。</li>\n</ol><p>仔细研究一下上述算法我们会发现，在排序过程中，对基准的移动其实是多余的，因为只有一趟排序结束时，也就是 i = j 的位置才是基准的最终位置。</p>\n<p>由此可以<strong>优化</strong>一下算法：</p>\n<ol><li>设两个指针 i 和 j，分别指向序列的头部和尾部；</li>\n<li>先从 j 所指的位置向前搜索，找到第一个比基准小的数值后停下来，再从 i 所指的位置向后搜索，找到第一个比基准大的数值后停下来，把 i 和 j 指向的两个值交换位置；</li>\n<li>重复步骤 2，直到 i = j，最后将相遇点指向的值与基准交换位置。</li>\n</ol><h3 id=\"动图演示-1\">动图演示<a href=\"#动图演示-1\" title=\"动图演示\"></a></h3><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/c/20201003131038.gif\" class=\"φcy\"></p>\n<h3 id=\"代码实现-1\">代码实现<a href=\"#代码实现-1\" title=\"代码实现\"></a></h3><p>这里取序列的第一个元素为基准。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 选取序列的第一个元素作为基准 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">select_pivot</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> low)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[low];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j, pivot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &gt;= high) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    pivot = select_pivot(arr, low);</span><br><span class=\"line\">    i = low;</span><br><span class=\"line\">    j = high;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i != j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (arr[j] &gt;= pivot &amp;&amp; i &lt; j) j--;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (arr[i] &lt;= pivot &amp;&amp; i &lt; j) i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; j) swap(arr, i, j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[low] = arr[i];</span><br><span class=\"line\">    arr[i] = pivot;</span><br><span class=\"line\">    quick_sort(arr, low, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">    quick_sort(arr, i + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"算法分析-1\">算法分析<a href=\"#算法分析-1\" title=\"算法分析\"></a></h3><p>快速排序是<strong>不稳定排序</strong>，它的平均时间复杂度为 O(nlogn)，平均空间复杂度为 O(logn)。</p>\n<p>快速排序中，基准的选取非常重要，它将影响排序的效率。举个例子，假如序列本身顺序随机，快速排序是所有同数量级时间复杂度的排序算法中平均性能最好的，但如果序列本身已经有序或基本有序，直接<strong>选取固定位置，例如第一个元素</strong>作为基准，会使快速排序就会沦为冒泡排序，时间复杂度为 O(n²)。为了避免发生这种情况，引入下面两种获取基准的方法：</p>\n<p><strong>随机选取</strong></p>\n<p>就是选取序列中的任意一个数为基准的值。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 随机选择基准的位置，区间在 low 和 high 之间 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">select_pivot_random</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">    srand((<span class=\"keyword\">unsigned</span>)time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot = rand()%(high - low) + low;</span><br><span class=\"line\">    swap(arr, pivot, low);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[low];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong>三者取中</strong></p>\n<p>就是取起始位置、中间位置、末尾位置指向的元素，对这三个元素排序后取中间数作为基准。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 取起始位置、中间位置、末尾位置指向的元素三者的中间值作为基准 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">select_pivot_median_of_three</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计算数组中间的元素的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = low + ((high - low) &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 排序，使 arr[mid] &lt;= arr[low] &lt;= arr[high]</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[mid] &gt; arr[high]) swap(arr, mid, high);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[low] &gt; arr[high]) swap(arr, low, high);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[mid] &gt; arr[low]) swap(arr, low, mid);</span><br><span class=\"line\">    <span class=\"comment\">// 使用 low 位置的元素作为基准</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[low];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>经验证明，三者取中的规则可以大大改善快速排序在最坏情况下的性能。</p>\n<h2 id=\"插入排序\">插入排序<a href=\"#插入排序\" title=\"插入排序\"></a></h2><p>直接插入排序（Straight Insertion Sort），是一种简单直观的排序算法，它的基本操作是不断地将尚未排好序的数插入到已经排好序的部分，好比打扑克牌时一张张抓牌的动作。在冒泡排序中，经过每一轮的排序处理后，序列后端的数是排好序的；而对于插入排序来说，经过每一轮的排序处理后，序列前端的数都是排好序的。</p>\n<h3 id=\"基本思想-1\">基本思想<a href=\"#基本思想-1\" title=\"基本思想\"></a></h3><p>先将第一个元素视为一个有序子序列，然后从第二个元素起逐个进行插入，直至整个序列变成元素非递减有序序列为止。如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入大相等元素的后面。整个排序过程进行 n-1 趟插入。</p>\n<h3 id=\"动图演示-2\">动图演示<a href=\"#动图演示-2\" title=\"动图演示\"></a></h3><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/c/20201003131210.gif\" class=\"φcy\"></p>\n<h3 id=\"代码实现-2\">代码实现<a href=\"#代码实现-2\" title=\"代码实现\"></a></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertion_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j, temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        temp = arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = i; j &gt; <span class=\"number\">0</span> &amp;&amp; arr[j - <span class=\"number\">1</span>] &gt; temp; j--)</span><br><span class=\"line\">            arr[j] = arr[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"算法分析-2\">算法分析<a href=\"#算法分析-2\" title=\"算法分析\"></a></h3><p>插入排序是<strong>稳定排序</strong>，平均时间复杂度为 O(n²)，空间复杂度为 O(1)。</p>\n<h2 id=\"希尔排序\">希尔排序<a href=\"#希尔排序\" title=\"希尔排序\"></a></h2><p>希尔排序（Shell’s Sort）是第一个突破 O(n²) 的排序算法，是直接插入排序的改进版，又称“<strong>缩小增量排序</strong>”（Diminishing Increment Sort）。它与直接插入排序不同之处在于，它会优先比较距离较远的元素。</p>\n<h3 id=\"基本思想-2\">基本思想<a href=\"#基本思想-2\" title=\"基本思想\"></a></h3><p>先将整个待排序列分割成若干个字序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行一次直接插入排序。</p>\n<p>子序列的构成不是简单地“逐段分割”，将相隔某个增量的记录组成一个子序列，让增量逐趟缩短，直到增量为 1 为止。</p>\n<h3 id=\"动图演示-3\">动图演示<a href=\"#动图演示-3\" title=\"动图演示\"></a></h3><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/c/20201003131254.gif\" class=\"φcy\"></p>\n<h3 id=\"代码实现-3\">代码实现<a href=\"#代码实现-3\" title=\"代码实现\"></a></h3><p>增量序列可以有各种取法，例如上面动图所示，增量序列满足 [n / 2, n / 2 / 2, …, 1]，n 是序列本身的长度，这也是一种比较流行的增量序列定义方式。这时希尔排序的算法可以通过下面的代码实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shell_sort_split_half</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j, dk, temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (dk = n &gt;&gt; <span class=\"number\">1</span>; dk &gt; <span class=\"number\">0</span>; dk = dk &gt;&gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = dk; i &lt; n; i++) &#123;</span><br><span class=\"line\">            temp = arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = i - dk; j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; temp; j -= dk)</span><br><span class=\"line\">                arr[j + dk] = arr[j];</span><br><span class=\"line\">            arr[j + dk] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>增量序列也可以有其它的定义方式，那么希尔排序的实现可以归纳成这样：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shell_insert</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> dk)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j, temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = dk; i &lt; n; i += dk) &#123;</span><br><span class=\"line\">        temp = arr[i];</span><br><span class=\"line\">        j = i - dk;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; temp &lt; arr[j]) &#123;</span><br><span class=\"line\">            arr[j + dk] = arr[j];</span><br><span class=\"line\">            j -= dk;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[j + dk] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shell_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> dlta[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; t; ++k) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 一趟增量为 dlta[k] 的插入排序</span></span><br><span class=\"line\">        shell_insert(arr, n, dlta[k]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"算法分析-3\">算法分析<a href=\"#算法分析-3\" title=\"算法分析\"></a></h3><p>希尔排序是<strong>不稳定排序</strong>，它的分析是一个复杂的问题，因为它的运行时间依赖于增量序列的选择，它的平均时间复杂度为 O(n^1.3)，最好情况是 O(n)，最差情况是 O(n²)。空间复杂度为 O(1)。</p>\n<h2 id=\"选择排序\">选择排序<a href=\"#选择排序\" title=\"选择排序\"></a></h2><p>选择排序（Selection Sort）是一种简单直观的排序算法。它的基本思想就是，每一趟 n-i+1(i=1,2,…,n-1) 个记录中选取关键字最小的记录作为有序序列的第 i 个记录。</p>\n<h3 id=\"算法步骤\">算法步骤<a href=\"#算法步骤\" title=\"算法步骤\"></a></h3><p><strong>简单选择排序</strong>：</p>\n<ol><li>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置;</li>\n<li>在剩余未排序元素中继续寻找最小（大）元素，放到已排序序列的末尾;</li>\n<li>重复步骤 2，直到所有元素排序完毕。</li>\n</ol><h3 id=\"动图演示-4\">动图演示<a href=\"#动图演示-4\" title=\"动图演示\"></a></h3><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/c/20201003131349.gif\" class=\"φcy\"></p>\n<h3 id=\"代码实现-4\">代码实现<a href=\"#代码实现-4\" title=\"代码实现\"></a></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">selection_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> <span class=\"built_in\">min</span> = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = i + <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[<span class=\"built_in\">min</span>])</span><br><span class=\"line\">                <span class=\"built_in\">min</span> = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(arr, <span class=\"built_in\">min</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"算法分析-4\">算法分析<a href=\"#算法分析-4\" title=\"算法分析\"></a></h3><p>选择排序是<strong>不稳定排序</strong>，时间复杂度固定为 O(n²)，因此它不适用于数据规模较大的序列。不过它也有优点，就是不占用额外的内存空间。</p>\n<h2 id=\"堆排序\">堆排序<a href=\"#堆排序\" title=\"堆排序\"></a></h2><p>堆排序（Heap Sort）是指利用堆这种数据结构所设计的一种排序算法。堆的特点：</p>\n<ul><li>一颗完全二叉树（也就是会所生成节点的顺序是：从上往下、从左往右）</li>\n<li>每一个节点必须满足父节点的值不大于/不小于子节点的值</li>\n</ul><h3 id=\"基本思想-3\">基本思想<a href=\"#基本思想-3\" title=\"基本思想\"></a></h3><p>实现堆排序需要解决两个问题：</p>\n<ul><li>如何将一个无序序列构建成堆？</li>\n<li>如何在输出堆顶元素后，调整剩余元素成为一个新的堆？</li>\n</ul><p>以升序为例，算法实现的思路为：</p>\n<ol><li>建立一个 <code>build_heap</code> 函数，将数组 tree[0,…n-1] 建立成堆，n 表示数组长度。函数里需要维护的是所有节点的父节点，最后一个子节点下标为 n-1，那么它对应的父节点下标就是 (n-1-1)/2。</li>\n<li>构建完一次堆后，最大元素就会被存放在根节点 tree[0]。将 tree[0] 与最后一个元素交换，每一轮通过这种不断将最大元素后移的方式，来实现排序。</li>\n<li>而交换后新的根节点可能不满足堆的特点了，因此需要一个调整函数 heapify 来对剩余的数组元素进行最大堆性质的维护。如果 tree[i] 表示其中的某个节点，那么 tree[2<em>i+1] 是左孩子，tree[2</em>i+2] 是右孩子，选出三者中的最大元素的下标，存放于 max 值中，若 max 不等于 i，则将最大元素交换到 i 下标的位置。但是，此时以 tree[max] 为根节点的子树可能不满足堆的性质，需要递归调用自身。</li>\n</ol><h3 id=\"动图演示-5\">动图演示<a href=\"#动图演示-5\" title=\"动图演示\"></a></h3><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/c/20201003131424.gif\" class=\"φcy\"></p>\n<h3 id=\"代码实现-5\">代码实现<a href=\"#代码实现-5\" title=\"代码实现\"></a></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">heapify</span><span class=\"params\">(<span class=\"keyword\">int</span> tree[], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// n 表示序列长度，i 表示父节点下标</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= n) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 左侧子节点下标</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 右侧子节点下标</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = <span class=\"number\">2</span> * i + <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">max</span> = i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt; n &amp;&amp; tree[left] &gt; tree[<span class=\"built_in\">max</span>]) <span class=\"built_in\">max</span> = left;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right &lt; n &amp;&amp; tree[right] &gt; tree[<span class=\"built_in\">max</span>]) <span class=\"built_in\">max</span> = right;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">max</span> != i) &#123;</span><br><span class=\"line\">        swap(tree, <span class=\"built_in\">max</span>, i);</span><br><span class=\"line\">        heapify(tree, n, <span class=\"built_in\">max</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build_heap</span><span class=\"params\">(<span class=\"keyword\">int</span> tree[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 树最后一个节点的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> last_node = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 最后一个节点对应的父节点下标</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> parent = (last_node - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = parent; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        heapify(tree, n, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">heap_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> tree[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    build_heap(tree, n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将堆顶元素与最后一个元素交换</span></span><br><span class=\"line\">        swap(tree, i, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 调整成大顶堆</span></span><br><span class=\"line\">        heapify(tree, i, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"算法分析-5\">算法分析<a href=\"#算法分析-5\" title=\"算法分析\"></a></h3><p>堆排序是<strong>不稳定排序</strong>，适合数据量较大的序列，它的平均时间复杂度为 Ο(nlogn)，空间复杂度为 O(1)。堆排序仅需一个记录大小供交换用的辅助存储空间。</p>\n<h2 id=\"归并排序\">归并排序<a href=\"#归并排序\" title=\"归并排序\"></a></h2><p>归并排序（Merge Sort）是建立在<strong>归并</strong>操作上的一种排序算法。它和快速排序一样，采用了<strong>分治法</strong>。</p>\n<h3 id=\"基本思想-4\">基本思想<a href=\"#基本思想-4\" title=\"基本思想\"></a></h3><p>归并的含义是将两个或两个以上的有序表组合成一个新的有序表。也就是说，从几个数据段中逐个选出最小的元素移入新数据段的末尾，使之有序。</p>\n<p>那么归并排序的算法我们可以这样理解：</p>\n<p>假如初始序列含有 n 个记录，则可以看成是 n 个有序的子序列，每个子序列的长度为 1。然后两两归并，得到 n/2 个长度为 2 或 1 的有序子序列；再两两归并，……，如此重复，直到得到一个长度为 n 的有序序列为止，这种排序方法称为 <strong>二路归并排序</strong>，下文介绍的也是这种排序方式。</p>\n<h3 id=\"动图演示-6\">动图演示<a href=\"#动图演示-6\" title=\"动图演示\"></a></h3><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/c/20201003131501.gif\" class=\"φcy\"></p>\n<h3 id=\"代码实现-6\">代码实现<a href=\"#代码实现-6\" title=\"代码实现\"></a></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 将 arr[L..M] 和 arr[M+1..R] 归并 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> M, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> LEFT_SIZE = M - L + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> RIGHT_SIZE = R - M;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left[LEFT_SIZE];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right[RIGHT_SIZE];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j, k;</span><br><span class=\"line\">    <span class=\"comment\">// 以 M 为分割线，把原数组分成左右子数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = L; i &lt;= M; i++) left[i - L] = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = M + <span class=\"number\">1</span>; i &lt;= R; i++) right[i - M - <span class=\"number\">1</span>] = arr[i];</span><br><span class=\"line\">    <span class=\"comment\">// 再合并成一个有序数组（从两个序列中选出最小值依次插入）</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span>; j = <span class=\"number\">0</span>; k = L;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; LEFT_SIZE &amp;&amp; j &lt; RIGHT_SIZE) arr[k++] = left[i] &lt; right[j] ? left[i++] : right[j++];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; LEFT_SIZE) arr[k++] = left[i++];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt; RIGHT_SIZE) arr[k++] = right[j++];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L == R) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将 arr[L..R] 平分为 arr[L..M] 和 arr[M+1..R]</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> M = (L + R) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 分别递归地将子序列排序为有序数列</span></span><br><span class=\"line\">    merge_sort(arr, L, M);</span><br><span class=\"line\">    merge_sort(arr, M + <span class=\"number\">1</span>, R);</span><br><span class=\"line\">    <span class=\"comment\">// 将两个排序后的子序列再归并到 arr</span></span><br><span class=\"line\">    merge(arr, L, M, R);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"算法分析-6\">算法分析<a href=\"#算法分析-6\" title=\"算法分析\"></a></h3><p>归并排序是<strong>稳定排序</strong>，它和选择排序一样，性能不受输入数据的影响，但表现比选择排序更好，它的时间复杂度始终为 O(nlogn)，但它需要额外的内存空间，空间复杂度为 O(n)。</p>\n<h2 id=\"桶排序\">桶排序<a href=\"#桶排序\" title=\"桶排序\"></a></h2><p>桶排序（Bucket sort）是<a href=\"https://blog.fiteen.top/2019/sorting-algorithm#counting-sort\" target=\"_blank\">计数排序</a>的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。</p>\n<p>桶排序的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（也有可能是使用别的排序算法或是以递归方式继续用桶排序进行排序）。</p>\n<h3 id=\"算法步骤-1\">算法步骤<a href=\"#算法步骤-1\" title=\"算法步骤\"></a></h3><ol><li>设置固定数量的空桶；</li>\n<li>把数据放在对应的桶内；</li>\n<li>分别对每个非空桶内数据进行排序；</li>\n<li>拼接非空的桶内数据，得到最终的结果。</li>\n</ol><h3 id=\"动图演示-7\">动图演示<a href=\"#动图演示-7\" title=\"动图演示\"></a></h3><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/c/20201003131527.gif\" class=\"φcy\"></p>\n<h3 id=\"代码实现-7\">代码实现<a href=\"#代码实现-7\" title=\"代码实现\"></a></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bucket_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr == <span class=\"literal\">NULL</span> || r &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据最大/最小元素和桶数量，计算出每个桶对应的元素范围</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">max</span> = arr[<span class=\"number\">0</span>], <span class=\"built_in\">min</span> = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">max</span> &lt; arr[i]) <span class=\"built_in\">max</span> = arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">min</span> &gt; arr[i]) <span class=\"built_in\">min</span> = arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> range = (<span class=\"built_in\">max</span> - <span class=\"built_in\">min</span> + <span class=\"number\">1</span>) / r + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 建立桶对应的二维数组，一个桶里最多可能出现 n 个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> buckets[r][n];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(buckets, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(buckets));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> counts[r];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(counts, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(counts));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = (arr[i] - <span class=\"built_in\">min</span>) / range;</span><br><span class=\"line\">        buckets[k][counts[k]++] = arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; r; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分别对每个非空桶内数据进行排序，比如计数排序</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (counts[i] == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        counting_sort(buckets[i], counts[i]);</span><br><span class=\"line\">        <span class=\"comment\">// 拼接非空的桶内数据，得到最终的结果</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; counts[i]; j++) &#123;</span><br><span class=\"line\">            arr[index++] = buckets[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"算法分析-7\">算法分析<a href=\"#算法分析-7\" title=\"算法分析\"></a></h3><p>桶排序是<strong>稳定排序</strong>，但仅限于桶排序本身，假如桶内排序采用了快速排序之类的非稳定排序，那么就是不稳定的。</p>\n<h4 id=\"时间复杂度\">时间复杂度<a href=\"#时间复杂度\" title=\"时间复杂度\"></a></h4><p>桶排序的时间复杂度可以这样看：</p>\n<ul><li>n 次循环，每个数据装入桶</li>\n<li>r 次循环，每个桶中的数据进行排序（每个桶中平均有 n/r 个数据）</li>\n</ul><p>假如桶内排序用的是选择排序这类时间复杂度较高的排序，整个桶排序的时间复杂度就是 O(n)+O(n²)，视作 O(n²)，这是最差的情况；</p>\n<p>假如桶内排序用的是比较先进的排序算法，时间复杂度为 O(nlogn)，那么整个桶排序的时间复杂度为 O(n)+O(r<em>(n/r)</em>log(n/r))=O(n+nlog(n/r))。k=nlog(n/r)，桶排序的平均时间复杂度为 O(n+k)。当 r 接近于 n 时，k 趋近于 0，这时桶排序的时间复杂度是最优的，就可以认为是 O(n)。也就是说如果数据被分配到同一个桶中，排序效率最低；但如果数据可以均匀分配到每一个桶中，时间效率最高，可以线性时间运行。但同样地，桶越多，空间就越大。</p>\n<h4 id=\"空间复杂度\">空间复杂度<a href=\"#空间复杂度\" title=\"空间复杂度\"></a></h4><p>占用额外内存，需要创建 r 个桶的额外空间，以及 n 个元素的额外空间，所以桶排序的空间复杂度为 O(n+r)。</p>\n<h2 id=\"计数排序\">计数排序<a href=\"#计数排序\" title=\"计数排序\"></a></h2><p>计数排序（Counting Sort）是一种<strong>非比较性质</strong>的排序算法，利用了<strong>桶</strong>的思想。它的核心在于将<strong>输入的数据值转化为键存储在额外开辟的辅助空间中</strong>，也就是说这个辅助空间的长度取决于待排序列中的数据范围。</p>\n<p>如何转化成桶思想来理解呢？我们设立 r 个桶，桶的键值分别对应从序列最小值升序到最大值的所有数值。接着，按照键值，依次把元素放进对应的桶中，然后统计出每个桶中分别有多少元素，再通过对桶内数据的计算，即可确定每一个元素最终的位置。</p>\n<h3 id=\"算法步骤-2\">算法步骤<a href=\"#算法步骤-2\" title=\"算法步骤\"></a></h3><ol><li>找出待排序列中最大值 max 和最小值 min，算出序列的数据范围 r = max - min + 1，申请辅助空间 C[r]；</li>\n<li>遍历待排序列，统计序列中每个值为 i 的元素出现的次数，记录在辅助空间的第 i 位；</li>\n<li>对辅助空间内的数据进行计算（从空间中的第一个元素开始，每一项和前一项相加），以确定值为 i 的元素在数组中出现的位置；</li>\n<li>反向填充目标数组：将每个元素 i 放在目标数组的第 C[i] 位，每放一个元素就将 C[i] 减 1，直到 C 中所有值都是 0</li>\n</ol><h3 id=\"动图演示-8\">动图演示<a href=\"#动图演示-8\" title=\"动图演示\"></a></h3><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/c/20201003131601.gif\" class=\"φcy\"></p>\n<h3 id=\"代码实现-8\">代码实现<a href=\"#代码实现-8\" title=\"代码实现\"></a></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">counting_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 定义辅助空间并初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">max</span> = arr[<span class=\"number\">0</span>], <span class=\"built_in\">min</span> = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">max</span> &lt; arr[i]) <span class=\"built_in\">max</span> = arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">min</span> &gt; arr[i]) <span class=\"built_in\">min</span> = arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> r = <span class=\"built_in\">max</span> - <span class=\"built_in\">min</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> C[r];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(C, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(C));</span><br><span class=\"line\">    <span class=\"comment\">// 定义目标数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> R[n];</span><br><span class=\"line\">    <span class=\"comment\">// 统计每个元素出现的次数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++) C[arr[i] - <span class=\"built_in\">min</span>]++;</span><br><span class=\"line\">    <span class=\"comment\">// 对辅助空间内数据进行计算</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; r; i++) C[i] += C[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 反向填充目标数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) R[--C[arr[i] - <span class=\"built_in\">min</span>]] = arr[i];</span><br><span class=\"line\">    <span class=\"comment\">// 目标数组里的结果重新赋值给 arr</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++) arr[i] = R[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"算法分析-8\">算法分析<a href=\"#算法分析-8\" title=\"算法分析\"></a></h3><p>计数排序属于<strong>非交换排序</strong>，是<strong>稳定排序</strong>，适合数据范围不显著大于数据数量的序列。</p>\n<h4 id=\"时间复杂度-1\">时间复杂度<a href=\"#时间复杂度-1\" title=\"时间复杂度\"></a></h4><p>它的时间复杂度是线性的，为 O(n+r)，r 表示待排序列中的数据范围，也就是桶的个数。可以这样理解：将 n 个数据依次放进对应的桶中，再从 r 个桶中把数据按顺序取出来。</p>\n<h4 id=\"空间复杂度-1\">空间复杂度<a href=\"#空间复杂度-1\" title=\"空间复杂度\"></a></h4><p>占用额外内存，还需要 r 个桶，因此空间复杂度是 O(n+r)，计数排序快于任何比较排序算法，但这是通过牺牲空间换取时间来实现的。</p>\n<h2 id=\"基数排序\">基数排序<a href=\"#基数排序\" title=\"基数排序\"></a></h2><p>基数排序（Radix Sort）是<strong>非比较型</strong>排序算法，它和<a href=\"https://blog.fiteen.top/2019/sorting-algorithm#counting-sort\" target=\"_blank\">计数排序</a>、<a href=\"https://blog.fiteen.top/2019/sorting-algorithm#bucket-sort\" target=\"_blank\">桶排序</a>一样，利用了“<strong>桶</strong>”的概念。基数排序不需要进行记录关键字间的比较，是一种<strong>借助多关键字排序的思想对单逻辑关键字进行排序</strong>的方法。比如数字 100，它的个位、十位、百位就是不同的关键字。</p>\n<p>那么，对于一组乱序的数字，基数排序的实现原理就是将整数按位数（关键字）切割成不同的数字，然后按每个位数分别比较。对于关键字的选择，有最高位优先法（MSD 法）和最低位优先法（LSD 法）两种方式。MSD 必须将序列先逐层分割成若干子序列，然后再对各子序列进行排序；而 LSD 进行排序时，不必分成子序列，对每个关键字都是整个序列参加排序。</p>\n<h3 id=\"算法步骤-3\">算法步骤<a href=\"#算法步骤-3\" title=\"算法步骤\"></a></h3><p>以 <strong>LSD 法</strong>为例：</p>\n<ol><li>将所有待比较数值（非负整数）统一为同样的数位长度，数位不足的数值前面补零</li>\n<li>从最低位（个位）开始，依次进行一次排序</li>\n<li>从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列</li>\n</ol><p>如果要支持负数参加排序，可以将序列中所有的值加上一个常数，使这些值都成为非负数，排好序后，所有的值再减去这个常数。</p>\n<h3 id=\"动图演示-9\">动图演示<a href=\"#动图演示-9\" title=\"动图演示\"></a></h3><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/c/20201003131636.gif\" class=\"φcy\"></p>\n<h3 id=\"代码实现-9\">代码实现<a href=\"#代码实现-9\" title=\"代码实现\"></a></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基数，范围0~9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RADIX 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">radix_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取最大值和最小值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">max</span> = arr[<span class=\"number\">0</span>], <span class=\"built_in\">min</span> = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j, l;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">max</span> &lt; arr[i]) <span class=\"built_in\">max</span> = arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">min</span> &gt; arr[i]) <span class=\"built_in\">min</span> = arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 假如序列中有负数，所有数加上一个常数，使序列中所有值变成正数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">min</span> &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++) arr[i] -= <span class=\"built_in\">min</span>;</span><br><span class=\"line\">        <span class=\"built_in\">max</span> -= <span class=\"built_in\">min</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取最大值位数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> d = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">max</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">max</span> /= RADIX;</span><br><span class=\"line\">        d ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">queue</span>[RADIX][n];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(<span class=\"built_in\">queue</span>, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">queue</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count[RADIX] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; d; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分配数据</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> key = arr[j] % (<span class=\"keyword\">int</span>)<span class=\"built_in\">pow</span>(RADIX, i + <span class=\"number\">1</span>) / (<span class=\"keyword\">int</span>)<span class=\"built_in\">pow</span>(RADIX, i);</span><br><span class=\"line\">            <span class=\"built_in\">queue</span>[key][count[key]++] = arr[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 收集数据</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; RADIX; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (l = <span class=\"number\">0</span>; l &lt; count[j]; l++) &#123;</span><br><span class=\"line\">                arr[c++] = <span class=\"built_in\">queue</span>[j][l];</span><br><span class=\"line\">                <span class=\"built_in\">queue</span>[j][l] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            count[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 假如序列中有负数，收集排序结果时再减去前面加上的常数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">min</span> &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++) arr[i] += <span class=\"built_in\">min</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"算法分析-9\">算法分析<a href=\"#算法分析-9\" title=\"算法分析\"></a></h3><p>基数排序是<strong>稳定排序</strong>，适用于关键字取值范围固定的排序。</p>\n<h4 id=\"时间复杂度-2\">时间复杂度<a href=\"#时间复杂度-2\" title=\"时间复杂度\"></a></h4><p>基数排序可以看作是若干次“分配”和“收集”的过程。假设给定 n 个数，它的最高位数是 d，基数（也就是桶的个数）为 r，那么可以这样理解：共进行 d 趟排序，每趟排序都要对 n 个数据进行分配，再从 r 个桶中收集回来。所以算法的时间复杂度为 O(d(n+r))，在整数的排序中，r = 10，因此可以简化成 O(dn)，是<strong>线性阶</strong>的排序。</p>\n<h4 id=\"空间复杂度-2\">空间复杂度<a href=\"#空间复杂度-2\" title=\"空间复杂度\"></a></h4><p>占用额外内存，需要创建 r 个桶的额外空间，以及 n 个元素的额外空间，所以基数排序的空间复杂度为 O(n+r)。</p>\n<h3 id=\"计数排序-amp-桶排序-amp-基数排序\">计数排序 &amp; 桶排序 &amp; 基数排序<a href=\"#计数排序-amp-桶排序-amp-基数排序\" title=\"计数排序 &amp; 桶排序 &amp; 基数排序\"></a></h3><p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p>\n<ul><li>桶排序：每个桶存储一定范围的数值，适用于元素尽可能分布均匀的排序；</li>\n<li>计数排序：每个桶只存储单一键值，适用于最大值和最小值尽可能接近的排序；</li>\n<li>基数排序：根据键值的每位数字来分配桶，适用于非负整数间的排序，且最大值和最小值尽可能接近。</li>\n</ul><p><img src=\"https://i0.hdslb.com/bfs/article/02db465212d3c374a43c60fa2625cc1caeaab796.png\" class=\"φcy\"></p>\n<p>本文关联<a href=\"https://github.com/fiteen/Sorting-Algorithm\" target=\"_blank\">项目地址</a></p>\n","prev":{"title":"Inside Front-Matter","link":"posts/5a6efaf9"},"next":{"title":"Step7 函数","link":"posts/71adb096"},"plink":"https://dxsummer.gitee.io/posts/942e5b03/","toc":[{"id":"概述","title":"概述","index":"1"},{"id":"冒泡排序","title":"冒泡排序","index":"2","children":[{"id":"算法原理","title":"算法原理","index":"2.1"},{"id":"动图演示","title":"动图演示","index":"2.2"},{"id":"代码实现","title":"代码实现","index":"2.3"},{"id":"算法分析","title":"算法分析","index":"2.4"}]},{"id":"快速排序","title":"快速排序","index":"3","children":[{"id":"基本思想","title":"基本思想","index":"3.1"},{"id":"动图演示-1","title":"动图演示","index":"3.2"},{"id":"代码实现-1","title":"代码实现","index":"3.3"},{"id":"算法分析-1","title":"算法分析","index":"3.4"}]},{"id":"插入排序","title":"插入排序","index":"4","children":[{"id":"基本思想-1","title":"基本思想","index":"4.1"},{"id":"动图演示-2","title":"动图演示","index":"4.2"},{"id":"代码实现-2","title":"代码实现","index":"4.3"},{"id":"算法分析-2","title":"算法分析","index":"4.4"}]},{"id":"希尔排序","title":"希尔排序","index":"5","children":[{"id":"基本思想-2","title":"基本思想","index":"5.1"},{"id":"动图演示-3","title":"动图演示","index":"5.2"},{"id":"代码实现-3","title":"代码实现","index":"5.3"},{"id":"算法分析-3","title":"算法分析","index":"5.4"}]},{"id":"选择排序","title":"选择排序","index":"6","children":[{"id":"算法步骤","title":"算法步骤","index":"6.1"},{"id":"动图演示-4","title":"动图演示","index":"6.2"},{"id":"代码实现-4","title":"代码实现","index":"6.3"},{"id":"算法分析-4","title":"算法分析","index":"6.4"}]},{"id":"堆排序","title":"堆排序","index":"7","children":[{"id":"基本思想-3","title":"基本思想","index":"7.1"},{"id":"动图演示-5","title":"动图演示","index":"7.2"},{"id":"代码实现-5","title":"代码实现","index":"7.3"},{"id":"算法分析-5","title":"算法分析","index":"7.4"}]},{"id":"归并排序","title":"归并排序","index":"8","children":[{"id":"基本思想-4","title":"基本思想","index":"8.1"},{"id":"动图演示-6","title":"动图演示","index":"8.2"},{"id":"代码实现-6","title":"代码实现","index":"8.3"},{"id":"算法分析-6","title":"算法分析","index":"8.4"}]},{"id":"桶排序","title":"桶排序","index":"9","children":[{"id":"算法步骤-1","title":"算法步骤","index":"9.1"},{"id":"动图演示-7","title":"动图演示","index":"9.2"},{"id":"代码实现-7","title":"代码实现","index":"9.3"},{"id":"算法分析-7","title":"算法分析","index":"9.4","children":[{"id":"时间复杂度","title":"时间复杂度","index":"9.4.1"},{"id":"空间复杂度","title":"空间复杂度","index":"9.4.2"}]}]},{"id":"计数排序","title":"计数排序","index":"10","children":[{"id":"算法步骤-2","title":"算法步骤","index":"10.1"},{"id":"动图演示-8","title":"动图演示","index":"10.2"},{"id":"代码实现-8","title":"代码实现","index":"10.3"},{"id":"算法分析-8","title":"算法分析","index":"10.4","children":[{"id":"时间复杂度-1","title":"时间复杂度","index":"10.4.1"},{"id":"空间复杂度-1","title":"空间复杂度","index":"10.4.2"}]}]},{"id":"基数排序","title":"基数排序","index":"11","children":[{"id":"算法步骤-3","title":"算法步骤","index":"11.1"},{"id":"动图演示-9","title":"动图演示","index":"11.2"},{"id":"代码实现-9","title":"代码实现","index":"11.3"},{"id":"算法分析-9","title":"算法分析","index":"11.4","children":[{"id":"时间复杂度-2","title":"时间复杂度","index":"11.4.1"},{"id":"空间复杂度-2","title":"空间复杂度","index":"11.4.2"}]},{"id":"计数排序-amp-桶排序-amp-基数排序","title":"计数排序 &amp; 桶排序 &amp; 基数排序","index":"11.5"}]}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/942e5b03/\" title=\"动画详解十大经典排序算法（C语言版）\">https://dxsummer.gitee.io/posts/942e5b03/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2020年6月12日","updated":"2020年10月11日"}}