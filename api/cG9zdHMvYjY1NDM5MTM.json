{"title":"Java笔记","date":"2021-04-12T00:15:27.000Z","date_formatted":{"ll":"2021年4月12日","L":"2021/04/12","MM-DD":"04-12"},"link":"posts/b6543913","comments":true,"tags":["Java"],"categories":["Java"],"updated":"2021-04-12T11:11:01.416Z","content":"<h1 id=\"入门\">入门<a href=\"#入门\" title=\"入门\"></a></h1><h2 id=\"java程序基础\">Java程序基础<a href=\"#java程序基础\" title=\"Java程序基础\"></a></h2><h3 id=\"java程序基本结构\">Java程序基本结构<a href=\"#java程序基本结构\" title=\"Java程序基本结构\"></a></h3><p>我们先剖析一个完整的Java程序，它的基本结构是什么：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以用来自动创建文档的注释</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 向屏幕输出文本:</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello, world!\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">/* 多行注释开始</span></span><br><span class=\"line\"><span class=\"comment\">        注释内容</span></span><br><span class=\"line\"><span class=\"comment\">        注释结束 */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"comment\">// class定义结束</span></span><br></pre></td></tr></table></figure><p>因为Java是面向对象的语言，一个程序的基本单位就是<code>class</code>，<code>class</code>是关键字，这里定义的<code>class</code>名字就是<code>Hello</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> </span>&#123; <span class=\"comment\">// 类名是Hello</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"comment\">// class定义结束</span></span><br></pre></td></tr></table></figure><p>类名要求：</p>\n<ul><li>类名必须以<strong>英文字母开头</strong>，<strong>后接字母，数字和下划线的组合</strong></li>\n<li>习惯以<strong>大写字母开头</strong></li>\n</ul><p>要注意遵守命名习惯，好的类命名：</p>\n<ul><li>Hello</li>\n<li>NoteBook</li>\n<li>VRPlayer</li>\n</ul><p>不好的类命名：</p>\n<ul><li>hello</li>\n<li>Good123</li>\n<li>Note_Book</li>\n<li>_World</li>\n</ul><p>注意到<code>public</code>是访问修饰符，表示该<code>class</code>是公开的。</p>\n<p>不写<code>public</code>，也能正确编译，但是这个类将无法从命令行执行。</p>\n<p>在<code>class</code>内部，可以定义若干方法（method）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; <span class=\"comment\">// 方法名是main</span></span><br><span class=\"line\">        <span class=\"comment\">// 方法代码...</span></span><br><span class=\"line\">    &#125; <span class=\"comment\">// 方法定义结束</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>方法定义了一组执行语句，方法内部的代码将会被依次顺序执行。</p>\n<p>这里的方法名是<code>main</code>，返回值是<code>void</code>，表示没有任何返回值。</p>\n<p>我们注意到<code>public</code>除了可以修饰<code>class</code>外，也可以修饰方法。而关键字<code>static</code>是另一个修饰符，它表示静态方法，后面我们会讲解方法的类型，目前，我们只需要知道，Java入口程序规定的方法必须是静态方法，方法名必须为<code>main</code>，括号内的参数必须是String数组。</p>\n<p>方法名也有命名规则，命名和<code>class</code>一样，但是<strong>首字母小写</strong>：</p>\n<p>好的方法命名：</p>\n<ul><li>main</li>\n<li>goodMorning</li>\n<li>playVR</li>\n</ul><p>不好的方法命名：</p>\n<ul><li>Main</li>\n<li>good123</li>\n<li>good_morning</li>\n<li>_playVR</li>\n</ul><p>在方法内部，语句才是真正的执行代码。Java的每一行语句必须以分号结束：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello, world!\"</span>); <span class=\"comment\">// 语句</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>在Java程序中，注释是一种给人阅读的文本，不是程序的一部分，所以编译器会自动忽略注释。</p>\n<p>Java有3种注释，第一种是单行注释，以双斜线开头，直到这一行的结尾结束：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是注释...</span></span><br></pre></td></tr></table></figure><p>而多行注释以<code>/*</code>星号开头，以<code>*/</code>结束，可以有多行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">这是注释</span></span><br><span class=\"line\"><span class=\"comment\">blablabla...</span></span><br><span class=\"line\"><span class=\"comment\">这也是注释</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><p>还有一种特殊的多行注释，以<code>/**</code>开头，以<code>*/</code>结束，如果有多行，每行通常以星号开头：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以用来自动创建文档的注释</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@auther</span> liaoxuefeng</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello, world!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>这种特殊的多行注释需要写在类和方法的定义处，可以用于自动创建文档。</p>\n<p>Java程序对格式没有明确的要求，多几个空格或者回车不影响程序的正确性，但是我们要养成良好的编程习惯，注意遵守Java社区约定的编码格式。</p>\n<p>那约定的编码格式有哪些要求呢？其实我们在前面介绍的Eclipse IDE提供了快捷键<code>Ctrl+Shift+F</code>（macOS是<code>⌘+⇧+F</code>）帮助我们快速格式化代码的功能，Eclipse就是按照约定的编码格式对代码进行格式化的，所以只需要看看格式化后的代码长啥样就行了。具体的代码格式要求可以在Eclipse的设置中<code>Java</code>-<code>Code Style</code>查看。</p>\n<h3 id=\"变量和数据类型\">变量和数据类型<a href=\"#变量和数据类型\" title=\"变量和数据类型\"></a></h3><h4 id=\"变量\">变量<a href=\"#变量\" title=\"变量\"></a></h4><p>什么是变量？</p>\n<p>变量就是初中数学的代数的概念，例如一个简单的方程，x，y都是变量：</p>\n<p>y=x<sup>2</sup>+1</p>\n<p>在Java中，变量分为两种：<strong>基本类型的变量</strong>和<strong>引用类型的变量</strong>。</p>\n<p>我们先讨论基本类型的变量。</p>\n<p>在Java中，变量必须先定义后使用，在定义变量的时候，可以给它一个初始值。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure><p>上述语句定义了一个整型<code>int</code>类型的变量，名称为<code>x</code>，初始值为<code>1</code>。</p>\n<p>不写初始值，就相当于给它指定了默认值。默认值总是<code>0</code>。</p>\n<p>来看一个完整的定义变量，然后打印变量值的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">100</span>; <span class=\"comment\">// 定义int类型变量x，并赋予初始值100</span></span><br><span class=\"line\">        System.out.println(x); <span class=\"comment\">// 打印该变量的值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>变量的一个重要特点是可以重新赋值。例如，对变量<code>x</code>，先赋值<code>100</code>，再赋值<code>200</code>，观察两次打印的结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">100</span>; <span class=\"comment\">// 定义int类型变量x，并赋予初始值100</span></span><br><span class=\"line\">        System.out.println(x); <span class=\"comment\">// 打印该变量的值，观察是否为100</span></span><br><span class=\"line\">        x = <span class=\"number\">200</span>; <span class=\"comment\">// 重新赋值为200</span></span><br><span class=\"line\">        System.out.println(x); <span class=\"comment\">// 打印该变量的值，观察是否为200</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>注意到第一次定义变量<code>x</code>的时候，需要指定变量类型<code>int</code>，因此使用语句<code>int x = 100;</code>。而第二次重新赋值的时候，变量<code>x</code>已经存在了，不能再重复定义，因此不能指定变量类型<code>int</code>，必须使用语句<code>x = 200;</code>。</p>\n<p>变量不但可以重新赋值，还可以赋值给其他变量。让我们来看一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">100</span>; <span class=\"comment\">// 定义变量n，同时赋值为100</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"n = \"</span> + n); <span class=\"comment\">// 打印n的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">        n = <span class=\"number\">200</span>; <span class=\"comment\">// 变量n赋值为200</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"n = \"</span> + n); <span class=\"comment\">// 打印n的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = n; <span class=\"comment\">// 变量x赋值为n（n的值为200，因此赋值后x的值也是200）</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"x = \"</span> + x); <span class=\"comment\">// 打印x的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">        x = x + <span class=\"number\">100</span>; <span class=\"comment\">// 变量x赋值为x+100（x的值为200，因此赋值后x的值是200+100=300）</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"x = \"</span> + x); <span class=\"comment\">// 打印x的值</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"n = \"</span> + n); <span class=\"comment\">// 再次打印n的值，n应该是200还是300？</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>我们一行一行地分析代码执行流程：</p>\n<p>执行<code>int n = 100;</code>，该语句定义了变量<code>n</code>，同时赋值为<code>100</code>，因此，JVM在内存中为变量<code>n</code>分配一个“存储单元”，填入值<code>100</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      n</span><br><span class=\"line\">      │</span><br><span class=\"line\">      ▼</span><br><span class=\"line\">┌───┬───┬───┬───┬───┬───┬───┐</span><br><span class=\"line\">│   │100│   │   │   │   │   │</span><br><span class=\"line\">└───┴───┴───┴───┴───┴───┴───┘</span><br></pre></td></tr></table></figure><p>执行<code>n = 200;</code>时，JVM把<code>200</code>写入变量<code>n</code>的存储单元，因此，原有的值被覆盖，现在<code>n</code>的值为<code>200</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      n</span><br><span class=\"line\">      │</span><br><span class=\"line\">      ▼</span><br><span class=\"line\">┌───┬───┬───┬───┬───┬───┬───┐</span><br><span class=\"line\">│   │200│   │   │   │   │   │</span><br><span class=\"line\">└───┴───┴───┴───┴───┴───┴───┘</span><br></pre></td></tr></table></figure><p>执行<code>int x = n;</code>时，定义了一个新的变量<code>x</code>，同时对<code>x</code>赋值，因此，JVM需要<em>新分配</em>一个存储单元给变量<code>x</code>，并写入和变量<code>n</code>一样的值，结果是变量<code>x</code>的值也变为<code>200</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      n           x</span><br><span class=\"line\">      │           │</span><br><span class=\"line\">      ▼           ▼</span><br><span class=\"line\">┌───┬───┬───┬───┬───┬───┬───┐</span><br><span class=\"line\">│   │200│   │   │200│   │   │</span><br><span class=\"line\">└───┴───┴───┴───┴───┴───┴───┘</span><br></pre></td></tr></table></figure><p>执行<code>x = x + 100;</code>时，JVM首先计算等式右边的值<code>x + 100</code>，结果为<code>300</code>（因为此刻<code>x</code>的值为<code>200</code>），然后，将结果<code>300</code>写入<code>x</code>的存储单元，因此，变量<code>x</code>最终的值变为<code>300</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      n           x</span><br><span class=\"line\">      │           │</span><br><span class=\"line\">      ▼           ▼</span><br><span class=\"line\">┌───┬───┬───┬───┬───┬───┬───┐</span><br><span class=\"line\">│   │200│   │   │300│   │   │</span><br><span class=\"line\">└───┴───┴───┴───┴───┴───┴───┘</span><br></pre></td></tr></table></figure><p>可见，变量可以反复赋值。注意，等号<code>=</code>是赋值语句，不是数学意义上的相等，否则无法解释<code>x = x + 100</code>。</p>\n<h4 id=\"基本数据类型\">基本数据类型<a href=\"#基本数据类型\" title=\"基本数据类型\"></a></h4><p>基本数据类型是CPU可以直接进行运算的类型。Java定义了以下几种基本数据类型：</p>\n<ul><li>整数类型：byte，short，int，long</li>\n<li>浮点数类型：float，double</li>\n<li>字符类型：char</li>\n<li>布尔类型：boolean</li>\n</ul><p>Java定义的这些基本数据类型有什么区别呢？要了解这些区别，我们就必须简单了解一下计算机内存的基本结构。</p>\n<p>计算机内存的最小存储单元是字节（byte），一个字节就是一个8位二进制数，即8个bit。它的二进制表示范围从<code>00000000</code><del><code>11111111</code>，换算成十进制是0</del>255，换算成十六进制是<code>00</code>~<code>ff</code>。</p>\n<p>内存单元从0开始编号，称为内存地址。每个内存单元可以看作一间房间，内存地址就是门牌号。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  0   1   2   3   4   5   6  ...</span><br><span class=\"line\">┌───┬───┬───┬───┬───┬───┬───┐</span><br><span class=\"line\">│   │   │   │   │   │   │   │...</span><br><span class=\"line\">└───┴───┴───┴───┴───┴───┴───┘</span><br></pre></td></tr></table></figure><p>一个字节是1byte，1024字节是1K，1024K是1M，1024M是1G，1024G是1T。一个拥有4T内存的计算机的字节数量就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4T &#x3D; 4 x 1024G</span><br><span class=\"line\">   &#x3D; 4 x 1024 x 1024M</span><br><span class=\"line\">   &#x3D; 4 x 1024 x 1024 x 1024K</span><br><span class=\"line\">   &#x3D; 4 x 1024 x 1024 x 1024 x 1024</span><br><span class=\"line\">   &#x3D; 4398046511104</span><br></pre></td></tr></table></figure><p>不同的数据类型占用的字节数不一样。我们看一下Java基本数据类型占用的字节数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       ┌───┐</span><br><span class=\"line\">  byte │   │</span><br><span class=\"line\">       └───┘</span><br><span class=\"line\">       ┌───┬───┐</span><br><span class=\"line\"> short │   │   │</span><br><span class=\"line\">       └───┴───┘</span><br><span class=\"line\">       ┌───┬───┬───┬───┐</span><br><span class=\"line\">   int │   │   │   │   │</span><br><span class=\"line\">       └───┴───┴───┴───┘</span><br><span class=\"line\">       ┌───┬───┬───┬───┬───┬───┬───┬───┐</span><br><span class=\"line\">  long │   │   │   │   │   │   │   │   │</span><br><span class=\"line\">       └───┴───┴───┴───┴───┴───┴───┴───┘</span><br><span class=\"line\">       ┌───┬───┬───┬───┐</span><br><span class=\"line\"> float │   │   │   │   │</span><br><span class=\"line\">       └───┴───┴───┴───┘</span><br><span class=\"line\">       ┌───┬───┬───┬───┬───┬───┬───┬───┐</span><br><span class=\"line\">double │   │   │   │   │   │   │   │   │</span><br><span class=\"line\">       └───┴───┴───┴───┴───┴───┴───┴───┘</span><br><span class=\"line\">       ┌───┬───┐</span><br><span class=\"line\">  char │   │   │</span><br><span class=\"line\">       └───┴───┘</span><br></pre></td></tr></table></figure><p><code>byte</code>恰好就是一个字节，而<code>long</code>和<code>double</code>需要8个字节。</p>\n<h4 id=\"整型\">整型<a href=\"#整型\" title=\"整型\"></a></h4><p>对于整型类型，Java只定义了带符号的整型，因此，最高位的bit表示符号位（0表示正数，1表示负数）。各种整型能表示的最大范围如下：</p>\n<ul><li>byte：-128 ~ 127</li>\n<li>short: -32768 ~ 32767</li>\n<li>int: -2147483648 ~ 2147483647</li>\n<li>long: -9223372036854775808 ~ 9223372036854775807</li>\n</ul><p>我们来看定义整型的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i2 = -<span class=\"number\">2147483648</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i3 = <span class=\"number\">2_000_000_000</span>; <span class=\"comment\">// 加下划线更容易识别</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i4 = <span class=\"number\">0xff0000</span>; <span class=\"comment\">// 十六进制表示的16711680</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i5 = <span class=\"number\">0b1000000000</span>; <span class=\"comment\">// 二进制表示的512</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> l = <span class=\"number\">9000000000000000000L</span>; <span class=\"comment\">// long型的结尾需要加L</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>特别注意：同一个数的不同进制的表示是完全相同的，例如<code>15</code>=<code>0xf</code>＝<code>0b1111</code>。</p>\n<h4 id=\"浮点型\">浮点型<a href=\"#浮点型\" title=\"浮点型\"></a></h4><p>浮点类型的数就是小数，因为小数用科学计数法表示的时候，小数点是可以“浮动”的，如1234.5可以表示成12.345x10<sup>2</sup>，也可以表示成1.2345x10<sup>3</sup>，所以称为浮点数。</p>\n<p>下面是定义浮点数的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> f1 = <span class=\"number\">3.14f</span>;</span><br><span class=\"line\"><span class=\"keyword\">float</span> f2 = <span class=\"number\">3.14e38f</span>; <span class=\"comment\">// 科学计数法表示的3.14x10^38</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> d = <span class=\"number\">1.79e308</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> d2 = -<span class=\"number\">1.79e308</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> d3 = <span class=\"number\">4.9e-324</span>; <span class=\"comment\">// 科学计数法表示的4.9x10^-324</span></span><br></pre></td></tr></table></figure><p><mark>对于<code>float</code>类型，需要加上<code>f</code>后缀。</mark></p>\n<p>浮点数可表示的范围非常大，<code>float</code>类型可最大表示3.4x10<sup>38</sup>，而<code>double</code>类型可最大表示1.79x10<sup>308</sup>。</p>\n<h4 id=\"布尔类型\">布尔类型<a href=\"#布尔类型\" title=\"布尔类型\"></a></h4><p>布尔类型<code>boolean</code>只有<code>true</code>和<code>false</code>两个值，布尔类型总是关系运算的计算结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span> b1 = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> b2 = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> isGreater = <span class=\"number\">5</span> &gt; <span class=\"number\">3</span>; <span class=\"comment\">// 计算结果为true</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> age = <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> isAdult = age &gt;= <span class=\"number\">18</span>; <span class=\"comment\">// 计算结果为false</span></span><br></pre></td></tr></table></figure><p>Java语言对布尔类型的存储并没有做规定，因为理论上存储布尔类型只需要1 bit，但是通常JVM内部会把<code>boolean</code>表示为4字节整数。</p>\n<h4 id=\"字符类型\">字符类型<a href=\"#字符类型\" title=\"字符类型\"></a></h4><p>字符类型<code>char</code>表示一个字符。Java的<code>char</code>类型除了可表示标准的ASCII外，还可以表示一个Unicode字符：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> a = <span class=\"string\">'A'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> zh = <span class=\"string\">'中'</span>;</span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        System.out.println(zh);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>注意<code>char</code>类型使用单引号<code>&#39;</code>，且仅有一个字符，要和双引号<code>&quot;</code>的字符串类型区分开。</p>\n<h4 id=\"引用类型\">引用类型<a href=\"#引用类型\" title=\"引用类型\"></a></h4><p>除了上述基本类型的变量，剩下的都是引用类型。例如，引用类型最常用的就是<code>String</code>字符串：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"string\">\"hello\"</span>;</span><br></pre></td></tr></table></figure><p><strong>引用类型的变量类似于C语言的指针</strong>，它内部存储一个“地址”，指向某个对象在内存的位置，后续我们介绍类的概念时会详细讨论。</p>\n<h4 id=\"常量\">常量<a href=\"#常量\" title=\"常量\"></a></h4><p>定义变量的时候，如果加上<code>final</code>修饰符，这个变量就变成了常量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">double</span> PI = <span class=\"number\">3.14</span>; <span class=\"comment\">// PI是一个常量</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> r = <span class=\"number\">5.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> area = PI * r * r;</span><br><span class=\"line\">PI = <span class=\"number\">300</span>; <span class=\"comment\">// compile error!</span></span><br></pre></td></tr></table></figure><p><strong>常量在定义时进行初始化后就不可再次赋值，再次赋值会导致编译错误。</strong></p>\n<p>常量的作用是用有意义的变量名来避免魔术数字（Magic number），例如，不要在代码中到处写<code>3.14</code>，而是定义一个常量。如果将来需要提高计算精度，我们只需要在常量的定义处修改，例如，改成<code>3.1416</code>，而不必在所有地方替换<code>3.14</code>。</p>\n<p>根据习惯，<mark><strong>常量名通常全部大写</strong></mark>。</p>\n<h4 id=\"var关键字\">var关键字<a href=\"#var关键字\" title=\"var关键字\"></a></h4><p>有些时候，类型的名字太长，写起来比较麻烦。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br></pre></td></tr></table></figure><p>这个时候，如果想省略变量类型，可以使用<code>var</code>关键字：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sb = <span class=\"keyword\">new</span> StringBuilder();</span><br></pre></td></tr></table></figure><p>编译器会根据赋值语句自动推断出变量<code>sb</code>的类型是<code>StringBuilder</code>。对编译器来说，语句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sb = <span class=\"keyword\">new</span> StringBuilder();</span><br></pre></td></tr></table></figure><p>实际上会自动变成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br></pre></td></tr></table></figure><p>因此，使用<code>var</code>定义变量，仅仅是少写了变量类型而已。</p>\n<h4 id=\"变量的作用范围\">变量的作用范围<a href=\"#变量的作用范围\" title=\"变量的作用范围\"></a></h4><p>在Java中，多行语句用{ }括起来。很多控制语句，例如条件判断和循环，都以{ }作为它们自身的范围，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (...) &#123; <span class=\"comment\">// if开始</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (...) &#123; <span class=\"comment\">// while 开始</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (...) &#123; <span class=\"comment\">// if开始</span></span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125; <span class=\"comment\">// if结束</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125; <span class=\"comment\">// while结束</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125; <span class=\"comment\">// if结束</span></span><br></pre></td></tr></table></figure><p>只要正确地嵌套这些{ }，编译器就能识别出语句块的开始和结束。而在语句块中定义的变量，它有一个作用域，就是从定义处开始，到语句块结束。超出了作用域引用这些变量，编译器会报错。举个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; <span class=\"comment\">// 变量i从这里开始定义</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">1</span>; <span class=\"comment\">// 变量x从这里开始定义</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            String s = <span class=\"string\">\"hello\"</span>; <span class=\"comment\">// 变量s从这里开始定义</span></span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125; <span class=\"comment\">// 变量s作用域到此结束</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\">// 注意，这是一个新的变量s，它和上面的变量同名，</span></span><br><span class=\"line\">        <span class=\"comment\">// 但是因为作用域不同，它们是两个不同的变量:</span></span><br><span class=\"line\">        String s = <span class=\"string\">\"hi\"</span>;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125; <span class=\"comment\">// 变量x和s作用域到此结束</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125; <span class=\"comment\">// 变量i作用域到此结束</span></span><br></pre></td></tr></table></figure><p>定义变量时，要遵循作用域最小化原则，尽量将变量定义在尽可能小的作用域，并且，不要重复使用变量名。</p>\n<h4 id=\"小结\">小结<a href=\"#小结\" title=\"小结\"></a></h4><p>Java提供了两种变量类型：<strong>基本类型</strong>和<strong>引用类型</strong></p>\n<p>基本类型包括<strong>整型</strong>，<strong>浮点型</strong>，<strong>布尔型，字符型</strong>。</p>\n<p>变量可重新赋值，等号是赋值语句，不是数学意义的等号。</p>\n<p>常量在初始化后不可重新赋值，使用常量便于理解程序意图。</p>\n<h3 id=\"整数运算\">整数运算<a href=\"#整数运算\" title=\"整数运算\"></a></h3><p>Java的整数运算遵循四则运算规则，可以使用任意嵌套的小括号。四则运算规则和初等数学一致。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = (<span class=\"number\">100</span> + <span class=\"number\">200</span>) * (<span class=\"number\">99</span> - <span class=\"number\">88</span>); <span class=\"comment\">// 3300</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">7</span> * (<span class=\"number\">5</span> + (i - <span class=\"number\">9</span>)); <span class=\"comment\">// 23072</span></span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">        System.out.println(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>整数的数值表示不但是精确的，而且整数运算永远是精确的，即使是除法也是精确的，因为两个整数相除只能得到结果的整数部分：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x = <span class=\"number\">12345</span> / <span class=\"number\">67</span>; <span class=\"comment\">// 184</span></span><br></pre></td></tr></table></figure><p>求余运算使用<code>%</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> y = <span class=\"number\">12345</span> % <span class=\"number\">67</span>; <span class=\"comment\">// 12345÷67的余数是17</span></span><br></pre></td></tr></table></figure><p>特别注意：整数的除法对于除数为0时运行时将报错，但编译不会报错。</p>\n<h4 id=\"溢出\">溢出<a href=\"#溢出\" title=\"溢出\"></a></h4><p>要特别注意，整数由于存在范围限制，如果计算结果超出了范围，就会产生溢出，<font color=\"red\"><strong>而溢出不会出错</strong></font>，却会得到一个奇怪的结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">2147483640</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = <span class=\"number\">15</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = x + y;</span><br><span class=\"line\">        System.out.println(sum); <span class=\"comment\">// -2147483641</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>要解释上述结果，我们把整数<code>2147483640</code>和<code>15</code>换成二进制做加法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  0111 1111 1111 1111 1111 1111 1111 1000</span><br><span class=\"line\">+ 0000 0000 0000 0000 0000 0000 0000 1111</span><br><span class=\"line\">-----------------------------------------</span><br><span class=\"line\">  1000 0000 0000 0000 0000 0000 0000 0111</span><br></pre></td></tr></table></figure><p>由于最高位计算结果为<code>1</code>，因此，加法结果变成了一个负数。</p>\n<p>要解决上面的问题，可以把<code>int</code>换成<code>long</code>类型，由于<code>long</code>可表示的整型范围更大，所以结果就不会溢出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> x = <span class=\"number\">2147483640</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> y = <span class=\"number\">15</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> sum = x + y;</span><br><span class=\"line\">System.out.println(sum); <span class=\"comment\">// 2147483655</span></span><br></pre></td></tr></table></figure><p>还有一种简写的运算符，即<code>+=</code>，<code>-=</code>，<code>*=</code>，<code>/=</code>，它们的使用方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n += <span class=\"number\">100</span>; <span class=\"comment\">// 3409, 相当于 n = n + 100;</span></span><br><span class=\"line\">n -= <span class=\"number\">100</span>; <span class=\"comment\">// 3309, 相当于 n = n - 100;</span></span><br></pre></td></tr></table></figure><h4 id=\"自增自减\">自增/自减<a href=\"#自增自减\" title=\"自增/自减\"></a></h4><p>Java还提供了<code>++</code>运算和<code>--</code>运算，它们可以对一个整数进行加1和减1的操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">3300</span>;</span><br><span class=\"line\">        n++; <span class=\"comment\">// 3301, 相当于 n = n + 1;</span></span><br><span class=\"line\">        n--; <span class=\"comment\">// 3300, 相当于 n = n - 1;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = <span class=\"number\">100</span> + (++n); <span class=\"comment\">// 不要这么写</span></span><br><span class=\"line\">        System.out.println(y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意<code>++</code>写在前面和后面计算结果是不同的</strong>，<code>++n</code>表示先加1再引用n，<code>n++</code>表示先引用n再加1。不建议把<code>++</code>运算混入到常规运算中，容易自己把自己搞懵了。</p>\n<h4 id=\"移位运算\">移位运算<a href=\"#移位运算\" title=\"移位运算\"></a></h4><p>在计算机中，整数总是以二进制的形式表示。例如，<code>int</code>类型的整数<code>7</code>使用4字节表示的二进制如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00000000 0000000 0000000 00000111</span><br></pre></td></tr></table></figure><p>可以对整数进行移位运算。对整数<code>7</code>左移1位将得到整数<code>14</code>，左移两位将得到整数<code>28</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n = <span class=\"number\">7</span>;       <span class=\"comment\">// 00000000 00000000 00000000 00000111 = 7</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = n &lt;&lt; <span class=\"number\">1</span>;  <span class=\"comment\">// 00000000 00000000 00000000 00001110 = 14</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> b = n &lt;&lt; <span class=\"number\">2</span>;  <span class=\"comment\">// 00000000 00000000 00000000 00011100 = 28</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> c = n &lt;&lt; <span class=\"number\">28</span>; <span class=\"comment\">// 01110000 00000000 00000000 00000000 = 1879048192</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> d = n &lt;&lt; <span class=\"number\">29</span>; <span class=\"comment\">// 11100000 00000000 00000000 00000000 = -536870912</span></span><br></pre></td></tr></table></figure><p>左移29位时，由于最高位变成<code>1</code>，因此结果变成了负数。</p>\n<p>类似的，对整数28进行右移，结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n = <span class=\"number\">7</span>;       <span class=\"comment\">// 00000000 00000000 00000000 00000111 = 7</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = n &gt;&gt; <span class=\"number\">1</span>;  <span class=\"comment\">// 00000000 00000000 00000000 00000011 = 3</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> b = n &gt;&gt; <span class=\"number\">2</span>;  <span class=\"comment\">// 00000000 00000000 00000000 00000001 = 1</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> c = n &gt;&gt; <span class=\"number\">3</span>;  <span class=\"comment\">// 00000000 00000000 00000000 00000000 = 0</span></span><br></pre></td></tr></table></figure><p><mark><strong>如果对一个负数进行右移，最高位的<code>1</code>不动，结果仍然是一个负数</strong></mark>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n = -<span class=\"number\">536870912</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = n &gt;&gt; <span class=\"number\">1</span>;  <span class=\"comment\">// 11110000 00000000 00000000 00000000 = -268435456</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> b = n &gt;&gt; <span class=\"number\">2</span>;  <span class=\"comment\">// 11111000 00000000 00000000 00000000 = -134217728</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> c = n &gt;&gt; <span class=\"number\">28</span>; <span class=\"comment\">// 11111111 11111111 11111111 11111110 = -2</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> d = n &gt;&gt; <span class=\"number\">29</span>; <span class=\"comment\">// 11111111 11111111 11111111 11111111 = -1</span></span><br></pre></td></tr></table></figure><p>还有一种无符号的右移运算，使用<code>&gt;&gt;&gt;</code>，它的特点是不管符号位，右移后高位总是补<code>0</code>，因此，对一个负数进行<code>&gt;&gt;&gt;</code>右移，它会变成正数，原因是最高位的<code>1</code>变成了<code>0</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n = -<span class=\"number\">536870912</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = n &gt;&gt;&gt; <span class=\"number\">1</span>;  <span class=\"comment\">// 01110000 00000000 00000000 00000000 = 1879048192</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> b = n &gt;&gt;&gt; <span class=\"number\">2</span>;  <span class=\"comment\">// 00111000 00000000 00000000 00000000 = 939524096</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> c = n &gt;&gt;&gt; <span class=\"number\">29</span>; <span class=\"comment\">// 00000000 00000000 00000000 00000111 = 7</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> d = n &gt;&gt;&gt; <span class=\"number\">31</span>; <span class=\"comment\">// 00000000 00000000 00000000 00000001 = 1</span></span><br></pre></td></tr></table></figure><p><strong>对<code>byte</code>和<code>short</code>类型进行移位时，会首先转换为<code>int</code>再进行位移</strong>。</p>\n<p>仔细观察可发现，左移实际上就是不断地×2，右移实际上就是不断地÷2。</p>\n<h4 id=\"位运算\">位运算<a href=\"#位运算\" title=\"位运算\"></a></h4><p>位运算是按位进行与、或、非和异或的运算。</p>\n<p><strong>与运算</strong>的规则是，必须两个数同时为<code>1</code>，结果才为<code>1</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">0</span> &amp; <span class=\"number\">0</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\">n = <span class=\"number\">0</span> &amp; <span class=\"number\">1</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\">n = <span class=\"number\">1</span> &amp; <span class=\"number\">0</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\">n = <span class=\"number\">1</span> &amp; <span class=\"number\">1</span>; <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure><p><strong>或运算</strong>的规则是，只要任意一个为<code>1</code>，结果就为<code>1</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">0</span> | <span class=\"number\">0</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\">n = <span class=\"number\">0</span> | <span class=\"number\">1</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\">n = <span class=\"number\">1</span> | <span class=\"number\">0</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\">n = <span class=\"number\">1</span> | <span class=\"number\">1</span>; <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure><p><strong>非运算</strong>的规则是，<code>0</code>和<code>1</code>互换：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = ~<span class=\"number\">0</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\">n = ~<span class=\"number\">1</span>; <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure><p><strong>异或运算</strong>的规则是，如果两个数不同，结果为<code>1</code>，否则为<code>0</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">0</span> ^ <span class=\"number\">0</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\">n = <span class=\"number\">0</span> ^ <span class=\"number\">1</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\">n = <span class=\"number\">1</span> ^ <span class=\"number\">0</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\">n = <span class=\"number\">1</span> ^ <span class=\"number\">1</span>; <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure><p>对两个整数进行位运算，实际上就是按位对齐，然后依次对每一位进行运算。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">167776589</span>; <span class=\"comment\">// 00001010 00000000 00010001 01001101</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">167776512</span>; <span class=\"comment\">// 00001010 00000000 00010001 00000000</span></span><br><span class=\"line\">        System.out.println(i &amp; n); <span class=\"comment\">// 167776512</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>上述按位与运算实际上可以看作两个整数表示的IP地址<code>10.0.17.77</code>和<code>10.0.17.0</code>，通过<strong>与运算</strong>，可以快速判断一个IP是否在给定的网段内。</p>\n<h4 id=\"运算优先级\">运算优先级<a href=\"#运算优先级\" title=\"运算优先级\"></a></h4><p>在Java的计算表达式中，运算优先级从高到低依次是：</p>\n<ul><li><code>()</code></li>\n<li><code>!</code> <code>~</code> <code>++</code> <code>--</code></li>\n<li><code>*</code> <code>/</code> <code>%</code></li>\n<li><code>+</code> <code>-</code></li>\n<li><code>&lt;&lt;</code> <code>&gt;&gt;</code> <code>&gt;&gt;&gt;</code></li>\n<li><code>&amp;</code></li>\n<li><code>|</code></li>\n<li><code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code></li>\n</ul><p>记不住也没关系，只需要加括号就可以保证运算的优先级正确。</p>\n<h4 id=\"类型自动提升与强制转型\">类型自动提升与强制转型<a href=\"#类型自动提升与强制转型\" title=\"类型自动提升与强制转型\"></a></h4><p>在运算过程中，<strong>如果参与运算的两个数类型不一致，那么计算结果为较大类型的整型</strong>。例如，<mark><code>short</code>和<code>int</code>计算，结果总是<code>int</code></mark>，原因是<code>short</code>首先自动被转型为<code>int</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">short</span> s = <span class=\"number\">1234</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">123456</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = s + i; <span class=\"comment\">// s自动转型为int</span></span><br><span class=\"line\">        <span class=\"keyword\">short</span> y = s + i; <span class=\"comment\">// 编译错误!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>也可以将结果强制转型，即将大范围的整数转型为小范围的整数。强制转型使用<code>(类型)</code>，例如，将<code>int</code>强制转型为<code>short</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i &#x3D; 12345;</span><br><span class=\"line\">short s &#x3D; (short) i; &#x2F;&#x2F; 12345</span><br></pre></td></tr></table></figure><p>要注意，<strong>超出范围的强制转型会得到错误的结果</strong>，原因是转型时，<code>int</code>的两个高位字节直接被扔掉，仅保留了低位的两个字节：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i1 = <span class=\"number\">1234567</span>;</span><br><span class=\"line\">        <span class=\"keyword\">short</span> s1 = (<span class=\"keyword\">short</span>) i1; <span class=\"comment\">// -10617</span></span><br><span class=\"line\">        System.out.println(s1);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i2 = <span class=\"number\">12345678</span>;</span><br><span class=\"line\">        <span class=\"keyword\">short</span> s2 = (<span class=\"keyword\">short</span>) i2; <span class=\"comment\">// 24910</span></span><br><span class=\"line\">        System.out.println(s2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>因此，强制转型的结果很可能是错的。</p>\n<h4 id=\"小结-1\">小结<a href=\"#小结-1\" title=\"小结\"></a></h4><p>整数运算的结果永远是精确的；</p>\n<p>运算结果会自动提升；</p>\n<p>可以强制转型，但超出范围的强制转型会得到错误的结果；</p>\n<p>应该选择合适范围的整型（<code>int</code>或<code>long</code>），没有必要为了节省内存而使用<code>byte</code>和<code>short</code>进行整数运算。</p>\n","next":{"title":"数据库系统概论（第五版）课后答案","link":"posts/d47736e1"},"plink":"https://dxsummer.gitee.io/posts/b6543913/","toc":[{"id":"入门","title":"入门","index":"1","children":[{"id":"java程序基础","title":"Java程序基础","index":"1.1","children":[{"id":"java程序基本结构","title":"Java程序基本结构","index":"1.1.1"},{"id":"变量和数据类型","title":"变量和数据类型","index":"1.1.2","children":[{"id":"变量","title":"变量","index":"1.1.2.1"},{"id":"基本数据类型","title":"基本数据类型","index":"1.1.2.2"},{"id":"整型","title":"整型","index":"1.1.2.3"},{"id":"浮点型","title":"浮点型","index":"1.1.2.4"},{"id":"布尔类型","title":"布尔类型","index":"1.1.2.5"},{"id":"字符类型","title":"字符类型","index":"1.1.2.6"},{"id":"引用类型","title":"引用类型","index":"1.1.2.7"},{"id":"常量","title":"常量","index":"1.1.2.8"},{"id":"var关键字","title":"var关键字","index":"1.1.2.9"},{"id":"变量的作用范围","title":"变量的作用范围","index":"1.1.2.10"},{"id":"小结","title":"小结","index":"1.1.2.11"}]},{"id":"整数运算","title":"整数运算","index":"1.1.3","children":[{"id":"溢出","title":"溢出","index":"1.1.3.1"},{"id":"自增自减","title":"自增&#x2F;自减","index":"1.1.3.2"},{"id":"移位运算","title":"移位运算","index":"1.1.3.3"},{"id":"位运算","title":"位运算","index":"1.1.3.4"},{"id":"运算优先级","title":"运算优先级","index":"1.1.3.5"},{"id":"类型自动提升与强制转型","title":"类型自动提升与强制转型","index":"1.1.3.6"},{"id":"小结-1","title":"小结","index":"1.1.3.7"}]}]}]}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/b6543913/\" title=\"Java笔记\">https://dxsummer.gitee.io/posts/b6543913/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2021年4月12日","updated":"2021年4月12日"}}